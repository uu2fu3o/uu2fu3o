import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a,o as n}from"./app-DS0ZCcmM.js";const p={};function s(r,i){return n(),t("div",null,i[0]||(i[0]=[a(`<h1 id="adcs基础" tabindex="-1"><a class="header-anchor" href="#adcs基础"><span>ADCS基础</span></a></h1><h2 id="active-directory-证书服务安装" tabindex="-1"><a class="header-anchor" href="#active-directory-证书服务安装"><span>Active Directory 证书服务安装</span></a></h2><p>没什么特别需要注意的地方，一直下一步即可（注意将web注册服务勾选）</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231212140115385.png" alt="image-20231212140115385" tabindex="0" loading="lazy"><figcaption>image-20231212140115385</figcaption></figure><p>完了配置证书服务</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231212140238086.png" alt="image-20231212140238086" tabindex="0" loading="lazy"><figcaption>image-20231212140238086</figcaption></figure><p>这里需要选择企业CA</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231212140841888.png" alt="image-20231212140841888" tabindex="0" loading="lazy"><figcaption>image-20231212140841888</figcaption></figure><h2 id="active-directory-证书服务概述" tabindex="-1"><a class="header-anchor" href="#active-directory-证书服务概述"><span>Active Directory 证书服务概述</span></a></h2><ul><li>企业PKI</li></ul><p>PKI即公钥基本结构，用来实现证书的产生、管理、存储、分发和撤销等功能</p><ul><li><p>证书颁发机构</p><p>证书颁发机构 (CA) 接受证书申请，根据 CA 的策略验证申请者的信息，然后使用其私钥将其数字签名应用于证书。然后 CA 将证书颁发给证书的使用者。此外，CA 还负责吊销证书和发布证书吊销列表 (CRL)。</p><p>企业CA与ADDS服务结合，他的信息存储在ADDS数据库里面(就是LDAP上)</p><p><strong>企业CA也支持基于证书模板和自动注册证书</strong></p><p>Certification Authorities 容器对应根 CA 的证书存储。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231212163727387.png" alt="image-20231212163727387" tabindex="0" loading="lazy"><figcaption>image-20231212163727387</figcaption></figure></li><li><p>证书注册 Web 服务</p><p>通过此服务，用户和计算机能够通过 Web 服务执行证书注册。 与证书注册策略 Web 服务一起使用时，可在客户端计算机不是域成员或域成员未连接到域时实现基于策略的证书注册。</p></li><li><p>ADCS服务架构</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/rain1_ice.webp" alt="rain1_ice" tabindex="0" loading="lazy"><figcaption>rain1_ice</figcaption></figure></li></ul><p>ORCA1：首先使用本地管理员部署单机离线的根 CA，配置 AIA 及 CRL，导出根 CA 证书和 CRL 文件</p><p>通常这台机器是离线的，或者是不在域内，防止管理员误操作或者攻击导致根CA的改变，又需要重新下发根CA</p><p>为了验证由根 CA 颁发的证书，需要使 CRL 验证可用于所有端点，为此将在从属 CA (APP1) 上安装一个 Web 服务器来托管验证内容。根 CA 机器使用频率很低，仅当需要进行添加另一个从属/颁发 CA、更新 CA 或更改 CRL。</p><p>APP1：用于端点注册的从属 CA，通常完成以下关键配置</p><p>将根CA放入AD配置容器中，允许域客户计算机自动信任根CA证书，不需要通过组策略下发</p><p>在离线 ORCA1上申请 APP1 的 CA 证书后，利用传输设备将根 CA 证书和 CRL文件放入 APP1 的本地存储中，使 APP1 对根 CA 证书和根 CA CRL 的迅速直接信任</p><p>部署 Web Server 以分发证书和 CRL，设置 CDP 及 AIA</p><ul><li><p>Enterprise NTAuth store( 企业NTAuth存储 )</p><p><strong>NTAuthCertificates</strong> 容器定义了有资格颁发身份验证证书的 CA 证书</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>向 NTAuth 发布/添加证书：</span></span>
<span class="line"><span>certutil –dspublish –f IssuingCaFileName.cer NTAuthCA</span></span>
<span class="line"><span></span></span>
<span class="line"><span>要查看 NTAuth 中的所有证书：</span></span>
<span class="line"><span>certutil –viewstore –enterprise NTAuth</span></span>
<span class="line"><span></span></span>
<span class="line"><span>要删除 NTAuth 中的证书：</span></span>
<span class="line"><span>certutil –viewdelstore –enterprise NTAuth</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>域内机器在注册表中有一份缓存：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>HKLM\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\NTAuth\\Certificates</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当组策略开启“自动注册证书”，等组策略更新时才会更新本地缓存</p></li><li><p>Certificate Revocation List(证书吊销列表)</p><p>位于CDP中包含了CRL的有关信息，例如 URL (Web Server)或 LDAP 路径 (Active Directory)。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231212161206068.png" alt="image-20231212161206068" tabindex="0" loading="lazy"><figcaption>image-20231212161206068</figcaption></figure><p>证书吊销列表 (CRL) 是由颁发相应证书的 CA 发布的已吊销证书列表，将证书与 CRL 进行比较是确定证书是否有效的一种方法</p></li></ul><ul><li><p>AIA（Authority Information Access</p><p>容器保存了中间 CA 证书的 AD 对象。中间 CA 是 PKI 树层次结构中根 CA 的 “子代”，因此，此容器的存在是为了帮助验证证书链。与 Certification Authorities 容器一样，每个 CA 在 AIA 容器中表示为一个 AD 对象，其中 <code>objectClass</code> 属性设置为 CertificationAuthority，并且 <code>cACertificate</code> 属性包含 CA 证书的二进制内容。当有新的 CA 安装时，它的证书则会自动放到 AIA 容器中。这些 CAs 传播到每台机器上的中间证书颁发机构证书存储区。</p></li></ul><h2 id="证书模板" tabindex="-1"><a class="header-anchor" href="#证书模板"><span>证书模板</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>certtmpl.msc</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>开启本地的证书模板控制台，编辑模板证书</p><p>这些模板是注册策略和预定义证书设置的集合，包含诸如 “此证书有效期为多久？”、“证书用于什么？”、“如何指定证书的主题？”、“谁可以申请证书？”，以及许多其他设置。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231212170038046.png" alt="image-20231212170038046" tabindex="0" loading="lazy"><figcaption>image-20231212170038046</figcaption></figure><p>接下来介绍一些属性的用途</p><ul><li><p>常规：证书的有效实践</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213094512770.png" alt="image-20231213094512770" tabindex="0" loading="lazy"><figcaption>image-20231213094512770</figcaption></figure></li><li><p>请求处理：证书的目的和导出私钥的能力（可通过mimikatz导出不可导出的证书）</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213094628023.png" alt="image-20231213094628023" tabindex="0" loading="lazy"><figcaption>image-20231213094628023</figcaption></figure></li><li><p>加密：使用的加密服务提供程序(CSP)和最小密钥大小</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213094753944.png" alt="image-20231213094753944" tabindex="0" loading="lazy"><figcaption>image-20231213094753944</figcaption></figure></li><li><p>subject：它指示如何构建证书的专有名称：来自请求中用户提供的值，或来自请求证书的域主体的身份。这个需要注意的是，默认勾选了<code>在使用者名称中说那个电子邮件名</code>，当用户去申请的时候，如果用户的LDAP属性没有mail就会申请失败。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213095348552.png" alt="image-20231213095348552" tabindex="0" loading="lazy"><figcaption>image-20231213095348552</figcaption></figure></li><li><p>发布要求：CA证书经理程序批准</p><p><strong>这个值得注意，就算用户有注册权限(在ACL里面体现)，但是证书模板勾选了CA证书管理程序批准，也得得到证书管理的批准才能申请证书，如果没有勾选这个，那有权限就可以直接申请证书了。</strong></p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213095953462.png" alt="image-20231213095953462" tabindex="0" loading="lazy"><figcaption>image-20231213095953462</figcaption></figure></li><li><p>安全描述符：证书模板的 ACL，包括具有注册到模板所需的扩展权限的主体的身份。</p></li><li><p>扩展：包含在证书中的 X509v3 扩展列表及其重要性（包括<code>KeyUsage</code>和<code>ExtendedKeyUsages</code>）</p><p>这里有几个关键的地方，我们主要利用的点也是这里</p><p><strong>Extended Key Usages (EKUs)</strong>：扩展密钥用法，描述证书将如何使用的对象标识符（OID）。常见的 EKU OID 包括：</p><ul><li>代码签名（OID 1.3.6.1.5.5.7.3.3）：证书用于签署可执行代码。</li><li>加密文件系统（OID 1.3.6.1.4.1.311.10.3.4）：证书用于加密文件系统。</li><li>安全电子邮件（OID 1.3.6.1.5.5.7.3.4）：证书用于加密电子邮件。</li><li>客户端身份验证（OID 1.3.6.1.5.5.7.3.2）：证书用于身份验证到另一个服务器。</li><li>智能卡登录（OID 1.3.6.1.4.1.311.20.2.2）：证书用于智能卡认证。</li><li>服务器认证（OID 1.3.6.1.5.5.7.3.1）：证书用于识别服务器（例如，HTTPS 证书）。</li></ul><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213100853153.png" alt="image-20231213100853153" tabindex="0" loading="lazy"><figcaption>image-20231213100853153</figcaption></figure><p>当特定的 EKU 出现在证书中时，该证书允许被用于对 AD 进行身份验证。根据 Specterops 的研究，拥有以下 OID 的证书可以用于身份验证：</p><table><thead><tr><th>Description</th><th>OID</th></tr></thead><tbody><tr><td>Client Authentication</td><td>1.3.6.1.5.5.7.3.2</td></tr><tr><td>PKINIT Client Authentication*</td><td>1.3.6.1.5.2.3.4</td></tr><tr><td>Smart Card Logon</td><td>1.3.6.1.4.1.311.20.2.2</td></tr><tr><td>Any Purpose</td><td>2.5.29.37.0</td></tr><tr><td>SubCA（子CA）</td><td>(no EKUs)</td></tr></tbody></table><p><strong>默认情况下，AD CS 部署中不存在 OID 1.3.6.1.5.2.3.4，因此需要⼿动添加，但它确实适⽤于客户端⾝份验证。</strong></p><p>此外，Specterops 发现可以滥⽤的另⼀个 EKU OID 是<strong>证书请求代理</strong> OID 1.3.6.1.4.1.311.20.2.1。除⾮设置了特定限制，否则具有此 OID 的证书可⽤于代表其他用户申请证书。</p><p>如图这些OID</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213102137051.png" alt="image-20231213102137051" tabindex="0" loading="lazy"><figcaption>image-20231213102137051</figcaption></figure><p>当然这些证书模板同样被保存在AD目录中</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,DC=loser,DC=com,ECHANGE2013.loser.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>属性pKIExtendedKeyUsage定义了该证书使包含OID</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213104004019.png" alt="image-20231213104004019" tabindex="0" loading="lazy"><figcaption>image-20231213104004019</figcaption></figure></li></ul><h2 id="证书注册" tabindex="-1"><a class="header-anchor" href="#证书注册"><span>证书注册</span></a></h2><h3 id="注册流程" tabindex="-1"><a class="header-anchor" href="#注册流程"><span>注册流程</span></a></h3><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213111203742.png" alt="image-20231213111203742" tabindex="0" loading="lazy"><figcaption>image-20231213111203742</figcaption></figure><p>1.客户端生成一个证书申请文件</p><p>2.客户端把证书申请文件发送给CA，选择一个证书模板</p><p>3.CA会判断证书模板是否存在，根据模板判断用户是否有权限申请证书。证书模板会决定证书的主题名是什么，证书的有效时间是多久，证书用于干啥。是不是需要证书管理员批准。</p><p>4.CA会使用自己的私钥来签署证书。签署完的证书可以在颁发列表里面看到</p><h3 id="注册权限" tabindex="-1"><a class="header-anchor" href="#注册权限"><span>注册权限</span></a></h3><p>用户不一定从每个定义的证书模板中获取证书。模板由网络管理员创建，再由企业CA发布，客户能够注册。AD CS 在 AD 中将企业 CA 注册为 <code>objectClass</code> 属性为 <code>pKIEnrollmentService</code> 的对象。AD CS 通过将模板的名称添加到对象的 <code>certificateTemplates</code> 属性来指定在企业 CA 上所启用的证书模板</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213141124236.png" alt="image-20231213141124236" tabindex="0" loading="lazy"><figcaption>image-20231213141124236</figcaption></figure><p>AD CS 使用两个安全描述符定义注册权限：一个在证书模板 AD 对象上，另一个在企业 CA 本身上。</p><p>对于证书模板，模板的 DACL 中的以下 ACE 可能会导致主体具有注册权限：</p><ul><li>ACE 为主体授予证书注册（Certificate-Enrollment）扩展权限。这个 ACE 授予主体 <code>RIGHT_DS_CONTROL_ACCESS</code> 访问权限，其中 <code>ObjectType</code> 设置为 <code>0e10c968-78fb-11d2-90d4-00c04f79dc5547</code>。此 GUID 对应于 Certificate-Enrollment 权限。</li><li>ACE 为主体授予证书自动注册 （Certificate-AutoEnrollment）扩展权限。这个 ACE 授予主体 <code>RIGHT_DS_CONTROL_ACCESS</code> 访问权限，其中 <code>ObjectType</code> 设置为 <code>a05b8cc2-17bc-4802-a710-e7c15ab866a249</code>。此 GUID 对应于 Certificate-AutoEnrollment 扩展权限。</li><li>ACE 为主体授予所有扩展（ExtendedRights）权限。这个 ACE 启⽤ <code>RIGHT_DS_CONTROL_ACCESS</code> 访问权限，其中 <code>ObjectType</code> 设置为 <code>00000000- 0000-0000-0000-000000000000</code>。此 GUID 对应于 ExtendedRights 权限。</li><li>ACE 为主体授予完全控制（FullControl/GenericAll）权限。这个 ACE 启用 FullControl/GenericAll 访问权限。</li></ul><p>执行以下命令，查看指定主体对指定证书模板所拥有的 ACE，如下图所示。</p><div class="language-powershell line-numbers-mode" data-highlighter="shiki" data-ext="powershell" data-title="powershell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">Import-Module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ActiveDirectory</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cd AD:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$Acl</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> Get-Acl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;CN=User,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,DC=loser,DC=com&#39;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$Acl.Access.Count</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$Acl.Access</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> IdentityReference </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-match</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;Domain Users&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213142702749.png" alt="image-20231213142702749" tabindex="0" loading="lazy"><figcaption>image-20231213142702749</figcaption></figure><p>通过图形化界面设置证书模板的权限</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213143000001.png" alt="image-20231213143000001" tabindex="0" loading="lazy"><figcaption>image-20231213143000001</figcaption></figure><p>勾选注册权限，则这个组内的用户都会拥有注册权限所有的这些安全设置都将在 CA 服务器上的注册表</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>HKLM\\SYSTEM\\CurrentControlSet\\Services\\CertSvc\\Configuration\\&lt;CA NAME&gt;中设置键值 Security</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在企业CA上，查看CA对于用户访问权限的设置</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213151859563.png" alt="image-20231213151859563" tabindex="0" loading="lazy"><figcaption>image-20231213151859563</figcaption></figure><h3 id="注册方式" tabindex="-1"><a class="header-anchor" href="#注册方式"><span>注册方式</span></a></h3><p>如果企业 CA 和证书模板的安全描述符都授予客户端证书注册权限，则客户端可以请求证书。客户端可以根据 AD CS 环境的配置以不同⽅式请求证书：</p><p>1.通过web服务进行申请，需要安装web服务组件</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213150802793.png" alt="image-20231213150802793" tabindex="0" loading="lazy"><figcaption>image-20231213150802793</figcaption></figure><p>2.通过本地GUI进行申请</p><p>启动 <code>certmgr.msc</code>（用于申请用户证书）或 <code>certlm.msc</code>（用于申请计算机证书），右键单击 “个人”，选择 “所有任务”，选择 “申请新证书”</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213150941157.png" alt="image-20231213150941157" tabindex="0" loading="lazy"><figcaption>image-20231213150941157</figcaption></figure><p>3.使用 Windows 客户端证书注册协议（MS-WCCE），这是一组分布式组件对象模型（DCOM）接口，可与包括注册在内的各种 AD CS 功能进行交互。DCOM 服务器默认在所有 AD CS 服务器上启用，这也是客户端申请证书的最常用方法</p><p>4.通过 ICertPassage 远程协议（MS-ICPR），一种可以在命名管道或 TCP/IP 上运行的 RPC 协议。</p><p>5.与证书注册服务（CES）交互。要使用此功能，服务器需要安装 “证书注册 Web 服务” 角色。启用后，用户可以通过 <code>https://&lt;CESSERVER&gt;/&lt;CANAME&gt;_CES_Kerberos/service.svc</code> 访问 Web 服务以请求证书。此服务与证书注册策略（CEP）服务（通过证书注册策略 Web 服务角色安装）协同工作，客户端使用该服务在 URL <code>https://&lt;CEPSERVER&gt;/ADPolicyProvider_CEP_Kerberos/service.svc</code> 中列出证书模板</p><p>6.使用网络设备注册服务。要使用它，服务器需要安装 “网络设备注册服务” 角色，它允许客户端（即网络设备）通过简单证书注册协议（SCEP）获取证书。启用后，管理员可以在 URL <code>http://&lt;NDESSERVER&gt;/CertSrv/mscep_admin/</code> 中获取一次性密码（OTP）。然后管理员可以将 OTP 提供给网络设备，该设备将使用 SCEP 通过 URL <code>http://NDESSERVER/CertSrv/mscep/</code> 请求证书。</p><p>还可以使用内置的 <code>certreq.exe</code> 命令或 PowerShell 的 <code>Get-Certificate</code> Cmdlet 进行证书注册。在非 Windows 机器上，客户端可以使用基于 HTTP 的接口来申请证书。</p><p>CA 颁发证书后，可以通过 <code>certsrv.msc</code> 吊销颁发的证书。默认情况下，AD CS 使用证书吊销列表（CRL）分发吊销的证书信息，它们基本上只是每个被撤销证书的序列号的列表。</p><h2 id="窃取证书" tabindex="-1"><a class="header-anchor" href="#窃取证书"><span>窃取证书</span></a></h2><p>在我们可控的计算机上可能会存在一些证书，这些证书有可能是用客户端身份验证，有可能是CA证书，用以信任其他证书的。我们可以将这些证书导出来。首先需要知道的是，证书分为私钥可导出以及私钥不可导出，私钥可导出的证书我们直接通过图形化界面进行导出就可以了，这是最简单快捷的方法，而私钥不可导出的证书需要使用mimikatz</p><h3 id="从系统存储导出证书" tabindex="-1"><a class="header-anchor" href="#从系统存储导出证书"><span>从系统存储导出证书</span></a></h3><p>windows自带命令certutil能够查看当前计算机上的证书，默认查看计算机证书，通过指定参数-user查看用户证书，通过指定-store来查看存储分区，如CA,root,My分别对应中间证书机构<code>,</code>个人证书<code>,</code>受信任的根证书颁发机构。</p><p>(图形化查看用户证书是命令是<code>certmgr.msc</code>，图形化查看计算机证书的命令是<code>certlm.msc</code>)</p><p>通过certutil -store My来查看个人证书</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231227153327843.png" alt="image-20231227153327843" tabindex="0" loading="lazy"><figcaption>image-20231227153327843</figcaption></figure><p>接下来导出证书，找到我们想导出的证书的hash</p><p>如果只是导出证书，不导出密钥</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>certutil -user -store My d950bcdd9e12d8d89b447416490e81a6718711e5 c:\\Users\\Administrator\\Desktop\\test1.cer</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果要导出的证书包含私钥</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>certutil -user -exportPFX d950bcdd9e12d8d89b447416490e81a6718711e5 c:\\Users\\Administrator\\Desktop\\test1.pfx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>导出过程中需要输入密码，这个密码用于导入证书到计算机时使用</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231227154732329.png" alt="image-20231227154732329" tabindex="0" loading="lazy"><figcaption>image-20231227154732329</figcaption></figure><p>如果是私钥不可导出的证书，在执行对应命令时会出现这样的情况，这里以计算机证书举例</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231227201924337.png" alt="image-20231227201924337" tabindex="0" loading="lazy"><figcaption>image-20231227201924337</figcaption></figure><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>certutil -exportPFX ee27965b1367f2bb1479fc1ed4dde5dcaa6e2b14 c:\\Users\\Administrator\\Desktop\\machine.pfx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231227202118646.png" alt="image-20231227202118646" tabindex="0" loading="lazy"><figcaption>image-20231227202118646</figcaption></figure><p>这时候我们就需要使用mimikatz了，mimikatz的<code>crypto::capi</code> 和 <code>crypto::cng</code> 命令可以 Patch CAPI 和 CNG 以允许导出私钥。<code>crypto::capi</code> 在当前进程中 Patch CAPI，而 <code>crypto::cng</code> 可以 Patch lsass.exe 的内存。此后用<code>crypto::certificates</code>进行导出（需要注意的是，这个模块默认情况下也是不支持导出私钥不可导出类型）</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231227203020792.png" alt="image-20231227203020792" tabindex="0" loading="lazy"><figcaption>image-20231227203020792</figcaption></figure><p>使用crypto::capi进行patch</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231227203218239.png" alt="image-20231227203218239" tabindex="0" loading="lazy"><figcaption>image-20231227203218239</figcaption></figure><p>现在可以顺利导出了</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231227203628232.png" alt="image-20231227203628232" tabindex="0" loading="lazy"><figcaption>image-20231227203628232</figcaption></figure><h3 id="从文件系统搜索证书" tabindex="-1"><a class="header-anchor" href="#从文件系统搜索证书"><span>从文件系统搜索证书</span></a></h3><p>有时证书和它们的私钥只是散落的分布在文件系统上，不需要从系统存储中提取它们。例如，我们在文件共享、管理员的下载文件夹、源代码存储库和服务器的文件系统以及许多其他地方中看到了导出的证书及其私钥。</p><p>下面是一些后缀</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>.key 		只包含私钥</span></span>
<span class="line"><span>crt/cer 	只包含公钥</span></span>
<span class="line"><span>csr 		证书申请文件，不包含公钥也不包含私钥</span></span>
<span class="line"><span>pfx,pem,p12 包含公私钥，最关键的</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="申请可用于kerberos认证的证书" tabindex="-1"><a class="header-anchor" href="#申请可用于kerberos认证的证书"><span>申请可用于kerberos认证的证书</span></a></h2><p>在证书模板的位置提到过有几个比较关键的扩展，想要向kerberos进行申请，证书必须具有5个关键扩展的其中之一</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231227212019924.png" alt="image-20231227212019924" tabindex="0" loading="lazy"><figcaption>image-20231227212019924</figcaption></figure><p>一个用户想要申请证书，需要通过两个权限校验</p><ul><li>在CA上具有请求证书的权限，这个默认都有</li><li>在证书模板上有注册权限</li></ul><p>我们之前提到过，有的证书模板可能设置了发布要求需要管理员审批，我们需求的模板最好是不需要管理员进行审核的。</p><p>那么综上，能定位到用户/计算机这两个证书模板</p><ul><li><p>这两个模板有什么优点？</p><p>1.他们的扩展属性都有客户端身份验证</p><p>2.用户证书默认所有域用户都可以注册</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231227213350320.png" alt="image-20231227213350320" tabindex="0" loading="lazy"><figcaption>image-20231227213350320</figcaption></figure><p>3.计算机证书模板默认所有计算机都可以注册</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231227213433055.png" alt="image-20231227213433055" tabindex="0" loading="lazy"><figcaption>image-20231227213433055</figcaption></figure><ol start="4"><li>这两个证书模板在注册时不需要经过管理员的审核</li></ol></li><li><p>当我们获取到对应的用户凭据后，如何去申请证书呢</p><p>通过web页面进行申请，访问<a href="https://CA/certsrv,%E6%8F%90%E4%BA%A4%E7%94%A8%E6%88%B7%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7%E5%8D%B3%E5%8F%AF" target="_blank" rel="noopener noreferrer">https://CA/certsrv,提交用户证书申请即可</a></p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231227214406849.png" alt="image-20231227214406849" tabindex="0" loading="lazy"><figcaption>image-20231227214406849</figcaption></figure><p>通过<code>certmgr.msc</code>申请，适用于在域内的情况</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231227214904279.png" alt="image-20231227214904279" tabindex="0" loading="lazy"><figcaption>image-20231227214904279</figcaption></figure></li></ul><h2 id="通过证书窃取用户凭据" tabindex="-1"><a class="header-anchor" href="#通过证书窃取用户凭据"><span>通过证书窃取用户凭据</span></a></h2><h3 id="请求kerberos证书" tabindex="-1"><a class="header-anchor" href="#请求kerberos证书"><span>请求kerberos证书</span></a></h3><p>我们来回顾一下传统的kerberos申请TGT的过程，用户hash加密时间戳作为value,type为PA-ENC-TIMESTAMP， 放在PA_DATA上。KDC收到并解密，对比时间在合理范围内就返回TGT</p><p>这个过程可以使用证书进行认证，在RFC4556中有这样一段话。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231228141250441.png" alt="image-20231228141250441" tabindex="0" loading="lazy"><figcaption>image-20231228141250441</figcaption></figure><p>引入了kerberos预身份验证的公钥加密支持。RFC4556又叫Public Key Cryptography for Initial Authentication in Kerberos (PKINIT)</p><p>使用证书进行kerberos的身份认证，不再使用用户密码派生hash密钥，转而使用证书私钥进行签名</p><p>为administrator导出一个包含私钥的证书，使用该证书去申请kerberos身份验证</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Rubeus.exe asktgt /user:Administrator /certificate:administrator.pfx /domain:loser.com /dc:ECHANGE2013.loser.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231228144631564.png" alt="image-20231228144631564" tabindex="0" loading="lazy"><figcaption>image-20231228144631564</figcaption></figure><h3 id="请求ntlm凭据" tabindex="-1"><a class="header-anchor" href="#请求ntlm凭据"><span>请求NTLM凭据</span></a></h3><p>在微软官方文档中有这样一句话</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231228150749067.png" alt="image-20231228150749067" tabindex="0" loading="lazy"><figcaption>image-20231228150749067</figcaption></figure><p>为了支持ntlm身份验证，在PAC中会单向返回用户的ntlm hash</p><p>因此获取ntlm凭据也是能够实现的,这一点benjamin在17年就进行了武器化</p><p>使用kekeo可以获取到证书对应用户的ntlm凭据，需要包含私钥</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231228152545277.png" alt="image-20231228152545277" tabindex="0" loading="lazy"><figcaption>image-20231228152545277</figcaption></figure><p>如果用户更改了密码，我们仍然能够持续的获取该用户的ntlm hash，如果我们有对应证书的话，毕竟证书和kerberos在设计上是分开的。</p>`,117)]))}const c=e(p,[["render",s],["__file","AD_CS基础.html.vue"]]),g=JSON.parse('{"path":"/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/AD%20CS%E4%B8%93%E9%A2%98/AD_CS%E5%9F%BA%E7%A1%80.html","title":"ADCS基础","lang":"zh-CN","frontmatter":{"description":"ADCS基础 Active Directory 证书服务安装 没什么特别需要注意的地方，一直下一步即可（注意将web注册服务勾选） image-20231212140115385image-20231212140115385 完了配置证书服务 image-20231212140238086image-20231212140238086 这里需要选择企业...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/articles/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/AD%20CS%E4%B8%93%E9%A2%98/AD_CS%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"uu2fu3o的知识库"}],["meta",{"property":"og:title","content":"ADCS基础"}],["meta",{"property":"og:description","content":"ADCS基础 Active Directory 证书服务安装 没什么特别需要注意的地方，一直下一步即可（注意将web注册服务勾选） image-20231212140115385image-20231212140115385 完了配置证书服务 image-20231212140238086image-20231212140238086 这里需要选择企业..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231212140115385.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T18:41:02.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-15T18:41:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ADCS基础\\",\\"image\\":[\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231212140115385.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231212140238086.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231212140841888.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231212163727387.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/rain1_ice.webp\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231212161206068.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231212170038046.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213094512770.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213094628023.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213094753944.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213095348552.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213095953462.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213100853153.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213102137051.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213104004019.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213111203742.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213141124236.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213142702749.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213143000001.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213151859563.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213150802793.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231213150941157.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231227153327843.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231227154732329.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231227201924337.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231227202118646.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231227203020792.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231227203218239.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231227203628232.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231227212019924.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231227213350320.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231227213433055.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231227214406849.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231227214904279.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231228141250441.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231228144631564.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231228150749067.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231228152545277.png\\"],\\"dateModified\\":\\"2025-01-15T18:41:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"uu2fu3o\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Active Directory 证书服务安装","slug":"active-directory-证书服务安装","link":"#active-directory-证书服务安装","children":[]},{"level":2,"title":"Active Directory 证书服务概述","slug":"active-directory-证书服务概述","link":"#active-directory-证书服务概述","children":[]},{"level":2,"title":"证书模板","slug":"证书模板","link":"#证书模板","children":[]},{"level":2,"title":"证书注册","slug":"证书注册","link":"#证书注册","children":[{"level":3,"title":"注册流程","slug":"注册流程","link":"#注册流程","children":[]},{"level":3,"title":"注册权限","slug":"注册权限","link":"#注册权限","children":[]},{"level":3,"title":"注册方式","slug":"注册方式","link":"#注册方式","children":[]}]},{"level":2,"title":"窃取证书","slug":"窃取证书","link":"#窃取证书","children":[{"level":3,"title":"从系统存储导出证书","slug":"从系统存储导出证书","link":"#从系统存储导出证书","children":[]},{"level":3,"title":"从文件系统搜索证书","slug":"从文件系统搜索证书","link":"#从文件系统搜索证书","children":[]}]},{"level":2,"title":"申请可用于kerberos认证的证书","slug":"申请可用于kerberos认证的证书","link":"#申请可用于kerberos认证的证书","children":[]},{"level":2,"title":"通过证书窃取用户凭据","slug":"通过证书窃取用户凭据","link":"#通过证书窃取用户凭据","children":[{"level":3,"title":"请求kerberos证书","slug":"请求kerberos证书","link":"#请求kerberos证书","children":[]},{"level":3,"title":"请求NTLM凭据","slug":"请求ntlm凭据","link":"#请求ntlm凭据","children":[]}]}],"git":{"createdTime":1736966462000,"updatedTime":1736966462000,"contributors":[{"name":"uu2fu3o","username":"uu2fu3o","email":"1027578439@qq.com","commits":1,"url":"https://github.com/uu2fu3o"}]},"readingTime":{"minutes":15.04,"words":4513},"filePathRelative":"渗透测试/AD CS专题/AD_CS基础.md","localizedDate":"2025年1月16日","excerpt":"\\n<h2>Active Directory 证书服务安装</h2>\\n<p>没什么特别需要注意的地方，一直下一步即可（注意将web注册服务勾选）</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231212140115385.png\\" alt=\\"image-20231212140115385\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20231212140115385</figcaption></figure>","autoDesc":true}');export{c as comp,g as data};
