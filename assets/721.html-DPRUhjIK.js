import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as r,o as i}from"./app-DS0ZCcmM.js";const n={};function o(c,e){return i(),a("div",null,e[0]||(e[0]=[r('<h1 id="_721" tabindex="-1"><a class="header-anchor" href="#_721"><span>721</span></a></h1><h2 id="漏洞成因" tabindex="-1"><a class="header-anchor" href="#漏洞成因"><span>漏洞成因</span></a></h2><p>在Shiro721漏洞中，由于Apache Shiro cookie中通过 AES-128-CBC 模式加密的rememberMe字段存在问题，用户可通过Padding Oracle Attack来构造恶意的rememberMe字段，并重新请求网站，进行反序列化攻击，最终导致任意代码执行。</p><p>虽然使用Padding Oracle Attack可以绕过密钥直接构造攻击密文，但是在进行攻击之前我们需要获取一个合法用户的Cookie。<br> 版本<br> Apache Shiro &lt;= 1.4.1</p><h2 id="漏洞分析" tabindex="-1"><a class="header-anchor" href="#漏洞分析"><span>漏洞分析</span></a></h2><h3 id="密钥生成" tabindex="-1"><a class="header-anchor" href="#密钥生成"><span>密钥生成</span></a></h3><p>我们首先定位到原来存储密钥的位置看下<br> 跟进AbstractRememberMe的构造函数</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20241015154543.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>现在的key是动态生成的，继续跟进generateNewKey()</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20241015155028.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>实例化一个KeyGenerator对象用于key的生成，并调用init函数进行初始化，跟进init()</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20241015155133.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>获取了一个随机数发生器<code>SecureRandom</code><br> 回到generateNewKey()下，调用了generateKey()生成key,跟到跟到<code>engineGenerateKey()</code></p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20241015160310.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>返回一个SecretKeySpec对象，最后通过getEncode获取密钥序列，至此密钥生成流程结束</p><h3 id="padding条件" tabindex="-1"><a class="header-anchor" href="#padding条件"><span>padding条件</span></a></h3><p>Padding Oracle Attack攻击是一种类似于sql盲注的攻击，这就要求服务器端有能够被我们利用的布尔条件。</p><h4 id="padding错误" tabindex="-1"><a class="header-anchor" href="#padding错误"><span>padding错误</span></a></h4><p>Padding结果不正确的话，响应包就会返回 <code>Set-Cookie: rememberMe=deleteMe</code></p><h4 id="padding正确-反序列化错误" tabindex="-1"><a class="header-anchor" href="#padding正确-反序列化错误"><span>padding正确，反序列化错误</span></a></h4><p>CBC模式下的分组密码，如果某一组的密文被破坏，那么在其之后的分组都会受到影响。这时候我们的密文就无法正确的被反序列化了<br> 但是对于Java来说，反序列化是以Stream的方式按顺序进行的，向其后添加或更改一些字符串并不会影响正常反序列化。也就是Java序列化数据后的脏数据不影响反序列化结果。<br> 其余流程与550相同</p>',21)]))}const g=t(n,[["render",o],["__file","721.html.vue"]]),u=JSON.parse('{"path":"/Java%E5%AD%A6%E4%B9%A0/Shiro/721.html","title":"721","lang":"zh-CN","frontmatter":{"description":"721 漏洞成因 在Shiro721漏洞中，由于Apache Shiro cookie中通过 AES-128-CBC 模式加密的rememberMe字段存在问题，用户可通过Padding Oracle Attack来构造恶意的rememberMe字段，并重新请求网站，进行反序列化攻击，最终导致任意代码执行。 虽然使用Padding Oracle Att...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/articles/Java%E5%AD%A6%E4%B9%A0/Shiro/721.html"}],["meta",{"property":"og:site_name","content":"uu2fu3o的知识库"}],["meta",{"property":"og:title","content":"721"}],["meta",{"property":"og:description","content":"721 漏洞成因 在Shiro721漏洞中，由于Apache Shiro cookie中通过 AES-128-CBC 模式加密的rememberMe字段存在问题，用户可通过Padding Oracle Attack来构造恶意的rememberMe字段，并重新请求网站，进行反序列化攻击，最终导致任意代码执行。 虽然使用Padding Oracle Att..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20241015154543.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T18:41:02.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-15T18:41:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"721\\",\\"image\\":[\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20241015154543.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20241015155028.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20241015155133.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20241015160310.png\\"],\\"dateModified\\":\\"2025-01-15T18:41:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"uu2fu3o\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"漏洞成因","slug":"漏洞成因","link":"#漏洞成因","children":[]},{"level":2,"title":"漏洞分析","slug":"漏洞分析","link":"#漏洞分析","children":[{"level":3,"title":"密钥生成","slug":"密钥生成","link":"#密钥生成","children":[]},{"level":3,"title":"padding条件","slug":"padding条件","link":"#padding条件","children":[]}]}],"git":{"createdTime":1736966462000,"updatedTime":1736966462000,"contributors":[{"name":"uu2fu3o","username":"uu2fu3o","email":"1027578439@qq.com","commits":1,"url":"https://github.com/uu2fu3o"}]},"readingTime":{"minutes":1.59,"words":478},"filePathRelative":"Java学习/Shiro/721.md","localizedDate":"2025年1月16日","excerpt":"\\n<h2>漏洞成因</h2>\\n<p>在Shiro721漏洞中，由于Apache Shiro cookie中通过 AES-128-CBC 模式加密的rememberMe字段存在问题，用户可通过Padding Oracle Attack来构造恶意的rememberMe字段，并重新请求网站，进行反序列化攻击，最终导致任意代码执行。</p>\\n<p>虽然使用Padding Oracle Attack可以绕过密钥直接构造攻击密文，但是在进行攻击之前我们需要获取一个合法用户的Cookie。<br>\\n版本<br>\\nApache Shiro &lt;= 1.4.1</p>\\n<h2>漏洞分析</h2>\\n<h3>密钥生成</h3>","autoDesc":true}');export{g as comp,u as data};
