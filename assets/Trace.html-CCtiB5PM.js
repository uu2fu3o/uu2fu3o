import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-DS0ZCcmM.js";const t={};function h(l,i){return e(),a("div",null,i[0]||(i[0]=[n(`<h1 id="trace" tabindex="-1"><a class="header-anchor" href="#trace"><span>Trace</span></a></h1><p>通过frida自带frida-trace去做trace,也有很多可用的脚本，这里记录几个常用的<br> trace Java : <a href="https://github.com/hluwa/ZenTracer" target="_blank" rel="noopener noreferrer">ZenTrace</a>、<a href="https://github.com/r0ysue/r0tracer" target="_blank" rel="noopener noreferrer">r0tracer</a><br> trace so : <a href="https://github.com/Pr0214/trace_natives" target="_blank" rel="noopener noreferrer">trace_natives</a>(本质上还是用的frida-trace和ida-api)<br> 附上trace_natives的运行截图</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20241118175003.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>该脚本的功能在于列出so中所有函数列表并全部trace,最终形成树状结构，这有助于我们很好的了解so层函数的运行情况，方便分析<br> 至于实现可以自行查看code，本质上是ida-api</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> func </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> idautils.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">Functions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ea, ed):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                functionName </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(idaapi.ida_funcs.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get_func_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(func))</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                if</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(idautils.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">FuncItems</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(func))) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                    # 如果是thumb模式，地址+1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    arm_or_thumb </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> idc.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get_sreg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(func, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;T&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> arm_or_thumb:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        func </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    search_result.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">hex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(func))</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            except</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                pass</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="unidbg" tabindex="-1"><a class="header-anchor" href="#unidbg"><span>Unidbg</span></a></h1><p>Unidbg本身是一个模拟器，所以在trace方面可能会弱于frida-trace这样的真机trace,我个人认为胜在方便，以及算法模拟在灰黑产方面较多使用</p><h2 id="instruction-tracing" tabindex="-1"><a class="header-anchor" href="#instruction-tracing"><span>Instruction tracing</span></a></h2><p>Unidbg基于Unicorn CodeHook封装了指令追踪</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TraceHook</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> traceCode</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TraceHook</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> traceCode</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> begin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> end)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TraceHook</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> traceCode</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> begin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TraceCodeListener</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> listener)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//emulator.traceCode(module.base,module.base+module.size).setRedirect(traceStream);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通用代码</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> trace</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(){  </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> traceFile </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;unidbg-android/src/test/java/com/jd/trace.txt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    PrintStream</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> traceStream </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">{  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        traceStream </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> PrintStream</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FileOutputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(traceFile)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">FileNotFoundException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    emulator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">traceCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">base</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">base</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setRedirect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(traceStream);</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保存下来方便查看<br> 模块名+相对偏移+机器码+绝对地址+汇编 的展示形式</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20241119102703.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>这样一trace就是百万行往上，需要根据自己目标的算法检索关键的魔数信息</p><h2 id="function-tracing" tabindex="-1"><a class="header-anchor" href="#function-tracing"><span>Function tracing</span></a></h2><p>比指令trace粒度更粗糙，但是更容易理解全貌，效果类似于trace_natives<br> 要在unidbg中实现该效果，需要解决三个问题</p><ul><li>函数列表</li><li>hook函数的方法</li><li>深度<br> 三个问题在trace_natives中得到了很好的解决，分别采用ida_api，frida_native_hook, frida_trace自带回溯深度<br> 来看下在unidbg中如何解决<br> 1.函数列表问题，hook方法问题<br> ARM中，函数序言常常以push指令开始，这可以代表绝大多数函数。配合Unidbg的BlockHook或者CodeHook，就可以解析并Hook这些函数<br> 2.深度问题<br> Unidbg实现了arm unwind栈回溯，不过需要自行添加一个深度计算函数<br><em>src/main/java/com/github/unidbg/unwind/Unwinder.java</em></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> depth</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(){  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> count </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Frame</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> frame </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">((frame </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> unw_step</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(emulator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> frame)) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">frame</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isFinish</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">){  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后组装代码<br><a href="https://ng-tech.icu/books/infosecurity-notes/%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/%E8%BD%AC%E8%BD%BDunidbg-hook-%E5%A4%A7%E5%85%A8-seeflowerx/#1instruction-tracing" target="_blank" rel="noopener noreferrer">code</a><br> 新版似乎无法像原来那样运行，trace_natives足够用了</p><h2 id="findkey" tabindex="-1"><a class="header-anchor" href="#findkey"><span>Findkey</span></a></h2><p><a href="https://github.com/Pr0214/Unidbg_FindKey" target="_blank" rel="noopener noreferrer">https://github.com/Pr0214/Unidbg_FindKey</a><br> 内存检索的小插件</p>`,22)]))}const p=s(t,[["render",h],["__file","Trace.html.vue"]]),d=JSON.parse('{"path":"/Reverse/Android/Trace.html","title":"Trace","lang":"zh-CN","frontmatter":{"description":"Trace 通过frida自带frida-trace去做trace,也有很多可用的脚本，这里记录几个常用的 trace Java : ZenTrace、r0tracer trace so : trace_natives(本质上还是用的frida-trace和ida-api) 附上trace_natives的运行截图 image.pngimage.png...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/articles/Reverse/Android/Trace.html"}],["meta",{"property":"og:site_name","content":"uu2fu3o的知识库"}],["meta",{"property":"og:title","content":"Trace"}],["meta",{"property":"og:description","content":"Trace 通过frida自带frida-trace去做trace,也有很多可用的脚本，这里记录几个常用的 trace Java : ZenTrace、r0tracer trace so : trace_natives(本质上还是用的frida-trace和ida-api) 附上trace_natives的运行截图 image.pngimage.png..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20241118175003.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T18:41:02.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-15T18:41:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Trace\\",\\"image\\":[\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20241118175003.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20241119102703.png\\"],\\"dateModified\\":\\"2025-01-15T18:41:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"uu2fu3o\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Instruction tracing","slug":"instruction-tracing","link":"#instruction-tracing","children":[]},{"level":2,"title":"Function tracing","slug":"function-tracing","link":"#function-tracing","children":[]},{"level":2,"title":"Findkey","slug":"findkey","link":"#findkey","children":[]}],"git":{"createdTime":1736966462000,"updatedTime":1736966462000,"contributors":[{"name":"uu2fu3o","username":"uu2fu3o","email":"1027578439@qq.com","commits":1,"url":"https://github.com/uu2fu3o"}]},"readingTime":{"minutes":2.2,"words":661},"filePathRelative":"Reverse/Android/Trace.md","localizedDate":"2025年1月16日","excerpt":"\\n<p>通过frida自带frida-trace去做trace,也有很多可用的脚本，这里记录几个常用的<br>\\ntrace Java :&nbsp;<a href=\\"https://github.com/hluwa/ZenTracer\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ZenTrace</a>、<a href=\\"https://github.com/r0ysue/r0tracer\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">r0tracer</a><br>\\ntrace so : <a href=\\"https://github.com/Pr0214/trace_natives\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">trace_natives</a>(本质上还是用的frida-trace和ida-api)<br>\\n附上trace_natives的运行截图</p>","autoDesc":true}');export{p as comp,d as data};
