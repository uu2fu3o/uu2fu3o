import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as s}from"./app-DS0ZCcmM.js";const t={};function l(p,i){return s(),a("div",null,i[0]||(i[0]=[n(`<h1 id="域权限" tabindex="-1"><a class="header-anchor" href="#域权限"><span>域权限</span></a></h1><h2 id="windows访问控制模型" tabindex="-1"><a class="header-anchor" href="#windows访问控制模型"><span>Windows访问控制模型</span></a></h2><p><strong>访问控制工作流程</strong></p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image123123.png" alt="image123123" tabindex="0" loading="lazy"><figcaption>image123123</figcaption></figure><h3 id="访问控制模型的组成" tabindex="-1"><a class="header-anchor" href="#访问控制模型的组成"><span>访问控制模型的组成</span></a></h3><p>Windows中的访问控制模型（Access Control Model），它是Windows安全性的基础构件。访问控制模型有两个主要的组成部分，访问令牌（Access Token）和安全描述符（Security Descriptor），它们分别是访问者和被访问者拥有的东西。通过访问令牌和安全描述符的内容，Windows可以确定持有令牌的访问者能否访问持有安全描述符的对象。</p><p>windows 访问控制模型是由两部分组成。</p><ul><li>访问令牌（Access Token）</li></ul><p>包含用户的标识(User SID,Group SID<strong>S</strong>)，以及特权列表。</p><ul><li>安全描述符（security identifiers）。</li></ul><p>被访问的安全对象的相关安全信息。</p><p>这里的安全对象包括但不限于</p><ul><li>NTFS卷上的文件和目录</li><li>注册表项</li><li>网络共享</li><li>服务</li><li>Active Directory对象</li><li>进程等等</li></ul><p>安全描述符标识指出对象的所有者，并且还可以包含以下访问控制列表：</p><ol><li>discretionary access control list（DACL）: 用于标识哪些用户和组对目标对象有访问权限</li><li>system access control list（SACL）: 用于记录对安全对象访问的日志</li></ol><p>ACL包含访问控制项（access control entries）（ACEs）的列表。每个ACE指定一组访问权限，并包含一个SID，用于标识其权限被允许、拒绝或审核的受托者。受托者可以是用户帐户、组帐户或登录会话。</p><h3 id="acl-访问控制列表" tabindex="-1"><a class="header-anchor" href="#acl-访问控制列表"><span>ACL(访问控制列表)</span></a></h3><p>之前提到过安全描述为在被访问者手中，当访问者访问对应服务时，服务会检查访问者的Access Token,判断对应的sid和组sids与自己的ACL进行对比，决定是否允许访问。</p><h4 id="acl的作用" tabindex="-1"><a class="header-anchor" href="#acl的作用"><span>ACL的作用</span></a></h4><p>ACL主要有两个作用</p><ul><li><p>权限访问控制</p><p>这点决定一个用能否访问安全对象</p></li><li><p>日志记录功能</p><p>记录访问成功与否</p></li></ul><p>根据作用的不同，可以将ACL划分为DACL和SACL</p><h4 id="acl的分类" tabindex="-1"><a class="header-anchor" href="#acl的分类"><span>ACL的分类</span></a></h4><p>访问控制列表（ACL）是访问控制条目（ACE）的列表。 ACL中的每个ACE都标识一个对象（通常称这个对象为受托者，受托者可以是一个用户、用户组或者是一个登陆会话），并指定允许、拒绝或审核该受托者的访问权限。可保护对象的安全描述符可以包含两种类型的ACL：DACL和SACL。</p><p>DACL：自主访问控制列表(DACL)是安全描述符中最重要的，它里面包含零个或多个访问控制项（ACE，Access Control Entry），每个访问控制项的内容描述了允许或拒绝特定账户对这个对象执行特定操作。</p><p>SACL：系统访问控制列表（SACL） 主要是用于系统审计的，它的内容指定了当特定账户对这个对象执行特定操作时，记录到系统日志中。</p><h5 id="dacl" tabindex="-1"><a class="header-anchor" href="#dacl"><span>DACL</span></a></h5><p>DACL标识是否允许或拒绝访问安全对象。当进程尝试访问安全对象时，系统将检查该对象的DACL中的ACE，以确定是否授予对该对象的访问权限。</p><ol><li>如果对象没有DACL，则系统将授予所有人完全访问权限。</li><li>如果对象的DACL没有ACE，则系统将拒绝所有尝试访问该对象的尝试，因为DACL不允许任何访问权限。</li><li>系统依次检查ACE，直到找到一个或多个允许所有请求的访问权限的ACE，或者直到拒绝任何请求的访问权限为止。</li></ol><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231124142311285.png" alt="image-20231124142311285" tabindex="0" loading="lazy"><figcaption>image-20231124142311285</figcaption></figure><p>以下是DACL对用户访问的判断</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/124123.jpg" alt="124123" tabindex="0" loading="lazy"><figcaption>124123</figcaption></figure><p>SRM对acl的解析是</p><ol><li>明确定义的DENYACE。</li><li>明确定义的ALLOWACE</li><li>继承的DENYACE。</li><li>继承的ALLOWACE。</li></ol><p>排序代表了解析顺序，对于ACE的匹配，明确的DENY是解析在明确的ALLOW之前匹配的</p><p>对于线程A，系统将读取第一条ACE并立即拒绝访问，因为拒绝访问的ACE适用于线程访问令牌中的用户。在这种情况下，系统将不检查之后的ACE。对于线程B，第一条ACE不适用，因此系统进入允许写入访问的ACE 2和允许读取和执行访问的ACE 3。</p><h5 id="sacl" tabindex="-1"><a class="header-anchor" href="#sacl"><span>SACL</span></a></h5><p>SACL的作用是记录访问成功与否，SACL也是由一条一条的ACE构成，每条ACE的内容是某个用户访问成功/失败 某个权限。当访问跟满足这条ACE的时候就会被记录下来。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231124144242686.png" alt="image-20231124144242686" tabindex="0" loading="lazy"><figcaption>image-20231124144242686</figcaption></figure><h3 id="ace-访问控制项" tabindex="-1"><a class="header-anchor" href="#ace-访问控制项"><span>ACE(访问控制项)</span></a></h3><p>访问控制条目（ACE）是访问控制列表（ACL）中的元素。一个ACL可以包含零个或多个ACE。每个ACE控制或监视指定受托者（Trustees）对对象的访问。</p><p>ACE有六种类型，所有安全对象都支持其中三种。其他三种类型是目录服务对象支持的特定于对象的ACE.</p><p>所有类型的ACE都包含以下访问控制信息：</p><ul><li>安全标识符（SID），用于标识ACE适用于的受托者</li><li>一个访问掩码（Access Mask），该掩码指定了具体的访问权限（Access Rights），也就是可以对该对象执行的操作（此掩码非常重要，后续很多漏洞会用到）</li><li>一个位标记，指示ACE类型的标志。</li><li>一组位标志，指示了安全描述符所属对象的子对象是否继承这个ACE。</li></ul><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Access-denied ACE</td><td>在自由访问控制列表（DACL）中使用，以拒绝对受托者的访问</td></tr><tr><td>Access-allowed ACE</td><td>在DACL中使用，以允许对受托者的访问权限。</td></tr><tr><td>System-audit ACE</td><td>当受托者尝试行使指定的访问权限时，用于系统访问控制列表（SACL）中以生成审核记录。</td></tr></tbody></table><h4 id="ace权限" tabindex="-1"><a class="header-anchor" href="#ace权限"><span>ACE权限</span></a></h4><p>大致可以划分为3类</p><ul><li><p>通用权限</p><p>就是对这个条目的通用权限，通用读，通用写等。</p><p>WriteDacl</p><p>AllExtendedRights</p><p>WriteOwner</p><p>GenericWrite</p><p>GenericAll</p><p>Full Control</p></li><li><p>对某个属性的权限</p><p>一个条目包含若干个属性，通用属性是对整个条目的权限。域内的ACL同时也支持某个属性的权限。</p></li><li><p>扩展权限</p><p><strong>User-Force-Change-Password(0299570-246d-11d0-a768-00aa006e0529)</strong></p><p>可以在不知道当前目标用户的密码的情况下更改目标用户的密码</p><p>**DS-Replication-Get-Changes(1131f6aa-9c07-11d1-f79f-00c04fc2dcd2) **和 <strong>DS-Replication-Get-Changes-All(1131f6ad-9c07-11d1-f79f-00c04fc2dcd2)</strong></p><p>对域对象具有这两个扩展权限的用户具备dcsync 权限</p></li></ul><h4 id="ace继承" tabindex="-1"><a class="header-anchor" href="#ace继承"><span>ACE继承</span></a></h4><p>对象的ACL可以包含从其父容器继承的ACE。例如，注册表子项可以从注册表层次结构中位于其上方的项继承ACE。同样，NTFS文件系统中的文件可以从包含该文件的目录继承ACE。</p><p>ACE的<code>ACE_HEADER</code>结构包含一组继承标志，这些继承标志控制ACE继承以及ACE对它所连接的对象的影响。系统根据ACE继承规则解释继承标志和其他继承信息。</p><p>这些规则通过以下功能得到增强：</p><ul><li>支持自动传播可继承的ACE。</li><li>一个标志，用于区分继承的ACE和直接应用于对象的ACE。</li><li>特定于对象的ACE，允许指定可以继承ACE的子对象的类型。</li><li>通过将除<code>SYSTEM_RESOURCE_ATTRIBUTE_ACE</code>和<code>SYSTEM_SCOPED_POLICY_ID_ACE</code>之外的安全描述符的控制位中的<code>SE_DACL_PROTECTED</code>或<code>SE_SACL_PROTECTED</code>位设置来防止DACL或SACL继承ACE的能力。</li></ul><p>简单来说，你允许它继承，那就可以继承</p><h2 id="sddl-安全描述符定义语言" tabindex="-1"><a class="header-anchor" href="#sddl-安全描述符定义语言"><span>SDDL(安全描述符定义语言)</span></a></h2><ul><li><p>存储位置 nTSecurityDescriptor</p></li><li><p>存储格式 SDDL(Security Descriptor Definition Language)</p></li></ul><p>安全描述符定义语言（SDDL）定义了<code>ConvertSecurityDescriptorToStringSecurityDescriptor</code>和<code>ConvertStringSecurityDescriptorToSecurityDescriptor</code>函数用来将安全描述符描述为文本字符串的字符串格式。该语言还定义了字符串元素，用于描述安全描述符的组成部分中的信息。</p><p><strong>使用ADfind查询</strong></p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231126161311763.png" alt="image-20231126161311763" tabindex="0" loading="lazy"><figcaption>image-20231126161311763</figcaption></figure><p>下面一大堆难以理解的字符就是SDDL，通过ADdind指定以sddl的格式进行输出</p><p>或者使用accessChk,支持自动解析SDDL</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231126161909526.png" alt="image-20231126161909526" tabindex="0" loading="lazy"><figcaption>image-20231126161909526</figcaption></figure><p>但该工具并不支持使用AD语法进行查询，因此还是需要知道SDDL是怎么构成的</p><p>格式是一个以空值（<strong>null</strong>）结尾的字符串，带有令牌（tiken），用于指示安全描述符的四个主要组成部分：所有者（O 😃，主要组（G 😃，DACL（D :)和SACL（S 😃。</p><p>抽一条出来看看</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>O:DAG:DUD:AI(OA;;SW;72e39547-7b18-11d1-adef-00c04fd8d5cd;;S-1-5-21-754643614-3937478331-2139222398-1114)</span></span>
<span class="line"><span>O:owner_sid</span></span>
<span class="line"><span>G:group_sid</span></span>
<span class="line"><span>D:dacl_flags(string_ace1)(string_ace2)... (string_acen)</span></span>
<span class="line"><span>S:sacl_flags(string_ace1)(string_ace2)... (string_acen)</span></span>
<span class="line"><span>-------------------------------------------------------------------------------------------------------</span></span>
<span class="line"><span>O:DA  ——&gt; ower</span></span>
<span class="line"><span></span></span>
<span class="line"><span>G:DU  --&gt;Primary Group </span></span>
<span class="line"><span></span></span>
<span class="line"><span>D:AI(OA;;SW;72e39547-7b18-11d1-adef-00c04fd8d5cd;;S-1-5-21-754643614-3937478331-2139222398-1114)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了O和G以外，D和S就是一条条ACE，每个括号代表了一条ACE</p><p>现在把ACE拆开进行分析</p><p>每条ACE由6个字段组成，每个字段由分隔进行分割</p><ul><li><strong>ACE type</strong> (allow/deny/audit)<br> ACE 类型（允许/拒绝/审核）</li><li><strong>ACE flags</strong> (inheritance and audit settings)<br> ACE 标志（继承和审核设置）</li><li><strong>Permissions</strong> (list of incremental permissions)<br> 权限（增量权限列表）</li><li><strong>ObjectType</strong> (GUID) 对象类型 （GUID）</li><li><strong>Inherited Object Type</strong> (GUID)<br> 继承的对象类型 （GUID）</li><li><strong>Trustee</strong> (SID) 受托人 （SID）</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>OA:OBJECT ACCESS ALLOWED: ONLY APPLIES TO A SUBSET OF THE OBJECT(S).允许对象访问：仅适用于对象的子集。--&gt;ACE类型</span></span>
<span class="line"><span>;</span></span>
<span class="line"><span>ACE标志;</span></span>
<span class="line"><span>SW:All Validated Writes 所有已验证的写入 --&gt;这是权限位</span></span>
<span class="line"><span>;</span></span>
<span class="line"><span>72e39547-7b18-11d1-adef-00c04fd8d5cd; --&gt;对象类型(GUID)</span></span>
<span class="line"><span>Inherited Object Type(GUID);--&gt;继承的对象类型</span></span>
<span class="line"><span>S-1-5-21-754643614-3937478331-2139222398-1114;--&gt;受托人SID</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即谁对你有权限--&gt;SID</p><p>允许or拒绝 --&gt;ACE类型</p><p>有什么权限--&gt;权限位</p><p>权限能不能被继承 --&gt;权限位，为空则代表不被继承</p><p><a href="https://clan8blog.wordpress.com/2016/08/08/sddl-explained/" target="_blank" rel="noopener noreferrer">ACE每个字段代表什么</a></p><p>权限同样分为通用，扩展和某个属性的权限，上述为扩展权限，体现在多了个GUID，对应什么权限可以查表</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231126205620556.png" alt="image-20231126205620556" tabindex="0" loading="lazy"><figcaption>image-20231126205620556</figcaption></figure><h2 id="利用adfind过滤acl" tabindex="-1"><a class="header-anchor" href="#利用adfind过滤acl"><span>利用adfind过滤ACL</span></a></h2><p>adfind提供了参数-sddlfilter来过滤sddl,其语法如下</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-sddlfilter ;;;;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>后面跟的参数对应的是ace条目相应的参数，值得注意的是，过滤的格式跟输出的格式要保持一致。</p><p>-rawsddl 和-sddl+++决定了是使用sid形式还是账号形式对最后一位进行解析</p><p>-rawsddl就需要sddl格式进行解析，-sddl+++会解析参数</p><ul><li><p>查询某个对象在域内的ACL权限</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231126211248218.png" alt="image-20231126211248218" tabindex="0" loading="lazy"><figcaption>image-20231126211248218</figcaption></figure></li><li><p>查找更改一个对象的MSDS-AllowedToActOnBehalfOfOtherIdentity的权限</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>adfind -b dc=hack,dc=com -s subtree nTSecurityDescriptor -sddl+++ -sddlfilter ;;;msDS-AllowedToActOnBehalfOfOtherIdentit;; -recmute</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231126211826028.png" alt="image-20231126211826028" tabindex="0" loading="lazy"><figcaption>image-20231126211826028</figcaption></figure></li><li><p>查询域内具备dcsync权限的用户</p><p>dcsync只需要两个权限就可以</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&#39;DS-Replication-Get-Changes&#39;     = 1131f6aa-9c07-11d1-f79f-00c04fc2dcd2</span></span>
<span class="line"><span>&#39;DS-Replication-Get-Changes-All&#39; = 1131f6ad-9c07-11d1-f79f-00c04fc2dcd2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231126212348591.png" alt="image-20231126212348591" tabindex="0" loading="lazy"><figcaption>image-20231126212348591</figcaption></figure></li></ul><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h2><p><a href="https://rootclay.gitbook.io/windows-access-control/4.-ad-zhong-de-acl" target="_blank" rel="noopener noreferrer">Windows Access Control</a></p><p><a href="https://daiker.gitbook.io/windows-protocol/ldap-pian/11" target="_blank" rel="noopener noreferrer">Windows Protocol</a></p>`,88)]))}const d=e(t,[["render",l],["__file","域权限.html.vue"]]),o=JSON.parse('{"path":"/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/LDAP%E4%B8%93%E9%A2%98/%E5%9F%9F%E6%9D%83%E9%99%90.html","title":"域权限","lang":"zh-CN","frontmatter":{"description":"域权限 Windows访问控制模型 访问控制工作流程 image123123image123123 访问控制模型的组成 Windows中的访问控制模型（Access Control Model），它是Windows安全性的基础构件。访问控制模型有两个主要的组成部分，访问令牌（Access Token）和安全描述符（Security Descriptor...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/articles/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/LDAP%E4%B8%93%E9%A2%98/%E5%9F%9F%E6%9D%83%E9%99%90.html"}],["meta",{"property":"og:site_name","content":"uu2fu3o的知识库"}],["meta",{"property":"og:title","content":"域权限"}],["meta",{"property":"og:description","content":"域权限 Windows访问控制模型 访问控制工作流程 image123123image123123 访问控制模型的组成 Windows中的访问控制模型（Access Control Model），它是Windows安全性的基础构件。访问控制模型有两个主要的组成部分，访问令牌（Access Token）和安全描述符（Security Descriptor..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image123123.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T18:41:02.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-15T18:41:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"域权限\\",\\"image\\":[\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image123123.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231124142311285.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/124123.jpg\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231124144242686.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231126161311763.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231126161909526.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231126205620556.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231126211248218.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231126211826028.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231126212348591.png\\"],\\"dateModified\\":\\"2025-01-15T18:41:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"uu2fu3o\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Windows访问控制模型","slug":"windows访问控制模型","link":"#windows访问控制模型","children":[{"level":3,"title":"访问控制模型的组成","slug":"访问控制模型的组成","link":"#访问控制模型的组成","children":[]},{"level":3,"title":"ACL(访问控制列表)","slug":"acl-访问控制列表","link":"#acl-访问控制列表","children":[]},{"level":3,"title":"ACE(访问控制项)","slug":"ace-访问控制项","link":"#ace-访问控制项","children":[]}]},{"level":2,"title":"SDDL(安全描述符定义语言)","slug":"sddl-安全描述符定义语言","link":"#sddl-安全描述符定义语言","children":[]},{"level":2,"title":"利用adfind过滤ACL","slug":"利用adfind过滤acl","link":"#利用adfind过滤acl","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1736966462000,"updatedTime":1736966462000,"contributors":[{"name":"uu2fu3o","username":"uu2fu3o","email":"1027578439@qq.com","commits":1,"url":"https://github.com/uu2fu3o"}]},"readingTime":{"minutes":9.25,"words":2776},"filePathRelative":"渗透测试/LDAP专题/域权限.md","localizedDate":"2025年1月16日","excerpt":"\\n<h2>Windows访问控制模型</h2>\\n<p><strong>访问控制工作流程</strong></p>\\n<figure><img src=\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image123123.png\\" alt=\\"image123123\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image123123</figcaption></figure>\\n<h3>访问控制模型的组成</h3>\\n<p>Windows中的访问控制模型（Access Control Model），它是Windows安全性的基础构件。访问控制模型有两个主要的组成部分，访问令牌（Access Token）和安全描述符（Security Descriptor），它们分别是访问者和被访问者拥有的东西。通过访问令牌和安全描述符的内容，Windows可以确定持有令牌的访问者能否访问持有安全描述符的对象。</p>","autoDesc":true}');export{d as comp,o as data};
