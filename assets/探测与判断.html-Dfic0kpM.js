import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a,o as e}from"./app-DS0ZCcmM.js";const n={};function l(r,s){return e(),t("div",null,s[0]||(s[0]=[a(`<h1 id="探测与判断" tabindex="-1"><a class="header-anchor" href="#探测与判断"><span>探测与判断</span></a></h1><p>[[Bypass]]</p><blockquote><p>关于Fastjson的一些判断和探测，以及一些特性也会记录在这里</p></blockquote><p><a href="https://github.com/lemono0/FastJsonParty/blob/main/Fastjson%E5%85%A8%E7%89%88%E6%9C%AC%E6%A3%80%E6%B5%8B%E5%8F%8A%E5%88%A9%E7%94%A8-Poc.md" target="_blank" rel="noopener noreferrer">Fastjson探测poc</a><br><a href="https://github.com/su18/hack-fastjson-1.2.80" target="_blank" rel="noopener noreferrer">su18</a><br><a href="https://github.com/safe6Sec/Fastjson" target="_blank" rel="noopener noreferrer">Safe6Sec</a><br><a href="https://xz.aliyun.com/t/13409?time__1311=Gqmxu7i%3Dq7qxlxGgx%2BxCqhOYD8be3Ihm3x" target="_blank" rel="noopener noreferrer">xz</a><br> 主要思路是利用响应状态，报错信息，DNSLOG探测,精度丢失来判断是否使用Fastjson or jackson等</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//Dnslog</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;@type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;java.net.InetSocketAddress&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;address&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:,</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;val&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dnslog&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;@type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;java.net.Inet4Address&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;val&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dnslog&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;@type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;java.net.Inet6Address&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;val&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dnslog&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">{</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;@type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;java.net.URL&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;val&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://dnslog&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;x&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>版本号</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;@type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;java.lang.AutoCloseable&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //注意：在FastJson版本大概1.2.76后，即便是通过这种方式探测出精准的FastJson版本，也是1.2.76，即便是使用的1.2.80的依赖，因为在源码中并没有改变</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于没有报错信息的fastjson,可以采用与ssrf同理的检测，开放端口不延时，不开放端口延时<br> 正则ddos判断法<br> 上面引用的文章总结的很好，翻一翻</p><h3 id="一些用到的特性" tabindex="-1"><a class="header-anchor" href="#一些用到的特性"><span>一些用到的特性</span></a></h3><ol><li>fastjson 优先将 json 中的参数交给构造方法去调用，这扩展了 fastjson 反序列化的漏洞面，不局限于 getter/setter 方法，也可以使用构造方法的参数传递变量，进行类的初始化；</li><li>对 getter 方法的定义宽泛，无需有相关成员变量，只要命名为 “getXXX” 类型的方法，fastjson 就会认为其为 getter 方法进行调用，这就不局在限于成员变量中的 getter 方法，只要叫 getXXX 的方法都可以成为触发漏洞的方法；</li><li>反序列化一个 Map（JSONObject 也是 Map 的实现） 对象时，会使用 MapSerializer 的 writer 方法执行获取 value 对象的各项属性的操作，会反射调用 value 对象中的 getter 方法；</li><li>如果反序列化的指定类是 <code>java.util.Currency</code> ，使用 MiscCodec 的 deserialze 方法，获取 currencyCode 或者 currency 的值，并调用其 toString 方法，如果这个值的类是 JSONObject 方法，将会调用 JSONObject 的 toString，也就是 JSON.toJSONString，触发 getter/setter 方法的调用；</li><li>指定类型反序列化时，不论参数是否对应，fastjson 都会去创建对象，并处理相关内容，因此使用外层嵌套可以绕过指定期待类进行反序列化；</li><li>使用 AutoCloseable 子类绕过 AutoType 检测，尝试读写文件。<br> [[articles/Java学习/Fastjson/简单使用]]</li></ol><h3 id="高版本fastjson利用" tabindex="-1"><a class="header-anchor" href="#高版本fastjson利用"><span>高版本Fastjson利用</span></a></h3><p>黑名单<br> [[Fastjson与原生反序列化]]的利用</p>`,12)]))}const p=i(n,[["render",l],["__file","探测与判断.html.vue"]]),k=JSON.parse('{"path":"/Java%E5%AD%A6%E4%B9%A0/Fastjson/%E6%8E%A2%E6%B5%8B%E4%B8%8E%E5%88%A4%E6%96%AD.html","title":"探测与判断","lang":"zh-CN","frontmatter":{"description":"探测与判断 [[Bypass]] 关于Fastjson的一些判断和探测，以及一些特性也会记录在这里 Fastjson探测poc su18 Safe6Sec xz 主要思路是利用响应状态，报错信息，DNSLOG探测,精度丢失来判断是否使用Fastjson or jackson等 版本号 对于没有报错信息的fastjson,可以采用与ssrf同理的检测，开...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/articles/Java%E5%AD%A6%E4%B9%A0/Fastjson/%E6%8E%A2%E6%B5%8B%E4%B8%8E%E5%88%A4%E6%96%AD.html"}],["meta",{"property":"og:site_name","content":"uu2fu3o的知识库"}],["meta",{"property":"og:title","content":"探测与判断"}],["meta",{"property":"og:description","content":"探测与判断 [[Bypass]] 关于Fastjson的一些判断和探测，以及一些特性也会记录在这里 Fastjson探测poc su18 Safe6Sec xz 主要思路是利用响应状态，报错信息，DNSLOG探测,精度丢失来判断是否使用Fastjson or jackson等 版本号 对于没有报错信息的fastjson,可以采用与ssrf同理的检测，开..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T18:41:02.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-15T18:41:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"探测与判断\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-15T18:41:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"uu2fu3o\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"一些用到的特性","slug":"一些用到的特性","link":"#一些用到的特性","children":[]},{"level":3,"title":"高版本Fastjson利用","slug":"高版本fastjson利用","link":"#高版本fastjson利用","children":[]}],"git":{"createdTime":1736966462000,"updatedTime":1736966462000,"contributors":[{"name":"uu2fu3o","username":"uu2fu3o","email":"1027578439@qq.com","commits":1,"url":"https://github.com/uu2fu3o"}]},"readingTime":{"minutes":2.04,"words":613},"filePathRelative":"Java学习/Fastjson/探测与判断.md","localizedDate":"2025年1月16日","excerpt":"\\n<p>[[Bypass]]</p>\\n<blockquote>\\n<p>关于Fastjson的一些判断和探测，以及一些特性也会记录在这里</p>\\n</blockquote>\\n<p><a href=\\"https://github.com/lemono0/FastJsonParty/blob/main/Fastjson%E5%85%A8%E7%89%88%E6%9C%AC%E6%A3%80%E6%B5%8B%E5%8F%8A%E5%88%A9%E7%94%A8-Poc.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Fastjson探测poc</a><br>\\n<a href=\\"https://github.com/su18/hack-fastjson-1.2.80\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">su18</a><br>\\n<a href=\\"https://github.com/safe6Sec/Fastjson\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Safe6Sec</a><br>\\n<a href=\\"https://xz.aliyun.com/t/13409?time__1311=Gqmxu7i%3Dq7qxlxGgx%2BxCqhOYD8be3Ihm3x\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">xz</a><br>\\n主要思路是利用响应状态，报错信息，DNSLOG探测,精度丢失来判断是否使用Fastjson or jackson等</p>","autoDesc":true}');export{p as comp,k as data};
