import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as p}from"./app-DS0ZCcmM.js";const o={};function n(r,t){return p(),e("div",null,t[0]||(t[0]=[a('<h1 id="active-directory简介" tabindex="-1"><a class="header-anchor" href="#active-directory简介"><span>Active-Directory简介</span></a></h1><p>这个专题主要是对域中ldap这个协议和AD域稍微再深入一些，依旧是基于windows protocl,最好还是翻阅翻阅官方文档</p><h2 id="ldap简介" tabindex="-1"><a class="header-anchor" href="#ldap简介"><span>LDAP简介</span></a></h2><p>轻量级目录访问协议 （LDAP） 是一种用于处理各种目录服务的应用程序协议。目录服务（如 Active Directory）存储用户和帐户信息，以及密码等安全信息。然后，该服务允许与网络上的其他设备共享信息。电子邮件、客户关系经理 （CRM） 和人力资源 （HR） 软件等企业应用程序可以使用 LDAP 来验证、访问和查找信息。 -----来自microsoft</p><p><strong>目录服务</strong></p><p>目录数据库由目录服务数据库和一套访问协议组成</p><p>目录服务数据库也是一种数据库，对比于常见的关系型数据库(Mysql登)有以下几个特点</p><ul><li>呈树状结构，类似于文件目录</li><li>为了查询，浏览和搜索而优化的数据库，读性能强，写性能差，不支持事务处理，会滚等复杂操作</li></ul><p>目录结构如下树 ------图来源于windows protocol</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/2021meiya/1.png" alt="1" tabindex="0" loading="lazy"><figcaption>1</figcaption></figure><p>为了能够访问目录数据库，必须设计一台能够访问目录服务数据库的协议，LDAP是其中一种实现协议。</p><p>LDAP之所以被称为轻量目录访问协议，事实上在LDAP使用的是另一种协议 X.500 DAP 协议规范，该协议十分复杂，是一个重量级协议，简化后就得到了LDAP协议，即便是简化后的版本，LDAP依然复杂。</p><blockquote><p>介绍一些基本概念</p><p>1.目录树：在一个目录服务系统种，整个目录信息集可以表示为一个目录信息树，树中的每一个节点就是一个条目</p><p>2.条目： 每个条目就是一条记录，每个条目有自己唯一可区别名称（DN）。比如图中的每个圆圈都是一条记录。</p><p>3.DN&amp;RDN： 比如第一个叶子条目,他的唯一可区别名称(DN)为: &quot;uid=bob,ou=people,dc=acme,dc=org&quot;,与文件目录的绝对路径非常相似，同样的他的RDN=“uid=bob”</p><p>4.属性： 描述条目具体信息。比如&quot;uid=bill,ou=people,dc=acme,dc=org&quot;，他的属性name=bill,属性age=111,school为xx</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldap/shuxing.png" alt="shuxing" tabindex="0" loading="lazy"><figcaption>shuxing</figcaption></figure></blockquote><h2 id="active-directory简介-1" tabindex="-1"><a class="header-anchor" href="#active-directory简介-1"><span>Active Directory简介</span></a></h2><p>不同的厂商对AD有不同的实现方式，主要是了解Windows下的AD</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldap/adways.png" alt="adways" tabindex="0" loading="lazy"><figcaption>adways</figcaption></figure><p>Active Directory存储着整个域内所有的计算机，用户等的所有信息。</p><ul><li><p>访问Active Directory</p><p>1.域内的每一台域控都有一份完整的本域AD,通过连接域控的389/636端口(636为LDAPS)来进行连接查看修改</p><p>2.如果用户知道某个对象处于哪个域，也知道对象的标识名，那么通过上面第一种方式搜索对象就非常容易。但是考虑到这种情况，不知道对象所处的域，我们不得不去域林中的每个域搜索。为了解决这个问题，微软提出全局编录服务器(GC，Global Catalog)， 全局编录服务器中除了保存本域中所有对象的所有属性外，还保存林中其它域所有对象的部分属性，这样就允许用户通过全局编录信息搜索林中所有域中对象的信息。也就是说如果需要在整个林中进行搜索，而不单单是在具体的某个域进行搜索的时候，可以连接域控的3268/3269端口。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/GC.png" alt="GC" tabindex="0" loading="lazy"><figcaption>GC</figcaption></figure></li></ul><h2 id="naming-context和application-partitions" tabindex="-1"><a class="header-anchor" href="#naming-context和application-partitions"><span>Naming Context和Application Partitions</span></a></h2><h3 id="naming-context" tabindex="-1"><a class="header-anchor" href="#naming-context"><span>Naming Context</span></a></h3><p>Active Directory具有分布式特性，一个域林中有若干个域，每个域内有若干域控，每个域控必须一个独立的Active Directory.对此，有必要将数据隔离到多个分区中，如果不隔离，则每个域控都必须复制域林里面的所有数据。分区之后就可能够选择性的复制。</p><p>这个分区我们称为Naming Context(简称NC),每个NC都有自己的安全边界。</p><p>Active Directory预定义了三个NC</p><blockquote><p>Configuration NC(Configuration NC)</p><p>Schema NC(Schema NC)</p><p>Domain NC(DomainName NC)</p></blockquote><p>使用ADExplorer连接就能看到</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD1.png" alt="AD1" tabindex="0" loading="lazy"><figcaption>AD1</figcaption></figure><p>后面两个是引用程序分区。</p><p>接下里分别介绍这三个分区Naming Context</p><ul><li><p>Configuration NC(Configuration NC)</p><p>根据微软官方的说法配置分区包含复制拓扑和其他配置数据，这些数据必须在整个林中复制。林中的每个域控制器都具有同一配置分区的副本。</p><p>意思是讲这个分区是林配置信息的主要储存库。包含了有关站点，服务，分区和ADSchema的信息，并且每个域控上都有相同的一份配置NC。</p><p>配置NC的根位于配置容器中，该容器是林根域的子容器。例如，<code>test.local</code>林将为<code>CN=Configuration,DC=test,DC=local</code></p><p>看下这个NC的顶级容器</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldap/AD2.png" alt="AD2" tabindex="0" loading="lazy"><figcaption>AD2</figcaption></figure><table><thead><tr><th>RDN</th><th>说明</th></tr></thead><tbody><tr><td>CN=DisplaySpecifiers</td><td>定义了Active Directory管理单元的各种显示格式</td></tr><tr><td>CN=Extended-Rights</td><td>扩展权限对象的容器，我们将在域内ACL那篇文章里面详解</td></tr><tr><td>CN=ForestUpdates</td><td>包含用于表示森林状态和与域功能级别更改的对象</td></tr><tr><td>CN=Partitions</td><td>包含每个Naming Context，Application Partitions以及外部LDAP目录引用的对象</td></tr><tr><td>CN=Physical Locations</td><td>包含位置对象，可以将其与其他对象关联 以表示该对象的位置。</td></tr><tr><td>CN=Services</td><td>存储有关服务的配置信息，比如文件复制服务</td></tr><tr><td>CN=Sites</td><td>包含所有站点拓扑和复制对象</td></tr><tr><td>CN=WellKnown Security Principals</td><td>包含常用的外部安全性主题的对象，比如Anonymous，Authenticated Users，Everyone等等</td></tr></tbody></table></li><li><p>Schema NC(Schema NC)</p><p>架构分区包含 classSchema 和 attributeSchema 对象，这些对象定义林中可以存在的对象类型。林中的每个域控制器都具有同一架构分区的副本。</p></li><li><p>Domain NC(DomainName NC)</p><p>域分区包含与本地域关联的目录对象，例如用户和计算机。一个域可以有多个域控制器，一个林可以有多个域。每个域控制器存储其本地域的域分区的完整副本，但不存储其他域的域分区的副本。</p><p>域NC的根由域的专有名称(DN)表示，<a href="http://xn--DC-d29cv80e.hack.com" target="_blank" rel="noopener noreferrer">比如DC.hack.com</a> 就表示为 dc=DC,dc=hack,dc=com.域内的所有计算机，所有用户的具体信息都储存在AD下，也就是储存在AD的域NC里面。我们查看时也是选用这个NC。</p><p>来看下域NC的顶级容器</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldap/AD3.png" alt="AD3" tabindex="0" loading="lazy"><figcaption>AD3</figcaption></figure><table><thead><tr><th>RDN</th><th>说明</th></tr></thead><tbody><tr><td>CN=Builtin</td><td>内置本地安全组的容器，包括管理员，域用户和账号操作员等等</td></tr><tr><td>CN=Computers</td><td>机器用户的容器，包括加入域的所有机器</td></tr><tr><td>OU=Domain Controllers</td><td>域控制器的容器，包括域内所有域控</td></tr><tr><td>CN=ForeignSecurityPrincipals</td><td>代表域中来自森林外部域的组中的成员</td></tr><tr><td>CN=Keys</td><td>Server 2016之后才有，关键凭证对象的默认容器</td></tr><tr><td>CN=Managed Service Accounts</td><td>托管服务帐户的容器。</td></tr><tr><td>CN=System</td><td>各种预配置对象的容器。包括信任对象，DNS对象和组策略对象</td></tr><tr><td>CN=TPM Devices</td><td>可信平台模块(TPM)密钥的恢复信息的容器。</td></tr><tr><td>CN=Users</td><td>用户和组对象的默认容器</td></tr></tbody></table></li></ul><h3 id="application-partitions" tabindex="-1"><a class="header-anchor" href="#application-partitions"><span>Application Partitions</span></a></h3><p>win server开始，微软允许用户自定义分区来扩展Naming Context的概念。Application Partitions就是NC的一个扩展。本质上仍然属于NC。使用该功能，管理员可以自己创建分区(后称为区域)，用来将数据存储在他们选择的特定域控制器上，Application Partitions主要有以下特点：</p><ul><li><p>Naming Context是微软预定义的，用户不可以定义自己的Naming Context。而如果用户想要定义一个分区，可以通过Application Partitions。虽然微软也预置了两个Application Partitions，但是Application Partitions的设计更多是为了让用户可以自定义自己的数据。设计Application Partitions最大的用途就是，让用户自己来定义分区。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldap/AD4.png" alt="AD4" tabindex="0" loading="lazy"><figcaption>AD4</figcaption></figure></li><li><p>Application Partitions可以存储动态对象。动态对象是具有生存时间(TTL) 值的对象，该值确定它们在被Active Directory自动删除之前将存在多长时间。也就说Application Partitions可以给数据设置个TTL，时间一到，Active Directory就删除该数据。</p></li></ul><p>通过ntdsutil创建Application Partitions</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD6.png" alt="AD6" tabindex="0" loading="lazy"><figcaption>AD6</figcaption></figure><p>添加成功。</p><p>或许你会想知道该扩展的实际意义</p><blockquote><p>Application Partitions在Windows域环境中允许将特定应用程序或服务的目录数据分离出来，并将其复制到其他域控制器，从而实现分布式应用程序、提高性能和可用性，并满足特定的业务需求。这种机制提供了更灵活和可定制的方式来管理和复制目录数据。</p></blockquote><h2 id="schema-nc" tabindex="-1"><a class="header-anchor" href="#schema-nc"><span>Schema NC</span></a></h2><p>这条NC内包含了架构信息，定义了AD中的类和属性，所以会先介绍LDAP中的类和继承</p><h3 id="ldap中的类和继承" tabindex="-1"><a class="header-anchor" href="#ldap中的类和继承"><span>LDAP中的类和继承</span></a></h3><ul><li><p>类和实例</p><p>域内每一个条目都是类的实例。类是一组属性的集合</p><p>例如现有域内机器PC &quot;CN=PC,CN=Computer,DC=hack,DC=com&quot;在AD里面是一个条目，里面有众多属性描述条目具体信息</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD7.png" alt="AD7" tabindex="0" loading="lazy"><figcaption>AD7</figcaption></figure><p>或许你会好奇，values中并不止Computer一个值，为什么只说该条目是Computer类的实例化。这些值用于描述对象的多个方面和功能。条目可以同时是多个类的实例，这称为多继承。</p><p>类是可继承的。子类继承父类的所有属性，Top类是所有类的父类。这也就是解释为什么我们看到的values并非只有computer.objectClass保存了类继承关系。<code>user</code>是<code>organizationPerson</code>的子类，<code>organizationPerson</code>是<code>person</code>的子类，<code>person</code>是<code>top</code>的子类。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD8.png" alt="AD8" tabindex="0" loading="lazy"><figcaption>AD8</figcaption></figure><ul><li><p>类的分类</p><p>类分为三种类型</p><ul><li><p>结构类（Structural）</p><p>结构类规定了对象实例的基本属性，每个条目属于且仅属于一个结构型对象类。前面说过域内每个条目都是类的实例，这个类必须是结构类。只有结构类才有实例。例如Computer</p></li><li><p>抽象类(Abstract)</p><p>抽象类型是结构类或其他抽象类的父类，它将对象属性中公共的部分组织在一起。跟面对对象里面的抽象方法一样，他没有实例，只能充当结构类或者抽象类的父类。比如说top 类。注意抽象类只能从另一个抽象类继承</p></li><li><p>辅助类(Auxiliary）</p><p>辅助类型规定了对象实体的扩展属性。虽然每个条目只属于一个结构型对象类，但可以同时属于多个辅助型对象类。注意辅助类不能从结构类继承</p></li></ul></li></ul></li></ul><h3 id="schema-nc中的类" tabindex="-1"><a class="header-anchor" href="#schema-nc中的类"><span>Schema NC中的类</span></a></h3><p>通过ADExplorer来查看Schema NC中的类。</p><p>之前说过域的每一条目都是一个结构类的实例化。而在Schema NC中，每一个条目都是一个类，例如之前说到过的Computer.</p><p>在domain中，条目&quot;CN=PC,CN=Computer,DC=hack,DC=com&quot;是computer的实例化，Computer类在Schema NC中作为条目</p><p>&quot;CN=Computer,CN=Schema,CN=Configuration,DC=hack,DC=com&quot;存在</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD9.png" alt="AD9" tabindex="0" loading="lazy"><figcaption>AD9</figcaption></figure><ul><li><p>每个条目都是一个类的实例，这对Schema NC中的类条目同样适用，Computer类是classSchema。(<code>CN=Class-Schema,CN=Schema,CN=Configuration,DC=test,DC=local</code>)。所有的类条目都是classSchema类的实例</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD10.png" alt="AD10" tabindex="0" loading="lazy"><figcaption>AD10</figcaption></figure></li><li><p>名称是Computer(通过adminDescription，adminDisplayName，cn，name属性)</p></li><li><p>属性defaultSecurityDescriptor表明，当创建Computer类的实例是，如果没有指定ACL，就已该属性的值作为默认ACL。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD11.png" alt="AD11" tabindex="0" loading="lazy"><figcaption>AD11</figcaption></figure><p>注意与属性nTSecurityDescriptor区分，nTSecurityDescriptor是这个条目的ACL，而defaultSecurityDescriptor是实例默认的ACL。</p><p>当我们创建Computer类的实例，Computer类有属性nTSecurityDescriptor和属性defaultSecurityDescriptor。如果我们不指定实例的ACL，那么创建实例的ACL即Computer类的属性defaultSecurityDescriptor的值。</p></li><li><p>属性rDNAttID表明通过LDAP连接到类的实例的时候，使用的两个字母的前缀用过是cn。所以实例CN=PC,CN=Computers,DC=hack,DC=com使用的前缀是CN。来看另外一条类条目OU=Domain Controllers,DC=com,DC=com。使用的前缀是OU，它是类<code>organizationalUnit</code>的实例。来看该类。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD12.png" alt="AD12" tabindex="0" loading="lazy"><figcaption>AD12</figcaption></figure></li></ul><p>​ 该类对应的该属性为ou,因此该类的实例前缀为ou.</p><ul><li><p>属性objectClassCategory定义了类的类型</p><p>为1代表结构类</p><p>2为抽象类</p><p>3为辅助类</p></li><li><p>属性subClassOf表示了该条目的父类</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD13.png" alt="AD13" tabindex="0" loading="lazy"><figcaption>AD13</figcaption></figure><p>例如这里的Computer类的父类为user</p></li><li><p>systemPossSuperior约束了他的实例只能创建在这三个类</p><p>container<code>,</code>organizationalUnit<code>,</code>domainDNS的实例底下。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD14.png" alt="AD14" tabindex="0" loading="lazy"><figcaption>AD14</figcaption></figure><p>例如：Computer类的一个实例&quot;CN=PC,CN=Computers,DC=hack,DC=com&quot;,位于条目“CN=Computers,DC=hack,DC=com”下</p><p>通过查看该条目的objectClass能发现，它是container的实例，而container位于上面提到的属性底下，显然成立。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD15.png" alt="AD15" tabindex="0" loading="lazy"><figcaption>AD15</figcaption></figure></li><li><p>最后一点也是最核心的，我们来讲下他的实例是怎么获取到基本属性的。</p><ul><li><p>这个类没有属性<code>systemMustContain</code>和<code>MustContain</code>，这两个属性定义了强制属性</p></li><li><p>该类包含systemMayContain<code>和</code>MayContain，为可选属性</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD16.png" alt="AD16" tabindex="0" loading="lazy"><figcaption>AD16</figcaption></figure><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD17.png" alt="AD17" tabindex="0" loading="lazy"><figcaption>AD17</figcaption></figure><p>上面四个属性里面的属性集合是这个类独有的属性集合，由于类是可继承的。因此，一个类的属性集合里面出了前面四个属性的值，还有可能来自父类和辅助类。</p><ul><li><p>辅助类可通过systemAuxiliaryClass查看，显然Computer没有辅助类</p></li><li><p>通过subClass查看父类，父类为user,通过查看user的辅助类和父类，如此递归直到top</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD18.png" alt="AD18" tabindex="0" loading="lazy"><figcaption>AD18</figcaption></figure><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD19.png" alt="AD19" tabindex="0" loading="lazy"><figcaption>AD19</figcaption></figure><p>用Active DirectorySchema 查看，能看到属性的类型是可选或强制，以及是从哪个源类继承来的</p></li></ul></li></ul></li></ul><h3 id="schema-nc中的属性" tabindex="-1"><a class="header-anchor" href="#schema-nc中的属性"><span>Schema NC中的属性</span></a></h3><p>每个属性都是一个条目，是类<code>attributeSchema</code>的实例</p><p>在域内的所有属性必须在这里定义，而这里的条目，最主要的是限定了属性的语法定义。其实就是数据类型，比如 Boolean类型，Integer类型等。</p><p>以条目CN=System-Flags,CN=Schema,CN=Configuration,DC=hack,DC=com为例</p><p>他的<code>attributeSyntax</code>是2.5.5.9</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD20.png" alt="AD20" tabindex="0" loading="lazy"><figcaption>AD20</figcaption></figure><p>属性System-Flags是类attributeSchema的实例</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD21.png" alt="AD21" tabindex="0" loading="lazy"><figcaption>AD21</figcaption></figure><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/attributeSyntax.png" alt="attributeSyntax" tabindex="0" loading="lazy"><figcaption>attributeSyntax</figcaption></figure><h2 id="搜索active-directory" tabindex="-1"><a class="header-anchor" href="#搜索active-directory"><span>搜索Active Directory</span></a></h2><p>基础的操作，查询目录搜索要求的数据。查询目录需要指定两个元素。</p><ul><li><p>BaseDN</p></li><li><p>过滤规则</p></li></ul><p>简单介绍语法问题</p><h3 id="base-dn" tabindex="-1"><a class="header-anchor" href="#base-dn"><span>Base DN</span></a></h3><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD22.png" alt="AD22" tabindex="0" loading="lazy"><figcaption>AD22</figcaption></figure><p>Base DN指定了树的根，例如这里的&quot;DC= hack,DC=com&quot;就是以DC=hack,DC=com为根向下搜索</p><h3 id="过滤规则" tabindex="-1"><a class="header-anchor" href="#过滤规则"><span>过滤规则</span></a></h3><p>LDAP 搜索过滤器语法有以下子集：</p><ul><li>用与号 (&amp;) 表示的 AND 运算符。</li><li>用竖线 (|) 表示的 OR 运算符。</li><li>用感叹号 (!) 表示的 NOT 运算符。</li><li>用名称和值表达式的等号 (=) 表示的相等比较。</li><li>用名称和值表达式中值的开头或结尾处的星号 (*) 表示的通配符。</li></ul><p>下面举几个例子</p><ul><li><p>(uid=testuser)</p><p>匹配 uid 属性为testuser的所有对象</p></li><li><p>(uid=test*)</p><p>匹配 uid 属性以test开头的所有对象</p></li><li><p>(!(uid=test*))</p><p>匹配 uid 属性不以test开头的所有对象</p></li><li><p>(&amp;(department=1234)(city=Paris))</p><p>匹配 department 属性为1234且city属性为Paris的所有对象</p></li><li><p>(|(department=1234)(department=56*))</p><p>匹配 department 属性的值刚好为1234或者以56开头的所有对象。</p></li></ul><p>一个需要注意的点就是运算符是放在前面的，跟我们之前常规思维的放在中间不一样</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h2><p><a href="https://daiker.gitbook.io/windows-protocol/ldap-pian/8#0x06-sou-suo-active-directory" target="_blank" rel="noopener noreferrer">Windows Protocol</a></p><p><a href="https://learn.microsoft.com/en-us/windows/win32/ad/active-directory-domain-services" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/en-us/windows/win32/ad/active-directory-domain-services</a></p>',75)]))}const l=i(o,[["render",n],["__file","Active-Directory简介.html.vue"]]),s=JSON.parse('{"path":"/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/LDAP%E4%B8%93%E9%A2%98/Active-Directory%E7%AE%80%E4%BB%8B.html","title":"Active-Directory简介","lang":"zh-CN","frontmatter":{"description":"Active-Directory简介 这个专题主要是对域中ldap这个协议和AD域稍微再深入一些，依旧是基于windows protocl,最好还是翻阅翻阅官方文档 LDAP简介 轻量级目录访问协议 （LDAP） 是一种用于处理各种目录服务的应用程序协议。目录服务（如 Active Directory）存储用户和帐户信息，以及密码等安全信息。然后，该服...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/articles/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/LDAP%E4%B8%93%E9%A2%98/Active-Directory%E7%AE%80%E4%BB%8B.html"}],["meta",{"property":"og:site_name","content":"uu2fu3o的知识库"}],["meta",{"property":"og:title","content":"Active-Directory简介"}],["meta",{"property":"og:description","content":"Active-Directory简介 这个专题主要是对域中ldap这个协议和AD域稍微再深入一些，依旧是基于windows protocl,最好还是翻阅翻阅官方文档 LDAP简介 轻量级目录访问协议 （LDAP） 是一种用于处理各种目录服务的应用程序协议。目录服务（如 Active Directory）存储用户和帐户信息，以及密码等安全信息。然后，该服..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/2021meiya/1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T18:41:02.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-15T18:41:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Active-Directory简介\\",\\"image\\":[\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/2021meiya/1.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldap/shuxing.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldap/adways.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/GC.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD1.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldap/AD2.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldap/AD3.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldap/AD4.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD6.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD7.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD8.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD9.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD10.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD11.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD12.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD13.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD14.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD15.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD16.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD17.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD18.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD19.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD20.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD21.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/attributeSyntax.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/AD22.png\\"],\\"dateModified\\":\\"2025-01-15T18:41:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"uu2fu3o\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"LDAP简介","slug":"ldap简介","link":"#ldap简介","children":[]},{"level":2,"title":"Active Directory简介","slug":"active-directory简介-1","link":"#active-directory简介-1","children":[]},{"level":2,"title":"Naming Context和Application Partitions","slug":"naming-context和application-partitions","link":"#naming-context和application-partitions","children":[{"level":3,"title":"Naming Context","slug":"naming-context","link":"#naming-context","children":[]},{"level":3,"title":"Application Partitions","slug":"application-partitions","link":"#application-partitions","children":[]}]},{"level":2,"title":"Schema NC","slug":"schema-nc","link":"#schema-nc","children":[{"level":3,"title":"LDAP中的类和继承","slug":"ldap中的类和继承","link":"#ldap中的类和继承","children":[]},{"level":3,"title":"Schema NC中的类","slug":"schema-nc中的类","link":"#schema-nc中的类","children":[]},{"level":3,"title":"Schema NC中的属性","slug":"schema-nc中的属性","link":"#schema-nc中的属性","children":[]}]},{"level":2,"title":"搜索Active Directory","slug":"搜索active-directory","link":"#搜索active-directory","children":[{"level":3,"title":"Base DN","slug":"base-dn","link":"#base-dn","children":[]},{"level":3,"title":"过滤规则","slug":"过滤规则","link":"#过滤规则","children":[]}]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1736966462000,"updatedTime":1736966462000,"contributors":[{"name":"uu2fu3o","username":"uu2fu3o","email":"1027578439@qq.com","commits":1,"url":"https://github.com/uu2fu3o"}]},"readingTime":{"minutes":13.26,"words":3979},"filePathRelative":"渗透测试/LDAP专题/Active-Directory简介.md","localizedDate":"2025年1月16日","excerpt":"\\n<p>这个专题主要是对域中ldap这个协议和AD域稍微再深入一些，依旧是基于windows protocl,最好还是翻阅翻阅官方文档</p>\\n<h2>LDAP简介</h2>\\n<p>轻量级目录访问协议 （LDAP） 是一种用于处理各种目录服务的应用程序协议。目录服务（如 Active Directory）存储用户和帐户信息，以及密码等安全信息。然后，该服务允许与网络上的其他设备共享信息。电子邮件、客户关系经理 （CRM） 和人力资源 （HR） 软件等企业应用程序可以使用 LDAP 来验证、访问和查找信息。   -----来自microsoft</p>\\n<p><strong>目录服务</strong></p>","autoDesc":true}');export{l as comp,s as data};
