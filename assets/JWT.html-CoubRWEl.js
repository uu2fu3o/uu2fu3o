import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as i,o as s}from"./app-DS0ZCcmM.js";const t={};function r(l,e){return s(),n("div",null,e[0]||(e[0]=[i(`<h2 id="什么是jwt" tabindex="-1"><a class="header-anchor" href="#什么是jwt"><span>什么是jwt</span></a></h2><p>jwt全名json web token,用于创建具有可选<a href="https://en.wikipedia.org/wiki/Signature_(cryptography)" target="_blank" rel="noopener noreferrer">签名</a>和/或可选<a href="https://en.wikipedia.org/wiki/Encryption" target="_blank" rel="noopener noreferrer">加密</a>的数据，其<a href="https://en.wikipedia.org/wiki/Payload_(computing)" target="_blank" rel="noopener noreferrer">有效负载</a>包含断言一些<a href="https://en.wikipedia.org/wiki/Claims-based_identity" target="_blank" rel="noopener noreferrer">声明的</a><a href="https://en.wikipedia.org/wiki/JSON" target="_blank" rel="noopener noreferrer">JSON</a> . <a href="https://en.wikipedia.org/wiki/Shared_secret" target="_blank" rel="noopener noreferrer">使用私人秘密</a>或<a href="https://en.wikipedia.org/wiki/Public-key_cryptography" target="_blank" rel="noopener noreferrer">公钥/私钥</a>对令牌进行签名。其效果类似于我们常用的cookie,但是相较于cookie更具有扩展性；</p><h2 id="jwt的组成" tabindex="-1"><a class="header-anchor" href="#jwt的组成"><span>jwt的组成</span></a></h2><p>jwt通常由三部分组成，<strong>header</strong>,<strong>payload</strong>以及<strong>Signature</strong></p><p>[这三个部分使用Base64url Encoding [RFC]分别编码，并使用句点连接以生成 JWT：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const  token  =  base64urlEncoding ( header )  +  &#39;.&#39;  +  base64urlEncoding ( payload )  +  &#39;.&#39;  +  base64urlEncoding （签名）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>生成的const再与secretkey联合生成token:</p><p>这个生成的令牌可以很容易地传递到html和http</p><h2 id="jwt的使用" tabindex="-1"><a class="header-anchor" href="#jwt的使用"><span>jwt的使用</span></a></h2><p>在身份验证中，当用户使用他们的凭据成功登录时，将返回一个 JSON Web Token 并且必须保存在本地，而不是传统的创建会话的方法在服务器中并返回一个 cookie，对于无人值守的进程，客户端还可以通过使用预共享秘密生成和签署自己的 JWT 来直接进行身份验证，并将其传递给<a href="https://en.wikipedia.org/wiki/OAuth" target="_blank" rel="noopener noreferrer">OAuth</a>兼容服务。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>POST /oauth2/token</span></span>
<span class="line"><span>Content-type: application/x-www-form-urlencoded</span></span>
<span class="line"><span></span></span>
<span class="line"><span>grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer&amp;assertion=eyJhb...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果通过了一个jwt断言，服务端就会生成access_token，并且传递应用；</p><h2 id="jwt的声明" tabindex="-1"><a class="header-anchor" href="#jwt的声明"><span>jwt的声明</span></a></h2><p>payload:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>iss: jwt签发者</span></span>
<span class="line"><span>sub: jwt所面向的用户</span></span>
<span class="line"><span>aud: 接收jwt的一方</span></span>
<span class="line"><span>exp: jwt的过期时间，这个过期时间必须要大于签发时间</span></span>
<span class="line"><span>nbf: 定义在什么时间之前，该jwt都是不可用的.</span></span>
<span class="line"><span>iat: jwt的签发时间</span></span>
<span class="line"><span>jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>header:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>typ: 令牌类型(例如jwt)</span></span>
<span class="line"><span>cyp: content-type(内容类型)</span></span>
<span class="line"><span>alg: 消息验证使用的加密算法(通常设置为HMAC SHA256即HS256)</span></span>
<span class="line"><span>kid: key ID</span></span>
<span class="line"><span>x5c,x5u: 证书链及其url,用于判断签名的真实性</span></span>
<span class="line"><span>crit: 关键点，服务端必须要理解的标头列表，以验证令牌</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jwt的漏洞" tabindex="-1"><a class="header-anchor" href="#jwt的漏洞"><span>jwt的漏洞</span></a></h2><p>某些库使用alg字段错误的验证令牌，例如:alg=none;同时还有jwt的cve</p><h2 id="从题目探寻jwt攻击" tabindex="-1"><a class="header-anchor" href="#从题目探寻jwt攻击"><span>从题目探寻jwt攻击</span></a></h2><p>题库采用ctfshow web入门jwt系列</p><h2 id="web345" tabindex="-1"><a class="header-anchor" href="#web345"><span>web345</span></a></h2><p>由cookie值解码可得jwt的构成</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>header:</span></span>
<span class="line"><span>{&quot;alg&quot;:&quot;None&quot;,&quot;typ&quot;:&quot;jwt&quot;}</span></span>
<span class="line"><span>eyJhbGciOiJOb25lIiwidHlwIjoiand0In0（去掉等号）</span></span>
<span class="line"><span>payload:</span></span>
<span class="line"><span>[{&quot;iss&quot;:&quot;admin&quot;,&quot;iat&quot;:1683806390,&quot;exp&quot;:1683813590,&quot;nbf&quot;:1683806390,&quot;sub&quot;:&quot;user&quot;,&quot;jti&quot;:&quot;02b9328bfc9a37456e7af2592ee43fc3&quot;}]</span></span>
<span class="line"><span>改为[{&quot;sub&quot;:&quot;admin&quot;}]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提示我们使用admin</p><p>我们将user改为admin进行加密：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>W3sic3ViIjoiYWRtaW4ifV0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>拼接替换cookie访问/admin</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>eyJhbGciOiJOb25lIiwidHlwIjoiand0In0.W3sic3ViIjoiYWRtaW4ifV0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="web346-347" tabindex="-1"><a class="header-anchor" href="#web346-347"><span>web346-347</span></a></h2><p>同样拿到jwt进行解码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>header:</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;alg&quot;: &quot;HS256&quot;,</span></span>
<span class="line"><span>  &quot;typ&quot;: &quot;JWT&quot;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>payload:</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;iss&quot;: &quot;admin&quot;,</span></span>
<span class="line"><span>  &quot;iat&quot;: 1683808745,</span></span>
<span class="line"><span>  &quot;exp&quot;: 1683815945,</span></span>
<span class="line"><span>  &quot;nbf&quot;: 1683808745,</span></span>
<span class="line"><span>  &quot;sub&quot;: &quot;user&quot;,</span></span>
<span class="line"><span>  &quot;jti&quot;: &quot;1d68cb103232bb03ba8c72d59d5914c6&quot;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>算法改为了HS256,我们可以把alg改为none进行尝试；并且sub改为admin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用脚本跑出来不太行，还是利用弱口令1234567来加密</p><p><a href="http://jwt.io" target="_blank" rel="noopener noreferrer">http://jwt.io</a></p><h2 id="web348" tabindex="-1"><a class="header-anchor" href="#web348"><span>web348</span></a></h2>`,35)]))}const d=a(t,[["render",r],["__file","JWT.html.vue"]]),c=JSON.parse('{"path":"/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%A4%96%E7%BD%91%E6%BC%8F%E6%B4%9E/JWT.html","title":"JWT","lang":"zh-CN","frontmatter":{"title":"JWT","date":"2023-09-03T07:29:52.000Z","updated":"2023-06-13T14:35:03.000Z","categories":["渗透测试","外网漏洞"],"description":"什么是jwt jwt全名json web token,用于创建具有可选签名和/或可选加密的数据，其有效负载包含断言一些声明的JSON . 使用私人秘密或公钥/私钥对令牌进行签名。其效果类似于我们常用的cookie,但是相较于cookie更具有扩展性； jwt的组成 jwt通常由三部分组成，header,payload以及Signature [这三个部分...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/articles/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%A4%96%E7%BD%91%E6%BC%8F%E6%B4%9E/JWT.html"}],["meta",{"property":"og:site_name","content":"uu2fu3o的知识库"}],["meta",{"property":"og:title","content":"JWT"}],["meta",{"property":"og:description","content":"什么是jwt jwt全名json web token,用于创建具有可选签名和/或可选加密的数据，其有效负载包含断言一些声明的JSON . 使用私人秘密或公钥/私钥对令牌进行签名。其效果类似于我们常用的cookie,但是相较于cookie更具有扩展性； jwt的组成 jwt通常由三部分组成，header,payload以及Signature [这三个部分..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T18:41:02.000Z"}],["meta",{"property":"article:published_time","content":"2023-09-03T07:29:52.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-15T18:41:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JWT\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-03T07:29:52.000Z\\",\\"dateModified\\":\\"2025-01-15T18:41:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"uu2fu3o\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"什么是jwt","slug":"什么是jwt","link":"#什么是jwt","children":[]},{"level":2,"title":"jwt的组成","slug":"jwt的组成","link":"#jwt的组成","children":[]},{"level":2,"title":"jwt的使用","slug":"jwt的使用","link":"#jwt的使用","children":[]},{"level":2,"title":"jwt的声明","slug":"jwt的声明","link":"#jwt的声明","children":[]},{"level":2,"title":"jwt的漏洞","slug":"jwt的漏洞","link":"#jwt的漏洞","children":[]},{"level":2,"title":"从题目探寻jwt攻击","slug":"从题目探寻jwt攻击","link":"#从题目探寻jwt攻击","children":[]},{"level":2,"title":"web345","slug":"web345","link":"#web345","children":[]},{"level":2,"title":"web346-347","slug":"web346-347","link":"#web346-347","children":[]},{"level":2,"title":"web348","slug":"web348","link":"#web348","children":[]}],"git":{"createdTime":1736966462000,"updatedTime":1736966462000,"contributors":[{"name":"uu2fu3o","username":"uu2fu3o","email":"1027578439@qq.com","commits":1,"url":"https://github.com/uu2fu3o"}]},"readingTime":{"minutes":2.52,"words":756},"filePathRelative":"渗透测试/外网漏洞/JWT.md","localizedDate":"2023年9月3日","excerpt":"<h2>什么是jwt</h2>\\n<p>jwt全名json web token,用于创建具有可选<a href=\\"https://en.wikipedia.org/wiki/Signature_(cryptography)\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">签名</a>和/或可选<a href=\\"https://en.wikipedia.org/wiki/Encryption\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">加密</a>的数据，其<a href=\\"https://en.wikipedia.org/wiki/Payload_(computing)\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">有效负载</a>包含断言一些<a href=\\"https://en.wikipedia.org/wiki/Claims-based_identity\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">声明的</a><a href=\\"https://en.wikipedia.org/wiki/JSON\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JSON</a> . <a href=\\"https://en.wikipedia.org/wiki/Shared_secret\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">使用私人秘密</a>或<a href=\\"https://en.wikipedia.org/wiki/Public-key_cryptography\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">公钥/私钥</a>对令牌进行签名。其效果类似于我们常用的cookie,但是相较于cookie更具有扩展性；</p>","autoDesc":true}');export{d as comp,c as data};
