import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a,o as s}from"./app-DS0ZCcmM.js";const n={};function r(l,i){return s(),t("div",null,i[0]||(i[0]=[a(`<h1 id="tomcat架构" tabindex="-1"><a class="header-anchor" href="#tomcat架构"><span>Tomcat架构</span></a></h1><p><a href="https://goodapple.top/archives/1359" target="_blank" rel="noopener noreferrer">浅析tomcat架构</a></p><p><a href="https://juejin.cn/post/7055306172265414663" target="_blank" rel="noopener noreferrer">详解</a></p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240620222017435.png" alt="image-20240620222017435" tabindex="0" loading="lazy"><figcaption>image-20240620222017435</figcaption></figure><p>Tomcat本质上是一个servlet容器，最常见的是Catalina,Catalina负责管理Server,Server表示整个服务器</p><p>主要分为三个组件Service,Connector,Container</p><h3 id="service" tabindex="-1"><a class="header-anchor" href="#service"><span>Service</span></a></h3><p>其中一个Tomcat Server可以包含多个Service,每一个Service都是独立的，他们共享一个JVM以及系统类库，并且一个Service负责维护多个Connector和一个Container。</p><p>不同的Service可以通过不同的端口号来进行访问</p><h3 id="connector" tabindex="-1"><a class="header-anchor" href="#connector"><span>Connector</span></a></h3><p>Connector用于连接Service和Container，解析客户端的请求并转发到Container，以及转发来自Container的响应。每一种不同的Connector都可以处理不同的请求协议，包括HTTP/1.1、HTTP/2、AJP等等。</p><h3 id="container" tabindex="-1"><a class="header-anchor" href="#container"><span>Container</span></a></h3><p>Container包含4中组件</p><ul><li><p><strong>Engine</strong></p><p>表示整个Catalina的Servlet引擎，用来管理多个虚拟站点,一个Service最多只能有一个Engine,但是一个Engine可以包含多个Host</p></li><li><p><strong>Host</strong></p><p>表示一个主机或者是一个虚拟站点<br> 可以给Tomcat配置多个虚拟主机地址,一个虚拟主机地址下可以包含多个Context</p></li><li><p><strong>Context</strong></p><p>表示一个web应用程序<br> 一个尾部应用程序可以包含多个Wrapper</p></li><li><p><strong>Wrapper</strong></p><p>表示一个Servlet容器<br> Wrapper作为容器中的最底层,不可以包含子容器</p></li></ul><p>这4种组件是一种树状结构，通信流程如下</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240620144318022.png" alt="image-20240620144318022" tabindex="0" loading="lazy"><figcaption>image-20240620144318022</figcaption></figure><h4 id="三大context" tabindex="-1"><a class="header-anchor" href="#三大context"><span>三大Context</span></a></h4><ul><li><p>ServletContext</p><p>Servlet规范中规定了一个ServletContext接口，其用来保存一个Web应用中所有Servlet的上下文信息，可以通过ServletContext来对某个Web应用的资源进行访问和操作。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ServletContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> TEMPDIR </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;javax.servlet.context.tempdir&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ORDERED_LIBS </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;javax.servlet.context.orderedLibs&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getContextPath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    ServletContext</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> var1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getMajorVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getMinorVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getEffectiveMajorVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getEffectiveMinorVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getMimeType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> var1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getResourcePaths</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> var1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">..................................</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>ApplicationContext</p><p>在Tomcat中，ServletContext接口的具体实现就是ApplicationContext类，其实现了ServletContext接口中定义的一些方法。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240625134821223.png" alt="image-20240625134821223" tabindex="0" loading="lazy"><figcaption>image-20240625134821223</figcaption></figure><p>ApplicationContext采用了门面模式进行封装</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240625135116408.png" alt="image-20240625135116408" tabindex="0" loading="lazy"><figcaption>image-20240625135116408</figcaption></figure></li><li><p>StandardContext</p><p>该类是子容器context的标准实现类，其中包含了对Context子容器中资源的各种操作。四种容器都有自己的实现，继承于ContainerBase类</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240625140824190.png" alt="image-20240625140824190" tabindex="0" loading="lazy"><figcaption>image-20240625140824190</figcaption></figure><p>而在ApplicationContext类中，对资源的各种操作实际上是调用了StandardContext中的方法</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240625141028755.png" alt="image-20240625141028755" tabindex="0" loading="lazy"><figcaption>image-20240625141028755</figcaption></figure></li></ul><h3 id="servlet-api动态注册机制" tabindex="-1"><a class="header-anchor" href="#servlet-api动态注册机制"><span>Servlet Api动态注册机制</span></a></h3><p>Servlet、Listener、Filter 由 <code>javax.servlet.ServletContext</code> 去加载，无论是使用 xml 配置文件还是使用 Annotation 注解配置，均由 Web 容器进行初始化，读取其中的配置属性，然后向容器中进行注册。</p><p>Servlet 3.0 API 允许使 ServletContext 用动态进行注册，在 Web 容器初始化的时候（即建立ServletContext 对象的时候）进行动态注册。</p><p>ServletContext 提供了 add*/create* 方法来实现动态注册的功能。</p>`,22)]))}const h=e(n,[["render",r],["__file","Tomcat架构.html.vue"]]),c=JSON.parse('{"path":"/Java%E5%AD%A6%E4%B9%A0/%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat/Tomcat%E6%9E%B6%E6%9E%84.html","title":"Tomcat架构","lang":"zh-CN","frontmatter":{"description":"Tomcat架构 浅析tomcat架构 详解 image-20240620222017435image-20240620222017435 Tomcat本质上是一个servlet容器，最常见的是Catalina,Catalina负责管理Server,Server表示整个服务器 主要分为三个组件Service,Connector,Container Se...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/articles/Java%E5%AD%A6%E4%B9%A0/%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat/Tomcat%E6%9E%B6%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"uu2fu3o的知识库"}],["meta",{"property":"og:title","content":"Tomcat架构"}],["meta",{"property":"og:description","content":"Tomcat架构 浅析tomcat架构 详解 image-20240620222017435image-20240620222017435 Tomcat本质上是一个servlet容器，最常见的是Catalina,Catalina负责管理Server,Server表示整个服务器 主要分为三个组件Service,Connector,Container Se..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240620222017435.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T18:41:02.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-15T18:41:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Tomcat架构\\",\\"image\\":[\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240620222017435.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240620144318022.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240625134821223.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240625135116408.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240625140824190.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240625141028755.png\\"],\\"dateModified\\":\\"2025-01-15T18:41:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"uu2fu3o\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"Service","slug":"service","link":"#service","children":[]},{"level":3,"title":"Connector","slug":"connector","link":"#connector","children":[]},{"level":3,"title":"Container","slug":"container","link":"#container","children":[]},{"level":3,"title":"Servlet Api动态注册机制","slug":"servlet-api动态注册机制","link":"#servlet-api动态注册机制","children":[]}],"git":{"createdTime":1736966462000,"updatedTime":1736966462000,"contributors":[{"name":"uu2fu3o","username":"uu2fu3o","email":"1027578439@qq.com","commits":1,"url":"https://github.com/uu2fu3o"}]},"readingTime":{"minutes":2.38,"words":715},"filePathRelative":"Java学习/内存马/Tomcat/Tomcat架构.md","localizedDate":"2025年1月16日","excerpt":"\\n<p><a href=\\"https://goodapple.top/archives/1359\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">浅析tomcat架构</a></p>\\n<p><a href=\\"https://juejin.cn/post/7055306172265414663\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">详解</a></p>\\n<figure><img src=\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240620222017435.png\\" alt=\\"image-20240620222017435\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20240620222017435</figcaption></figure>","autoDesc":true}');export{h as comp,c as data};
