import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as t,o as n}from"./app-DS0ZCcmM.js";const s={};function p(g,i){return n(),e("div",null,i[0]||(i[0]=[t(`<h1 id="域用户和计算机用户" tabindex="-1"><a class="header-anchor" href="#域用户和计算机用户"><span>域用户和计算机用户</span></a></h1><h2 id="域用户" tabindex="-1"><a class="header-anchor" href="#域用户"><span>域用户</span></a></h2><h3 id="查询域用户" tabindex="-1"><a class="header-anchor" href="#查询域用户"><span>查询域用户</span></a></h3><ul><li><p>·通过SAMR查询</p><p>samr是一个RPC接口，平时使用的<code>net user /domain</code>就是使用该接口进行查询的</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123134059907.png" alt="image-20231123134059907" tabindex="0" loading="lazy"><figcaption>image-20231123134059907</figcaption></figure><p>impacket中有专门调用该接口进行域用户查询的工具，前提是满足域用户查询的条件</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123134450836.png" alt="image-20231123134450836" tabindex="0" loading="lazy"><figcaption>image-20231123134450836</figcaption></figure></li><li><p>通过ldap进行查询</p><p>域用户存储于活动目录数据库里面，对其他用户可见。可以通过Ldap 去查询。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(&amp;(objectCategory=person)(objectClass=user))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123135029874.png" alt="image-20231123135029874" tabindex="0" loading="lazy"><figcaption>image-20231123135029874</figcaption></figure></li></ul><h3 id="域用户部分属性介绍" tabindex="-1"><a class="header-anchor" href="#域用户部分属性介绍"><span>域用户部分属性介绍</span></a></h3><ul><li><p>sn</p><p>域用户的姓</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123140806524.png" alt="image-20231123140806524" tabindex="0" loading="lazy"><figcaption>image-20231123140806524</figcaption></figure></li><li><p>giveName</p><p>域用户的名，没有返回说明没有设置</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123140900505.png" alt="image-20231123140900505" tabindex="0" loading="lazy"><figcaption>image-20231123140900505</figcaption></figure></li><li><p>displayName</p><p>域用户的展示名，不用于登录，虽然跟域用户名往往一样。但是这个不是直接用于登陆的我们登陆用的账号。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123140951314.png" alt="image-20231123140951314" tabindex="0" loading="lazy"><figcaption>image-20231123140951314</figcaption></figure></li></ul><p><strong>域用户登录格式</strong></p><ul><li><p>UserPrincipalName（UPN）一般的格式是<code>用户名@域名</code></p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123141647155.png" alt="image-20231123141647155" tabindex="0" loading="lazy"><figcaption>image-20231123141647155</figcaption></figure></li><li><p>域名\\sAMAccountName</p><p>域名可以是netbios名，也可以是dns 名</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123141759269.png" alt="image-20231123141759269" tabindex="0" loading="lazy"><figcaption>image-20231123141759269</figcaption></figure></li></ul><p><strong>用户相关的一些时间</strong></p><ul><li><p>whenCreated</p></li><li><p>pwdLastSet</p></li><li><p>Lastlogon</p></li></ul><p>分别指代了用户的创建时间，密码设置时间，上次登录时间</p><p>利用adfind的-tdcs参数自动对时间进行转化</p><p>值得注意的是<strong>Lastlogon</strong>这个属性值在不同的域控制器上是不会同步的。所以要查询一个用户的最后登录时间，得指定不同的域控制器来查询。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123142424684.png" alt="image-20231123142424684" tabindex="0" loading="lazy"><figcaption>image-20231123142424684</figcaption></figure><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123142456952.png" alt="image-20231123142456952" tabindex="0" loading="lazy"><figcaption>image-20231123142456952</figcaption></figure><p>可见，在不同的域控制器上，Lastlogon参数是没有同步的</p><p><strong>userAccountControl</strong></p><p>这是一个位属性，我们可以通过位查询来检索该属性，这个属性非常重要</p><p>例如我们想查询设置了约束委派的用户</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123142724525.png" alt="image-20231123142724525" tabindex="0" loading="lazy"><figcaption>image-20231123142724525</figcaption></figure><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123142913844.png" alt="image-20231123142913844" tabindex="0" loading="lazy"><figcaption>image-20231123142913844</figcaption></figure><p>这个查表用对应的十进制值进行·过滤即可</p><h2 id="机器用户" tabindex="-1"><a class="header-anchor" href="#机器用户"><span>机器用户</span></a></h2><p>默认情况底下，加入域的机器默认在<code>CN=Computer</code>这个容器里面，域控默认在<code>Domain Controllers</code>这个OU里面。有些域内会通过<code>redircmp</code>进行修改</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123143507795.png" alt="image-20231123143507795" tabindex="0" loading="lazy"><figcaption>image-20231123143507795</figcaption></figure><h3 id="机器用户跟system-用户的关系" tabindex="-1"><a class="header-anchor" href="#机器用户跟system-用户的关系"><span>机器用户跟system 用户的关系</span></a></h3><p>protocol假设了一种场景，如果我们拿到一台域内机器，但没有域用户该怎么办，可以从AD来看</p><p>我们知道域用户是User类的实例</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123144204340.png" alt="image-20231123144204340" tabindex="0" loading="lazy"><figcaption>image-20231123144204340</figcaption></figure><p>机器是computer的实例</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123144249316.png" alt="image-20231123144249316" tabindex="0" loading="lazy"><figcaption>image-20231123144249316</figcaption></figure><p>computer是user的子类</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123144325495.png" alt="image-20231123144325495" tabindex="0" loading="lazy"><figcaption>image-20231123144325495</figcaption></figure><p>子类会继承父类的所有属性，因此从AD来看，域用户拥有的权限机器用户都该有。</p><p>其本地用户SYSTEM就对应于域内的机器用户，在域内的用户名就是机器名+$，例如这里的PC</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123144518394.png" alt="image-20231123144518394" tabindex="0" loading="lazy"><figcaption>image-20231123144518394</figcaption></figure><p>对应的就是PC$</p><p>将当前用户提到system(非管理员需要配合提权漏洞，管理员组的非administrators需要bypassuac，administrator提到system。这个网上有很多方法，psexec，mimikatz等等)。就可以在域内充当机器用户了。</p><h3 id="查找域内的所有机器" tabindex="-1"><a class="header-anchor" href="#查找域内的所有机器"><span>查找域内的所有机器</span></a></h3><p>通过<code>objectclass=Computer</code>或者<code>objectcategory=Computer</code>查找域内的所有机器</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123145608040.png" alt="image-20231123145608040" tabindex="0" loading="lazy"><figcaption>image-20231123145608040</figcaption></figure><p>adfind对查询域机器提供了一些方便的方法，这里用protocol截出来的图</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/t011f6d61516131b3a2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123145932492.png" alt="image-20231123145932492" tabindex="0" loading="lazy"><figcaption>image-20231123145932492</figcaption></figure><p>通过查询OU=Domain Controllers来查询域控机器</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123150135414.png" alt="image-20231123150135414" tabindex="0" loading="lazy"><figcaption>image-20231123150135414</figcaption></figure><p>同样adfind对查询域控也提供了简便操作</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/t01a86d45d667736a9d.png" alt="img2" tabindex="0" loading="lazy"><figcaption>img2</figcaption></figure><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123150302794.png" alt="image-20231123150302794" tabindex="0" loading="lazy"><figcaption>image-20231123150302794</figcaption></figure><h2 id="域用户账户与机器用户的对应关系" tabindex="-1"><a class="header-anchor" href="#域用户账户与机器用户的对应关系"><span>域用户账户与机器用户的对应关系</span></a></h2><h3 id="域用户默认能登录域内的任何一台普通机器" tabindex="-1"><a class="header-anchor" href="#域用户默认能登录域内的任何一台普通机器"><span>域用户默认能登录域内的任何一台普通机器</span></a></h3><p>在域内的一台机器默认允许Users组进行登录</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123151317983.png" alt="image-20231123151317983" tabindex="0" loading="lazy"><figcaption>image-20231123151317983</figcaption></figure><p>Users组中默认包含了Domain Users</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123152036769.png" alt="image-20231123152036769" tabindex="0" loading="lazy"><figcaption>image-20231123152036769</figcaption></figure><p>而域内用户默认都在Domain Users组里面。因此默认情况下域用户可以登录域内任何一台机器。</p><p>如何限制这种登录？</p><p>可以从用户和机器两边做限制，例如限制用户的登录</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123153012266.png" alt="image-20231123153012266" tabindex="0" loading="lazy"><figcaption>image-20231123153012266</figcaption></figure><p>在机器这边做限制</p><p>一般都会把常登陆这台机器的域用户加入到Administrators组里面。不允许User组里面用户本地登录。把下图的Users删除掉。这样登陆这台机器的域用户，因为在Administrators组里面，也可以登录。而其他域用户也不能登录。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123153121821.png" alt="image-20231123153121821" tabindex="0" loading="lazy"><figcaption>image-20231123153121821</figcaption></figure><h3 id="查看域用户能够登录的主机" tabindex="-1"><a class="header-anchor" href="#查看域用户能够登录的主机"><span>查看域用户能够登录的主机</span></a></h3><p>限制了域用户只能登录到某台主机之后，在LDAP里面，会设置一个字段，userWorkStation。这个字段保存了这个域用户只能登录到某台机器。而这个字段对于域内任何用户都是可读的，我们可以通过读域用户的userWorkStation来查看域用户限制登录到那一台机子。那个用户也就能够登录那台机子。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123164251393.png" alt="image-20231123164251393" tabindex="0" loading="lazy"><figcaption>image-20231123164251393</figcaption></figure><h3 id="查看域用户正在登陆的主机" tabindex="-1"><a class="header-anchor" href="#查看域用户正在登陆的主机"><span>查看域用户正在登陆的主机</span></a></h3><ul><li><p>检查远程机器注册表项里<code>HKEY_USERS</code>来查询谁正在登陆机</p><p>在当前机器上远程登录注册表来查看谁在登录域内其他机器</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123164228533.png" alt="image-20231123164228533" tabindex="0" loading="lazy"><figcaption>image-20231123164228533</figcaption></figure></li></ul><p>远程查看注册表项这个操作可以通过API实现，我们可以遍历域内所有机器，查询机器正在登陆的用户。</p><p>值得注意的有:</p><ul><li><p>默认PC机器，是没有开启注册表远程连接的。Server 机器，默认开启远程连接。</p></li><li><p>域内任何用户，即使配置了，不能本地登录域内机器A，但是只要域内机器A开启远程注册表连接，我们就可以连接上机器A的注册表，从而枚举正在登陆的用户</p></li></ul><ul><li><p>利用 <code>NetSessionEnum</code> 来寻找登陆的网络会话。</p><p>一个win32 API，如下</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">NET_API_STATUS NET_API_FUNCTION </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">NetSessionEnum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  LMSTR   servername,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  LMSTR   UncClientName,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  LMSTR   username,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  DWORD   level,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  LPBYTE  </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">bufptr,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  DWORD   prefmaxlen,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  LPDWORD entriesread,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  LPDWORD totalentries,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  LPDWORD resume_handle</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数第一个参数servername为指向一个字符串的指针，该字符串指定要在其上执行函数的远程服务器的 DNS 或 NetBIOS 名称。如果此参数为 NULL，则使用本地计算机。当该参数指向一个远程主机A，会去调用远程机器A的RPC。然后返回其他用户在访问机器A的网络资源（例如文件共享）时所创建的网络会话，可以看到这个用户来自何处。</p><p>我们可以使用netsess来完成这项工作</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123175819502.png" alt="image-20231123175819502" tabindex="0" loading="lazy"><figcaption>image-20231123175819502</figcaption></figure></li></ul><p>注意：</p><p>指定了servername 为机器A，并不能查询谁谁登陆了机器A，但是可以看到访问机器A的网络资源（例如文件共享）时所创建的网络会话。这个网络会话可以看到哪个域用户来自哪个IP，所以我们一般指定servername为域控或者文件共享服务器。</p><p>调用此函数的用户，指定了servername 为机器A，并不需要在机器A 上有管理员权限。所以域内任何用户都可以调用此函数，指定了servername 为域控。</p><ul><li><p>利用<code>NetWkstaUserEnum</code>列出当前登录到该机器的所有用户的信息</p><p>一个WIN32 API</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">NET_API_STATUS NET_API_FUNCTION </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">NetWkstaUserEnum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  [</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]      LMSTR   servername,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  [in]      DWORD   level,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  [out]     LPBYTE  *bufptr,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  [in]      DWORD   prefmaxlen,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  [out]     LPDWORD entriesread,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  [out]     LPDWORD totalentries,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  [in, out] LPDWORD resumehandle</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个API 的第一个参数servername 可以指定一个远程的机器A，会去调用远程机器A的RPC。然后返回当前登录到机器A的所有用户的信息.值得注意的是，调用该函数的用户需要具备机器A的本地管理员权限。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123212528614.png" alt="image-20231123212528614" tabindex="0" loading="lazy"><figcaption>image-20231123212528614</figcaption></figure><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123215511860.png" alt="image-20231123215511860" tabindex="0" loading="lazy"><figcaption>image-20231123215511860</figcaption></figure></li></ul><h3 id="查看域用户登录过的主机" tabindex="-1"><a class="header-anchor" href="#查看域用户登录过的主机"><span>查看域用户登录过的主机</span></a></h3><ul><li><p>通过查看outlook的邮件头</p><p>当用户a 在公司内部使用outlook 给你发一封邮件的时候，我们可以在改邮件的头部看到用户a的内网IP</p><p>这个没环境就不测了，用一下网上的图</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/t01d6cb7bc49c182ec0.png" alt="image-20200102185405486" tabindex="0" loading="lazy"><figcaption>image-20200102185405486</figcaption></figure></li><li><p>导出DC日志</p><p>要求我们有域控权限，比如说我们在拿到域控之后想找到域内某个用户的主机。</p><p>域内用户A在机器B正常登录的时候，由于本地没有域用户A的hash。机器B会去域控那边做验证，登录成功的话，在域控那边，会有个4624的日志，登录类型为3。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123220918200.png" alt="image-20231123220918200" tabindex="0" loading="lazy"><figcaption>image-20231123220918200</figcaption></figure><p>值得注意的是，在域内可能存在多台域控，日志并不同步，最好 将每一台域控的日志都导出来。</p><p>利用wevtutil来导出日志，该工具windows自带，用法可自行搜索</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wevtutil</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> epl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> security</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> C:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.evtx</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /q:&quot;*[System[(EventID=4624)] and EventData[Data[@Name=&#39;LogonType&#39;]=&#39;3&#39;]]&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&quot;&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>将日志拷贝到自己的电脑.使用LogParser开始提取日志</p><div class="language-powershell line-numbers-mode" data-highlighter="shiki" data-ext="powershell" data-title="powershell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .\\</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">LogParser.exe</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">i:EVT </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">o:CSV </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;SELECT TO_UPPERCASE(EXTRACT_TOKEN(Strings,5,&#39;|&#39;)) as USERNAME,TO_UPPERCASE(EXTRACT_TOKEN(Strings,18,&#39;|&#39;)) as SOURCE_IP FROM 1.evtx&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt;log.csv</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123223650703.png" alt="image-20231123223650703" tabindex="0" loading="lazy"><figcaption>image-20231123223650703</figcaption></figure></li></ul>`,77)]))}const u=a(s,[["render",p],["__file","域用户和计算机用户.html.vue"]]),o=JSON.parse('{"path":"/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/LDAP%E4%B8%93%E9%A2%98/%E5%9F%9F%E7%94%A8%E6%88%B7%E5%92%8C%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%94%A8%E6%88%B7.html","title":"域用户和计算机用户","lang":"zh-CN","frontmatter":{"description":"域用户和计算机用户 域用户 查询域用户 ·通过SAMR查询 samr是一个RPC接口，平时使用的net user /domain就是使用该接口进行查询的 image-20231123134059907image-20231123134059907 impacket中有专门调用该接口进行域用户查询的工具，前提是满足域用户查询的条件 image-20231...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/articles/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/LDAP%E4%B8%93%E9%A2%98/%E5%9F%9F%E7%94%A8%E6%88%B7%E5%92%8C%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%94%A8%E6%88%B7.html"}],["meta",{"property":"og:site_name","content":"uu2fu3o的知识库"}],["meta",{"property":"og:title","content":"域用户和计算机用户"}],["meta",{"property":"og:description","content":"域用户和计算机用户 域用户 查询域用户 ·通过SAMR查询 samr是一个RPC接口，平时使用的net user /domain就是使用该接口进行查询的 image-20231123134059907image-20231123134059907 impacket中有专门调用该接口进行域用户查询的工具，前提是满足域用户查询的条件 image-20231..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123134059907.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T18:41:02.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-15T18:41:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"域用户和计算机用户\\",\\"image\\":[\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123134059907.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123134450836.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123135029874.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123140806524.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123140900505.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123140951314.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123141647155.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123141759269.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123142424684.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123142456952.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123142724525.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123142913844.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123143507795.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123144204340.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123144249316.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123144325495.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123144518394.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123145608040.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/t011f6d61516131b3a2.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123145932492.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123150135414.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/t01a86d45d667736a9d.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123150302794.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123151317983.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123152036769.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123153012266.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123153121821.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123164251393.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123164228533.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123175819502.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123212528614.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123215511860.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/t01d6cb7bc49c182ec0.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123220918200.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123223650703.png\\"],\\"dateModified\\":\\"2025-01-15T18:41:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"uu2fu3o\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"域用户","slug":"域用户","link":"#域用户","children":[{"level":3,"title":"查询域用户","slug":"查询域用户","link":"#查询域用户","children":[]},{"level":3,"title":"域用户部分属性介绍","slug":"域用户部分属性介绍","link":"#域用户部分属性介绍","children":[]}]},{"level":2,"title":"机器用户","slug":"机器用户","link":"#机器用户","children":[{"level":3,"title":"机器用户跟system 用户的关系","slug":"机器用户跟system-用户的关系","link":"#机器用户跟system-用户的关系","children":[]},{"level":3,"title":"查找域内的所有机器","slug":"查找域内的所有机器","link":"#查找域内的所有机器","children":[]}]},{"level":2,"title":"域用户账户与机器用户的对应关系","slug":"域用户账户与机器用户的对应关系","link":"#域用户账户与机器用户的对应关系","children":[{"level":3,"title":"域用户默认能登录域内的任何一台普通机器","slug":"域用户默认能登录域内的任何一台普通机器","link":"#域用户默认能登录域内的任何一台普通机器","children":[]},{"level":3,"title":"查看域用户能够登录的主机","slug":"查看域用户能够登录的主机","link":"#查看域用户能够登录的主机","children":[]},{"level":3,"title":"查看域用户正在登陆的主机","slug":"查看域用户正在登陆的主机","link":"#查看域用户正在登陆的主机","children":[]},{"level":3,"title":"查看域用户登录过的主机","slug":"查看域用户登录过的主机","link":"#查看域用户登录过的主机","children":[]}]}],"git":{"createdTime":1736966462000,"updatedTime":1736966462000,"contributors":[{"name":"uu2fu3o","username":"uu2fu3o","email":"1027578439@qq.com","commits":1,"url":"https://github.com/uu2fu3o"}]},"readingTime":{"minutes":7.61,"words":2282},"filePathRelative":"渗透测试/LDAP专题/域用户和计算机用户.md","localizedDate":"2025年1月16日","excerpt":"\\n<h2>域用户</h2>\\n<h3>查询域用户</h3>\\n<ul>\\n<li>\\n<p>·通过SAMR查询</p>\\n<p>samr是一个RPC接口，平时使用的<code>net user /domain</code>就是使用该接口进行查询的</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123134059907.png\\" alt=\\"image-20231123134059907\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20231123134059907</figcaption></figure>\\n<p>impacket中有专门调用该接口进行域用户查询的工具，前提是满足域用户查询的条件</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123134450836.png\\" alt=\\"image-20231123134450836\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20231123134450836</figcaption></figure>\\n</li>\\n<li>\\n<p>通过ldap进行查询</p>\\n<p>域用户存储于活动目录数据库里面，对其他用户可见。可以通过Ldap 去查询。</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>(&amp;(objectCategory=person)(objectClass=user))</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div><figure><img src=\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231123135029874.png\\" alt=\\"image-20231123135029874\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20231123135029874</figcaption></figure>\\n</li>\\n</ul>","autoDesc":true}');export{u as comp,o as data};
