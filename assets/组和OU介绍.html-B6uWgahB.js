import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a,o}from"./app-DS0ZCcmM.js";const n={};function p(g,i){return o(),t("div",null,i[0]||(i[0]=[a(`<h1 id="组和ou" tabindex="-1"><a class="header-anchor" href="#组和ou"><span>组和OU</span></a></h1><h2 id="ldap高级搜索语法" tabindex="-1"><a class="header-anchor" href="#ldap高级搜索语法"><span>LDAP高级搜索语法</span></a></h2><h3 id="ldap位查找操作" tabindex="-1"><a class="header-anchor" href="#ldap位查找操作"><span>LDAP位查找操作</span></a></h3><p>在LDAP 里面，有些字段是位字段，这里以userAccountControl举例</p><p>他的属性类位于架构分区的<code>CN=User-Account-Control,CN=Schema,CN=Configuration,DC=hack,DC=com</code></p><p><code>attributeSyntax</code>是<code>2.5.5.9</code>,<code>oMSyntax</code>是<code>2</code>。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120103440538.png" alt="image-20231120103440538" tabindex="0" loading="lazy"><figcaption>image-20231120103440538</figcaption></figure><p>查询表可得，该位为32位,integer类型</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120103540291.png" alt="image-20231120103540291" tabindex="0" loading="lazy"><figcaption>image-20231120103540291</figcaption></figure><p>之所以说它是个位字段，是因为它是由一个个位组成</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120103917115.png" alt="image-20231120103917115" tabindex="0" loading="lazy"><figcaption>image-20231120103917115</figcaption></figure><p>比如说一个账户，他的LOCKOUT，以及NOT_DELEGATED，其他的位都没有，那这个用户的属性<code>userAccountControl</code>的值就为0x100000+0x0010。是个32 位 int 类型。</p><p>LDAP语法支持按位查找，这种查找方式能够过滤具体条目具体属性的具体位，搜寻语法如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>   &lt;属性名称&gt;：&lt;BitFilterRule-ID&gt; := &lt;十进制比较值&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/t01a25c7551c331ecdc.png" alt="t01a25c7551c331ecdc" tabindex="0" loading="lazy"><figcaption>t01a25c7551c331ecdc</figcaption></figure><p>我们最常的是AND ，也就是<code>1.2.840.113556.1.4.803</code></p><p>例如想查询哪些对象设置了NOT_DELEGATED,该位对应的10进制比较值位为1048576</p><p>因此规则如下</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(userAccoutControl:1.2.840.113556.1.4.803:=1048576)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120110158145.png" alt="image-20231120110158145" tabindex="0" loading="lazy"><figcaption>image-20231120110158145</figcaption></figure><p>上一个条目没有结果，换了一个位查，更清晰一些</p><p>adfind有一个比较方便的设置，可以使用参数-bit，会自动识别AND等参数</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldap/image-20231120110528337.png" alt="image-20231120110528337" tabindex="0" loading="lazy"><figcaption>image-20231120110528337</figcaption></figure><h2 id="ldap-查找中的objectcategory和objectclass" tabindex="-1"><a class="header-anchor" href="#ldap-查找中的objectcategory和objectclass"><span>LDAP 查找中的objectCategory和objectClass</span></a></h2><h3 id="objectclass" tabindex="-1"><a class="header-anchor" href="#objectclass"><span>objectClass</span></a></h3><p>在对象的objectClass属性中可以看到对象是哪个类的实例，以及所有的父类</p><p>所有的类都是<code>top</code>类的子类。因此当我们过滤<code>(objectClass=top)</code>可以找到域内的所有对象</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldap/image-20231120111135715.png" alt="image-20231120111135715" tabindex="0" loading="lazy"><figcaption>image-20231120111135715</figcaption></figure><h3 id="objectcategory" tabindex="-1"><a class="header-anchor" href="#objectcategory"><span>objectCategory</span></a></h3><p>在Windows Server 2008之前默认不对objectClass 属性进行索引。</p><p>Windows 2000 附带了未索引的objectClass 属性和另一个已建立索引的单值属性，称为objectCategory。</p><p><code>objectCategory</code>属性：该属性是一个单值属性。并且建立了索引。其中包含对象是其实例的类或其父类之一的专有名称。</p><p>比如<code>CN=PC,CN=Computers,DC=hack,DC=com,DC.hack.com</code>的objectCategory为<code>CN=Computer,CN=Schema,CN=Configuration,DC=hack,DC=com</code></p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120112624957.png" alt="image-20231120112624957" tabindex="0" loading="lazy"><figcaption>image-20231120112624957</figcaption></figure><p>创建对象时，系统会将其objectCategory属性设置为由其对象类的<code>defaultObjectCategory</code>属性指定的值。无法更改对象的objectCategory属性。</p><p>查看schema中Computer类的defaultObjectCategory的值</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120112831844.png" alt="image-20231120112831844" tabindex="0" loading="lazy"><figcaption>image-20231120112831844</figcaption></figure><p>如果我们想查询Computer类下的所有实例，即过滤所有objectCategory值为CN=Computer,CN=Schema,CN=Configuration,DC=hack,DC=com的属性，构造·如下语句</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">objectCategory</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;CN=Computer,CN=Schema,CN=Configuration,DC=hack,DC=com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120113201105.png" alt="image-20231120113201105" tabindex="0" loading="lazy"><figcaption>image-20231120113201105</figcaption></figure><p>为了更方便的查找，我们可以利用属性lDAPDisplayName，该属性指定该类的显示名。</p><p>例如CN=Computer,CN=Schema,CN=Configuratn,DC=hack,DC=com的lDAPDisplayName为computer</p><p>LDAP在实现上，支持用类的<code>lDAPDisplayName</code>作为搜索条件。所以如果我们想找所有<code>CN=Computer,CN=Schema,CN=Configuration,DC=hack,DC=lcom</code>的实例，可以简化为以下过滤规则。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(objectCategory=computer)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120114054692.png" alt="image-20231120114054692" tabindex="0" loading="lazy"><figcaption>image-20231120114054692</figcaption></figure><h3 id="objectclass-与objectcategory的结合使用" tabindex="-1"><a class="header-anchor" href="#objectclass-与objectcategory的结合使用"><span>objectClass 与objectCategory的结合使用</span></a></h3><p>这里以CN=hacker,CN=Users,DC=hack,DC=com举例，</p><p>他的<code>objectClass</code>是<code>top,person,organizationalPerson,user</code>。</p><p>他的<code>objectCategory</code>是<code>person</code>。</p><p>一个对象的<code>objectClass</code> 是一个类的对象类，以及这个对象类的所有父类。</p><p>一个对象的<code>objectCategory</code> 是一个类的对象类或者这个对象类的所有父类。</p><p>所以说一个对象的<code>objectCategory</code> 必定是<code>objectClass</code> 中的其中一个。</p><p>user，person，organizationalPerson类将其defaultObjectCategory设置为person。这允许像（objectCategory= person）这样的搜索过滤器通过单个查询定位所有这些类的实例。user类的继承关系如下</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">top</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">organizationalPerson</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">user</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>person</code>,<code>organizationalPerson</code>,<code>user</code>都将其defaultObjectCategory设置为person。因此我们可以先过滤。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(objectCategory=person)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>加上objectClass</p><p>(&amp;(objectCategory=person)(objectclass=user))</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120125951927.png" alt="image-20231120125951927" tabindex="0" loading="lazy"><figcaption>image-20231120125951927</figcaption></figure><p>关于为什么使用这样的查询方式，是为了获取更快的查询速度。事实上单独查询的结果是一致的（对于当前情况），使用obejctCategory可以先划分一个较大的组，再通过objectclass进行精确匹配</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120130108339.png" alt="image-20231120130108339" tabindex="0" loading="lazy"><figcaption>image-20231120130108339</figcaption></figure><h2 id="组" tabindex="-1"><a class="header-anchor" href="#组"><span>组</span></a></h2><h3 id="组介绍" tabindex="-1"><a class="header-anchor" href="#组介绍"><span>组介绍</span></a></h3><p>组，这个概念并不陌生，例如域管就是一个组。组按照用途划分可以分为安全组和通讯组。通讯组，例如邮件组，将若干个人划分到一个通讯组，给这个通讯组发件，那组内用户都能收到。但是通讯组不能控制对资源的访问。</p><p>安全组是权限的集合。将用户拉入拥有特殊权限的安全组中，用户就拥有了组内所设置的特殊权限。</p><p>安全组可以根据作用范围划分为。</p><ul><li>全局组 (Global group)</li><li>通用组(Universal group)</li><li>域本地组(Domain Local group)</li></ul><h3 id="查询组" tabindex="-1"><a class="header-anchor" href="#查询组"><span>查询组</span></a></h3><p>所有的组都是<code>group</code>类的实例，</p><p>我们可以用<code>(objectClass=group)</code>或者<code>(objectCategory=group)</code>来过滤组。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120131636684.png" alt="image-20231120131636684" tabindex="0" loading="lazy"><figcaption>image-20231120131636684</figcaption></figure><p>为什么不一起使用，能够精确匹配的情况下，用其中一个就好了。</p><p>组的类型由属性<code>groupType</code>决定，属性<code>groupType</code>是一个位字段</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120131834164.png" alt="image-20231120131834164" tabindex="0" loading="lazy"><figcaption>image-20231120131834164</figcaption></figure><p>GROUP_TYPE_BUILTIN_LOCAL_GROUP：指定系统创建的组。</p><p>GROUP_TYPE_ACCOUNT_GROUP：指定全局组。</p><p>GROUP_TYPE_RESOURCE_GROUP：指定域本地组。</p><p>GROUP_TYPE_UNIVERSAL_GROUP：指定通用组。</p><p>GROUP_TYPE_APP_BASIC_GROUP：Active Directory 不使用此类型的组。此常量包含在本文档中，因为 Active Directory 在处理 groupType 属性时使用此常量的值</p><p>GROUP_TYPE_APP_QUERY_GROUP：Active Directory 不使用此类型的组。本文档中包含此常量，因为 Active Directory 在处理 groupType 属性时使用此常量的值</p><p>GROUP_TYPE_SECURITY_ENABLED：指定启用安全性的组。</p><ul><li><p>域内所有全局组</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120132353552.png" alt="image-20231120132353552" tabindex="0" loading="lazy"><figcaption>image-20231120132353552</figcaption></figure></li><li><p>所有域本地组</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120132433219.png" alt="image-20231120132433219" tabindex="0" loading="lazy"><figcaption>image-20231120132433219</figcaption></figure></li><li><p>所有域通用组</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120132506626.png" alt="image-20231120132506626" tabindex="0" loading="lazy"><figcaption>image-20231120132506626</figcaption></figure></li><li><p>域内所有安全组，包括全局组，通用组，域本地组</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120133142138.png" alt="image-20231120133142138" tabindex="0" loading="lazy"><figcaption>image-20231120133142138</figcaption></figure></li><li><p>域内的所有通讯组，不属于安全组的组都是通讯组</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120133305163.png" alt="image-20231120133305163" tabindex="0" loading="lazy"><figcaption>image-20231120133305163</figcaption></figure></li><li><p>域内系统组</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120133341744.png" alt="image-20231120133341744" tabindex="0" loading="lazy"><figcaption>image-20231120133341744</figcaption></figure></li></ul><h3 id="组范围" tabindex="-1"><a class="header-anchor" href="#组范围"><span>组范围</span></a></h3><p>可以看如下表格</p><table><thead><tr><th>组类型</th><th>可以授予权限</th><th>可包含</th><th>可包含于</th><th>成员是否在全局编录复制</th></tr></thead><tbody><tr><td>全局组</td><td>在同一林中或信任域或林中的任何域上。</td><td>来自同一域的帐户。 来自同一域的其他全局组</td><td>来自同一林中任何域的通用组。 来自同一域的其他全局组。 来自同一林中任何域或任何信任域的域本地组。</td><td>无</td></tr><tr><td>通用组</td><td>在同一林或信任林中的任何域上。</td><td>来自同一林中任何域的帐户。 来自同一林中任何域的全局组。 来自同一林中任何域的其他通用组。</td><td>同一林中的其他通用组。 在同一个林或信任林中域本地组。</td><td>是</td></tr><tr><td>域本地组</td><td>在同一个域中</td><td>来自任何域或任何受信任域的帐户。 来自任何域或任何受信任域的全局组。 来自同一林中任何域的通用组。 来自同一域的其他域本地组。</td><td>来自同一域的其他域本地组。</td><td>无</td></tr></tbody></table><ul><li>域本地组(Domain Local group)</li></ul><p>顾名思义，就是本域内的本地组。不适用于林，适用于本域。可包含林内的账户，通用组，全局组。其他域内的通用组要在本域拥有权限，一般都是加入这个域的域本地组。比如说一个林里面，只有林根域有<code>Enterprise Admins</code>这个组，这是个通用组。然后其他子域 的域本地组<code>Administrators</code>会把林根域的<code>Enterprise Admins</code>加进里面，所以林根域的<code>Enterprise Admins</code>组用户才在整个林内具备管理员权限。如果想要一个只允许访问同一个域中的资源的组，那么使用域本地组即可。</p><ul><li>通用组(Universal group)</li></ul><p>上面已经简单提过了通用组，典型例子是<code>Enterprise Admins</code>这个组。在林的场景下比较有用。组内成员会在GC内复制。如果你想要一个可以访问林中任何东西的组，并且可以在林中包含任何账户，请使用通用组。</p><ul><li>全局组 (Global group)</li></ul><p>全局组比较复杂，前面说了。在单域内用域本地组，在林中使用通用组。全局组应该说是一种比较折中的方案，他可以在林中使用，但是只能包含本域内的账户。全局组的使用范围是本域以及受信任关系的其他域。最为常见的全局组是Domain Admin，也就是我们常说的域管。因为全局组只能包含本域内账户，因此来自一个域的账户不能嵌套在另一个域中的全局组中，这就是为什么来自同一个域的用户不符合在外部域中的域管的成员资格（由于其全局范围的影响)。</p><h3 id="常见组介绍" tabindex="-1"><a class="header-anchor" href="#常见组介绍"><span>常见组介绍</span></a></h3><ul><li>Administrators</li></ul><p>域本地组。具备系统管理员的权限，拥有对整个域最大的控制权，可以执行整个域的管理任务。Administrators包括<code>Domain Admins</code>和<code>Enterprise Admins</code>。</p><ul><li>Domain Admins</li></ul><p>全局组。我们常说的域管组。默认情况下，域内所有机器会把Domain Admins加入到本地管理员组里面。</p><ul><li>Enterprise Admins</li></ul><p>通用组。在林中，只有林根域才有这个组，林中其他域没有这个组，但是其他域默认会把这个组加入到本域的Administrators里面去。</p><ul><li>Domain Users</li></ul><p>全局组。包括域中所有用户帐户,在域中创建用户帐户后，该帐户将自动添加到该组中。默认情况下，域内所有机器会把Domain Users加入到本地用户组里面，也就是为什么默认情况底下，啥都不配置。域用户可以登录域内任何一台普通成员机器。</p><h3 id="agdlp策略" tabindex="-1"><a class="header-anchor" href="#agdlp策略"><span>AGDLP策略</span></a></h3><p>安全组是权限的集合，所以在微软的建议中，并不建议给赋予单个用户权限，而是赋予一个组权限，然后将成员拉近组</p><p>A表示用户账号，Account</p><p>G表示全局组，Global group</p><p>U表示通用组，Universal Group</p><p>L表示本地组， local group</p><p>DL表示域本地组，Domain local group</p><p>P表示资源权限，Resource Permissions</p><h4 id="常见的几种权限划分方式" tabindex="-1"><a class="header-anchor" href="#常见的几种权限划分方式"><span>常见的几种权限划分方式</span></a></h4><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/t011b7307be86d9898d.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>AGP，将用户账户添加到全局组，然后赋予全局组权限</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/t0144ea8fd9fdcfd13c.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>AGLP，将用户账户添加到全局组，将全局组添加到本地组， 然后赋予本地组权限</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/t019d2b13a12e69594c.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>ADLP 将用户账户添加到域本地组，然后赋予域本地组权限</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/t01b30769e58bc30d1b.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>AGDLP，将用户账户添加到全局组，将全局组添加到域本地组， 然后赋予域本地组权限</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/t01ca031e9e49db2bf2.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>AGUDLP，将用户账户添加到全局组，将全局组添加到通用组，将通用组添加到域本地组， 然后赋予域本地组权限</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/t01785b14c5c4f449c4.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>举个例子：有A,B两个域，A中的用户和B的用户想要访问B中的服务，选择在B中建立一个DL，并将用户全部拉进来，此时AB中的用户可以对B中的服务进行访问。此时，A如果新增用户想要访问B中服务，但由于只有B对该DL有控制权限，A中新用户无法直接加入该DL，可以采取在B中建立G，A,B分别建立一个DL，并将两个DL拉入B新建立的G中利用权限继承来解决这个问题。</p><h3 id="查询组内用户以及用户所属的组" tabindex="-1"><a class="header-anchor" href="#查询组内用户以及用户所属的组"><span>查询组内用户以及用户所属的组</span></a></h3><p>group4是group2组内的成员</p><p>group4中会有一个属性memberOf来标识它属于group2</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120205245943.png" alt="image-20231120205245943" tabindex="0" loading="lazy"><figcaption>image-20231120205245943</figcaption></figure><p>group2中会有标识member属性标识group2的组成员</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120205337748.png" alt="image-20231120205337748" tabindex="0" loading="lazy"><figcaption>image-20231120205337748</figcaption></figure><p>重新配置一下目录，有以下结构</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>group1 =&gt; group2 =&gt; group4</span></span>
<span class="line"><span>		  group2 =&gt; edd</span></span>
<span class="line"><span>group3 =&gt; edd</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>查询group2有哪些成员</p><p>即查询group2的member属性</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120210731894.png" alt="image-20231120210731894" tabindex="0" loading="lazy"><figcaption>image-20231120210731894</figcaption></figure><p>或者通过过滤memberof为group2条目</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120211142344.png" alt="image-20231120211142344" tabindex="0" loading="lazy"><figcaption>image-20231120211142344</figcaption></figure></li><li><p>查询edd属于哪个组</p><p>即查询member属性为edd的对象</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120211358304.png" alt="image-20231120211358304" tabindex="0" loading="lazy"><figcaption>image-20231120211358304</figcaption></figure><p>或者查询edd对象的memberOf属性值</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120211451541.png" alt="image-20231120211451541" tabindex="0" loading="lazy"><figcaption>image-20231120211451541</figcaption></figure></li><li><p>查看<code>group1</code>有哪些成员，这些成员如果是组，就继续查下去，直到非组成员为止</p><p>即采用递归查询，根据LDAP的特性，可以用位操作符的一部分。<code>BitFilterRule-ID</code> 为<code>1.2.840.113556.1.4.1941</code>.在adfind 里面可以用INCHAIN简化</p><p>现在查询group1的成员，以及成员的成员</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120212205487.png" alt="image-20231120212205487" tabindex="0" loading="lazy"><figcaption>image-20231120212205487</figcaption></figure><p>可通过过滤memberof属性进行查看</p></li><li><p>查看用户edd属于哪些组，这些组又属于哪些组，如此往上递归，知道这个组不属于其他组为止</p></li></ul><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120212457165.png" alt="image-20231120212457165" tabindex="0" loading="lazy"><figcaption>image-20231120212457165</figcaption></figure><h2 id="组织单位-organization-unit" tabindex="-1"><a class="header-anchor" href="#组织单位-organization-unit"><span>组织单位(Organization Unit)</span></a></h2><h3 id="ou介绍" tabindex="-1"><a class="header-anchor" href="#ou介绍"><span>OU介绍</span></a></h3><p>组织单位(Organization Unit)，简称OU，是一个容器对象，将域中的对象组织成逻辑组，帮助网络管理员简化管理组。组织单位包含下列类型的对象：用户，计算机，工作组，打印机，安全策略，其他组织单位等。可以在组织单位基础上部署组策略，统一管理组织单位中的域对象。 在企业域环境里面，我们经常看到按照部分划分的一个个OU。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120213249562.png" alt="image-20231120213249562" tabindex="0" loading="lazy"><figcaption>image-20231120213249562</figcaption></figure><h3 id="ou跟容器的区别" tabindex="-1"><a class="header-anchor" href="#ou跟容器的区别"><span>OU跟容器的区别</span></a></h3><p>组织单位（OU）是专用容器，与常规容器的区别在于管理员可以将组策略应用于OU，然后系统将其下推到OU中的所有计算机。您不能将组策略应用于容器。需要注意的是<code>Domain Computers</code>是一个普通容器，而<code>Domain Controllers</code>是一个OU，因此可以可以将组策略应该于<code>Domain Controllers</code>，不可以将组策略应用于<code>Domain Computers</code>。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120213747669.png" alt="image-20231120213747669" tabindex="0" loading="lazy"><figcaption>image-20231120213747669</figcaption></figure><p>这里的domain controllers指的是根域的OU，并不是users下的，users下的domain controllers是组</p><h3 id="ou跟组的区别" tabindex="-1"><a class="header-anchor" href="#ou跟组的区别"><span>OU跟组的区别</span></a></h3><p>组织单位跟组是两个完全不同的概念。很多人经常会把这两个弄混。组是权限的集合。OU是管理对象的集合</p><p>将用户拉近组，用户就拥有了组所拥有的特殊权限。将用户拉进OU，就能对用户下发组策略统一管理。</p><p>因此，组是管理的集合，OU是被管理的集合</p><h3 id="ou委派" tabindex="-1"><a class="header-anchor" href="#ou委派"><span>OU委派</span></a></h3><p>考虑这样一种需求，如果我们想允许某个用户把其他用户拉近OU，而不赋予这个用户域管权限，我们可以在这个OU给这个用户委派 添加成员的权限。组织单位的委派其实就是赋予某个域内用户对OU的某些管理权限。这些权限体现在ACL里面。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120215216507.png" alt="image-20231120215216507" tabindex="0" loading="lazy"><figcaption>image-20231120215216507</figcaption></figure><h3 id="查询ou" tabindex="-1"><a class="header-anchor" href="#查询ou"><span>查询OU</span></a></h3><p>所有的OU都是<code>organizationalUnit</code>类的实例，</p><p>我们可以用<code>(objectClass=organizationalUnit)</code>或者<code>(objectCategory=organizationalUnit)</code>来过滤OU。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120215325511.png" alt="image-20231120215325511" tabindex="0" loading="lazy"><figcaption>image-20231120215325511</figcaption></figure><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120215430655.png" alt="image-20231120215430655" tabindex="0" loading="lazy"><figcaption>image-20231120215430655</figcaption></figure><p>查询OU里面的账户，可以指定BaseDN为OU就行</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120215636511.png" alt="image-20231120215636511" tabindex="0" loading="lazy"><figcaption>image-20231120215636511</figcaption></figure>`,153)]))}const u=e(n,[["render",p],["__file","组和OU介绍.html.vue"]]),l=JSON.parse('{"path":"/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/LDAP%E4%B8%93%E9%A2%98/%E7%BB%84%E5%92%8COU%E4%BB%8B%E7%BB%8D.html","title":"组和OU","lang":"zh-CN","frontmatter":{"description":"组和OU LDAP高级搜索语法 LDAP位查找操作 在LDAP 里面，有些字段是位字段，这里以userAccountControl举例 他的属性类位于架构分区的CN=User-Account-Control,CN=Schema,CN=Configuration,DC=hack,DC=com attributeSyntax是2.5.5.9,oMSynta...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/articles/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/LDAP%E4%B8%93%E9%A2%98/%E7%BB%84%E5%92%8COU%E4%BB%8B%E7%BB%8D.html"}],["meta",{"property":"og:site_name","content":"uu2fu3o的知识库"}],["meta",{"property":"og:title","content":"组和OU"}],["meta",{"property":"og:description","content":"组和OU LDAP高级搜索语法 LDAP位查找操作 在LDAP 里面，有些字段是位字段，这里以userAccountControl举例 他的属性类位于架构分区的CN=User-Account-Control,CN=Schema,CN=Configuration,DC=hack,DC=com attributeSyntax是2.5.5.9,oMSynta..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120103440538.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T18:41:02.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-15T18:41:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"组和OU\\",\\"image\\":[\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120103440538.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120103540291.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120103917115.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/t01a25c7551c331ecdc.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120110158145.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldap/image-20231120110528337.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldap/image-20231120111135715.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120112624957.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120112831844.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120113201105.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120114054692.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120125951927.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120130108339.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120131636684.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120131834164.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120132353552.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120132433219.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120132506626.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120133142138.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120133305163.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120133341744.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/t011b7307be86d9898d.jpg\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/t0144ea8fd9fdcfd13c.jpg\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/t019d2b13a12e69594c.jpg\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/t01b30769e58bc30d1b.jpg\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/t01ca031e9e49db2bf2.jpg\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/t01785b14c5c4f449c4.jpg\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120205245943.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120205337748.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120210731894.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120211142344.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120211358304.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120211451541.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120212205487.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120212457165.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120213249562.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120213747669.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120215216507.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120215325511.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120215430655.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120215636511.png\\"],\\"dateModified\\":\\"2025-01-15T18:41:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"uu2fu3o\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"LDAP高级搜索语法","slug":"ldap高级搜索语法","link":"#ldap高级搜索语法","children":[{"level":3,"title":"LDAP位查找操作","slug":"ldap位查找操作","link":"#ldap位查找操作","children":[]}]},{"level":2,"title":"LDAP 查找中的objectCategory和objectClass","slug":"ldap-查找中的objectcategory和objectclass","link":"#ldap-查找中的objectcategory和objectclass","children":[{"level":3,"title":"objectClass","slug":"objectclass","link":"#objectclass","children":[]},{"level":3,"title":"objectCategory","slug":"objectcategory","link":"#objectcategory","children":[]},{"level":3,"title":"objectClass 与objectCategory的结合使用","slug":"objectclass-与objectcategory的结合使用","link":"#objectclass-与objectcategory的结合使用","children":[]}]},{"level":2,"title":"组","slug":"组","link":"#组","children":[{"level":3,"title":"组介绍","slug":"组介绍","link":"#组介绍","children":[]},{"level":3,"title":"查询组","slug":"查询组","link":"#查询组","children":[]},{"level":3,"title":"组范围","slug":"组范围","link":"#组范围","children":[]},{"level":3,"title":"常见组介绍","slug":"常见组介绍","link":"#常见组介绍","children":[]},{"level":3,"title":"AGDLP策略","slug":"agdlp策略","link":"#agdlp策略","children":[]},{"level":3,"title":"查询组内用户以及用户所属的组","slug":"查询组内用户以及用户所属的组","link":"#查询组内用户以及用户所属的组","children":[]}]},{"level":2,"title":"组织单位(Organization Unit)","slug":"组织单位-organization-unit","link":"#组织单位-organization-unit","children":[{"level":3,"title":"OU介绍","slug":"ou介绍","link":"#ou介绍","children":[]},{"level":3,"title":"OU跟容器的区别","slug":"ou跟容器的区别","link":"#ou跟容器的区别","children":[]},{"level":3,"title":"OU跟组的区别","slug":"ou跟组的区别","link":"#ou跟组的区别","children":[]},{"level":3,"title":"OU委派","slug":"ou委派","link":"#ou委派","children":[]},{"level":3,"title":"查询OU","slug":"查询ou","link":"#查询ou","children":[]}]}],"git":{"createdTime":1736966462000,"updatedTime":1736966462000,"contributors":[{"name":"uu2fu3o","username":"uu2fu3o","email":"1027578439@qq.com","commits":1,"url":"https://github.com/uu2fu3o"}]},"readingTime":{"minutes":12.58,"words":3774},"filePathRelative":"渗透测试/LDAP专题/组和OU介绍.md","localizedDate":"2025年1月16日","excerpt":"\\n<h2>LDAP高级搜索语法</h2>\\n<h3>LDAP位查找操作</h3>\\n<p>在LDAP 里面，有些字段是位字段，这里以userAccountControl举例</p>\\n<p>他的属性类位于架构分区的<code>CN=User-Account-Control,CN=Schema,CN=Configuration,DC=hack,DC=com</code></p>\\n<p><code>attributeSyntax</code>是<code>2.5.5.9</code>,<code>oMSyntax</code>是<code>2</code>。</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231120103440538.png\\" alt=\\"image-20231120103440538\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20231120103440538</figcaption></figure>","autoDesc":true}');export{u as comp,l as data};
