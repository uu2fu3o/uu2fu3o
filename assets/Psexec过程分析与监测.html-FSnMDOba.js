import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as n,o as s}from"./app-DS0ZCcmM.js";const a={};function p(r,e){return s(),i("div",null,e[0]||(e[0]=[n(`<h1 id="psexec过程分析与监测" tabindex="-1"><a class="header-anchor" href="#psexec过程分析与监测"><span>Psexec过程分析与监测</span></a></h1><h2 id="流量分析" tabindex="-1"><a class="header-anchor" href="#流量分析"><span>流量分析</span></a></h2><p>psexec基于smb协议，利用远程主机的445端口，因此在该工具启动的时候，直接进行了TCP三次握手，尝试连接远程主机的445端口</p><p>，SMB协商使用SMBv2协议通信，进行NTLM认证</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/tcp-smb-ntlm.png" alt="tcp-smb-ntlm" tabindex="0" loading="lazy"><figcaption>tcp-smb-ntlm</figcaption></figure><p>NTLM认证过程中能够看到请求的信息，域以及用户名</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec_stream/ntlm-name.png" alt="ntlm-name" tabindex="0" loading="lazy"><figcaption>ntlm-name</figcaption></figure><p>接下来psexec请求想要访问的目标资源，即ADMIN$共享</p><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec_stream/request-Admin%24.png" alt="request-Admin$" style="zoom:33%;"><p>创建文件请求，开始通过TCP流写入文件</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec_stream/file-write.png" alt="file-write" tabindex="0" loading="lazy"><figcaption>file-write</figcaption></figure><p>一直到close response,写入文件的任务完成</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec/file-write-finish.png" alt="file-write-finish" tabindex="0" loading="lazy"><figcaption>file-write-finish</figcaption></figure><p>PSexec从资源文件中提取出了一个服务，并创建运行，在OpenSCManagerW中，攻击机开始调用svcctl协议，并打开psexecsvc服务</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec/svcttl.png" alt="svcttl" tabindex="0" loading="lazy"><figcaption>svcttl</figcaption></figure><p>随后创建四个管道</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec/pipe1.png" alt="pipe1" tabindex="0" loading="lazy"><figcaption>pipe1</figcaption></figure><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec/pipe2-3-4.png" alt="pipe2-3-4" tabindex="0" loading="lazy"><figcaption>pipe2-3-4</figcaption></figure><p>后面三个管道分别对应了输入，输出和错误，管道创建成功就能通过psexec连接远程主机进行使用，在关闭会话时会删除服务和进程</p><h2 id="进程服务与日志" tabindex="-1"><a class="header-anchor" href="#进程服务与日志"><span>进程服务与日志</span></a></h2><p>在psexec启动时通过PsExec进程来创建服务</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec_stream/service-and-exe.png" alt="service-and-exe" tabindex="0" loading="lazy"><figcaption>service-and-exe</figcaption></figure><p>Psexec在退出后会产生Event 4624,4628,4634的登录日志，系统日志中会7045记录了PSEXESVC的安装，7036记录PSEXESVE的服务状态</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec/7045.png" alt="7045" tabindex="0" loading="lazy"><figcaption>7045</figcaption></figure><p>很明显，这样的日志特征非常容易被检测，这也是为什么后续会转向WMI的使用</p><h2 id="基础的免杀" tabindex="-1"><a class="header-anchor" href="#基础的免杀"><span>基础的免杀</span></a></h2><p>最简单也是比较直接的</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec/pipe_name.png" alt="pipe_name" tabindex="0" loading="lazy"><figcaption>pipe_name</figcaption></figure><p>修改管道名称，或者尝试修改输出</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec-stream/printf.png" alt="printf" tabindex="0" loading="lazy"><figcaption>printf</figcaption></figure><p>修改后重新编译生成exe文件，转为hex</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> binascii</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">filename </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;RemComSvc.exe&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">with</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(filename, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;rb&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    content </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(binascii.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">hexlify</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(content))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>拿去替换掉项目中原来的二进制文件，或是指定-f选择自己的文件</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec-stream/recomsvc.png" alt="recomsvc" tabindex="0" loading="lazy"><figcaption>recomsvc</figcaption></figure>`,34)]))}const l=t(a,[["render",p],["__file","Psexec过程分析与监测.html.vue"]]),u=JSON.parse('{"path":"/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%86%85%E7%BD%91%E4%BD%93%E7%B3%BB%E5%BB%BA%E8%AE%BE/Psexec%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90%E4%B8%8E%E7%9B%91%E6%B5%8B.html","title":"Psexec过程分析与监测","lang":"zh-CN","frontmatter":{"description":"Psexec过程分析与监测 流量分析 psexec基于smb协议，利用远程主机的445端口，因此在该工具启动的时候，直接进行了TCP三次握手，尝试连接远程主机的445端口 ，SMB协商使用SMBv2协议通信，进行NTLM认证 tcp-smb-ntlmtcp-smb-ntlm NTLM认证过程中能够看到请求的信息，域以及用户名 ntlm-namentlm...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/articles/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%86%85%E7%BD%91%E4%BD%93%E7%B3%BB%E5%BB%BA%E8%AE%BE/Psexec%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90%E4%B8%8E%E7%9B%91%E6%B5%8B.html"}],["meta",{"property":"og:site_name","content":"uu2fu3o的知识库"}],["meta",{"property":"og:title","content":"Psexec过程分析与监测"}],["meta",{"property":"og:description","content":"Psexec过程分析与监测 流量分析 psexec基于smb协议，利用远程主机的445端口，因此在该工具启动的时候，直接进行了TCP三次握手，尝试连接远程主机的445端口 ，SMB协商使用SMBv2协议通信，进行NTLM认证 tcp-smb-ntlmtcp-smb-ntlm NTLM认证过程中能够看到请求的信息，域以及用户名 ntlm-namentlm..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/tcp-smb-ntlm.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T18:41:02.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-15T18:41:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Psexec过程分析与监测\\",\\"image\\":[\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/tcp-smb-ntlm.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec_stream/ntlm-name.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec_stream/file-write.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec/file-write-finish.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec/svcttl.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec/pipe1.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec/pipe2-3-4.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec_stream/service-and-exe.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec/7045.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec/pipe_name.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec-stream/printf.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec-stream/recomsvc.png\\"],\\"dateModified\\":\\"2025-01-15T18:41:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"uu2fu3o\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"流量分析","slug":"流量分析","link":"#流量分析","children":[]},{"level":2,"title":"进程服务与日志","slug":"进程服务与日志","link":"#进程服务与日志","children":[]},{"level":2,"title":"基础的免杀","slug":"基础的免杀","link":"#基础的免杀","children":[]}],"git":{"createdTime":1736966462000,"updatedTime":1736966462000,"contributors":[{"name":"uu2fu3o","username":"uu2fu3o","email":"1027578439@qq.com","commits":1,"url":"https://github.com/uu2fu3o"}]},"readingTime":{"minutes":1.71,"words":512},"filePathRelative":"渗透测试/内网体系建设/Psexec过程分析与监测.md","localizedDate":"2025年1月16日","excerpt":"\\n<h2>流量分析</h2>\\n<p>psexec基于smb协议，利用远程主机的445端口，因此在该工具启动的时候，直接进行了TCP三次握手，尝试连接远程主机的445端口</p>\\n<p>，SMB协商使用SMBv2协议通信，进行NTLM认证</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/another_Intranet_horizontal/tcp-smb-ntlm.png\\" alt=\\"tcp-smb-ntlm\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>tcp-smb-ntlm</figcaption></figure>","autoDesc":true}');export{l as comp,u as data};
