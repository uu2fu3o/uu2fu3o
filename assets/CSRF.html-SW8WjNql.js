import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a,o as i}from"./app-DS0ZCcmM.js";const r={};function t(l,e){return i(),n("div",null,e[0]||(e[0]=[a(`<h1 id="cross-site-request-forgery" tabindex="-1"><a class="header-anchor" href="#cross-site-request-forgery"><span>Cross-site request forgery</span></a></h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>在XSS学习中，已经简单介绍过CSRF的原理以及简单利用，本篇主要讲述如何检测和防御CSRF攻击</p><h2 id="csrf检测" tabindex="-1"><a class="header-anchor" href="#csrf检测"><span>CSRF检测</span></a></h2><h3 id="http-referer" tabindex="-1"><a class="header-anchor" href="#http-referer"><span>http referer</span></a></h3><p>通过检测数据包中的referer字段判断是否有CSRF漏洞</p><p>具体方法可以直接置空referer字段进行发包，观察是否正常发包并且回应；</p><p>通常referer字段会被检测，我们可以伪造域看是否能够绕过检测</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>eg:</span></span>
<span class="line"><span>检测内容为uu2fu3o.com</span></span>
<span class="line"><span>我们可以修改为uu2fu3o.com.test.com or uu2fu3o.com/test.com，通过伪造域名来绕过</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="token" tabindex="-1"><a class="header-anchor" href="#token"><span>token</span></a></h2><p>如果一个数据包没有referer也没有token通常存在csrf漏洞，token以参数的形式加入到http请求包中，用户在登陆后获得一个随机的token并且添加到session中，以后的每次请求都会从session中取出该token作为参数添加，服务端验证token是否为用户请求；</p><p>同样的，在数据包中，我们可以置空token或者是删除该参数，观察是否有效</p><h2 id="csrf绕过" tabindex="-1"><a class="header-anchor" href="#csrf绕过"><span>CSRF绕过</span></a></h2><h3 id="更改请求方法" tabindex="-1"><a class="header-anchor" href="#更改请求方法"><span>更改请求方法</span></a></h3><p>服务端有可能会忘记对请求方法做限制，如果能够不限制请求方法访问，通常具有csrf漏洞</p><p>例如一个post提交的请求包</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>POST /change_passwd Http</span></span>
<span class="line"><span>.......</span></span>
<span class="line"><span>newpasswd=newpasswd</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以把他改为GET方法进行提交</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>GET /change_passwd?newpasswd=newpasswd Http</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果能够请求成功，即使设置了token也不一定能防御csrf</p><h3 id="对token进行测试" tabindex="-1"><a class="header-anchor" href="#对token进行测试"><span>对token进行测试</span></a></h3><p>当有token时我们可以采取以下的方式验证token是否有效</p><p>置空token或是删除token参数</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>POST /change_passwd Http</span></span>
<span class="line"><span>....</span></span>
<span class="line"><span>newpasswd=newpasswd&amp;token=</span></span>
<span class="line"><span>或是</span></span>
<span class="line"><span>newpasswd=newpasswd</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果验证内容只是token是否存在于服务端，我们可以尝试使用自己的token</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>POST /change_passwd Http</span></span>
<span class="line"><span>....</span></span>
<span class="line"><span>newpasswd=newpasswd&amp;token=ur_token</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>session固定</p><p>当一个站点使用双token的形式进行验证时，通常不会验证token的真实性，只是验证token是否相同，我们可以采取session固定对受害者进行攻击，这样受害者就会使用我们伪造的假token进行请求，从而被我们劫持</p><p>此时执行</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>POST /change_passwd </span></span>
<span class="line"><span>....</span></span>
<span class="line"><span>Cookie: token=fake_token</span></span>
<span class="line"><span>....</span></span>
<span class="line"><span>newpasswd=newpasswd&amp;token=fake_token</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对referer字段进行测试" tabindex="-1"><a class="header-anchor" href="#对referer字段进行测试"><span>对referer字段进行测试</span></a></h3><p>直接置空或者是移除referer字段进行发包验证</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;meta name =“referrer”content =“no-referrer”&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>将该内容添加到漏洞页面进行测试</p><p>使用二级域名绕过检测</p><h2 id="防御csrf" tabindex="-1"><a class="header-anchor" href="#防御csrf"><span>防御CSRF</span></a></h2><p>验证referer字段是否来自规定网址，并且只允许相应字段，这涉及到正则表达式的绕过</p><p>验证token，验证token的合法性，并且注意防止黑客伪造token</p><p>限制请求方法，这个会被经常忽略</p><p>在http头中自定义属性并进行验证</p><p>直接使用具有csrf防御功能的框架</p><h3 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h3><p><a href="https://pdai.tech/md/develop/security/dev-security-x-csrf.html#csrf-%E5%A6%82%E4%BD%95%E6%94%BB%E5%87%BB" target="_blank" rel="noopener noreferrer">https://pdai.tech/md/develop/security/dev-security-x-csrf.html#csrf-如何攻击</a></p><p><a href="https://www.freebuf.com/articles/web/254501.html" target="_blank" rel="noopener noreferrer">https://www.freebuf.com/articles/web/254501.html</a></p><p><a href="https://xz.aliyun.com/t/6176" target="_blank" rel="noopener noreferrer">https://xz.aliyun.com/t/6176</a></p><p><a href="https://www.cnblogs.com/echojson/p/12805102.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/echojson/p/12805102.html</a> &gt;&gt;会话固定攻击流程及原理</p>`,46)]))}const h=s(r,[["render",t],["__file","CSRF.html.vue"]]),o=JSON.parse('{"path":"/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%A4%96%E7%BD%91%E6%BC%8F%E6%B4%9E/CSRF.html","title":"CSRF","lang":"zh-CN","frontmatter":{"title":"CSRF","date":"2023-09-03T07:29:52.000Z","updated":"2023-06-03T09:22:12.000Z","categories":["渗透测试","外网漏洞"],"description":"Cross-site request forgery 前言 在XSS学习中，已经简单介绍过CSRF的原理以及简单利用，本篇主要讲述如何检测和防御CSRF攻击 CSRF检测 http referer 通过检测数据包中的referer字段判断是否有CSRF漏洞 具体方法可以直接置空referer字段进行发包，观察是否正常发包并且回应； 通常referer字...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/articles/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%A4%96%E7%BD%91%E6%BC%8F%E6%B4%9E/CSRF.html"}],["meta",{"property":"og:site_name","content":"uu2fu3o的知识库"}],["meta",{"property":"og:title","content":"CSRF"}],["meta",{"property":"og:description","content":"Cross-site request forgery 前言 在XSS学习中，已经简单介绍过CSRF的原理以及简单利用，本篇主要讲述如何检测和防御CSRF攻击 CSRF检测 http referer 通过检测数据包中的referer字段判断是否有CSRF漏洞 具体方法可以直接置空referer字段进行发包，观察是否正常发包并且回应； 通常referer字..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T18:41:02.000Z"}],["meta",{"property":"article:published_time","content":"2023-09-03T07:29:52.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-15T18:41:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CSRF\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-03T07:29:52.000Z\\",\\"dateModified\\":\\"2025-01-15T18:41:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"uu2fu3o\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"CSRF检测","slug":"csrf检测","link":"#csrf检测","children":[{"level":3,"title":"http referer","slug":"http-referer","link":"#http-referer","children":[]}]},{"level":2,"title":"token","slug":"token","link":"#token","children":[]},{"level":2,"title":"CSRF绕过","slug":"csrf绕过","link":"#csrf绕过","children":[{"level":3,"title":"更改请求方法","slug":"更改请求方法","link":"#更改请求方法","children":[]},{"level":3,"title":"对token进行测试","slug":"对token进行测试","link":"#对token进行测试","children":[]},{"level":3,"title":"对referer字段进行测试","slug":"对referer字段进行测试","link":"#对referer字段进行测试","children":[]}]},{"level":2,"title":"防御CSRF","slug":"防御csrf","link":"#防御csrf","children":[{"level":3,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}]}],"git":{"createdTime":1736966462000,"updatedTime":1736966462000,"contributors":[{"name":"uu2fu3o","username":"uu2fu3o","email":"1027578439@qq.com","commits":1,"url":"https://github.com/uu2fu3o"}]},"readingTime":{"minutes":2.61,"words":784},"filePathRelative":"渗透测试/外网漏洞/CSRF.md","localizedDate":"2023年9月3日","excerpt":"\\n<h2>前言</h2>\\n<p>在XSS学习中，已经简单介绍过CSRF的原理以及简单利用，本篇主要讲述如何检测和防御CSRF攻击</p>\\n<h2>CSRF检测</h2>\\n<h3>http referer</h3>\\n<p>通过检测数据包中的referer字段判断是否有CSRF漏洞</p>\\n<p>具体方法可以直接置空referer字段进行发包，观察是否正常发包并且回应；</p>\\n<p>通常referer字段会被检测，我们可以伪造域看是否能够绕过检测</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>eg:</span></span>\\n<span class=\\"line\\"><span>检测内容为uu2fu3o.com</span></span>\\n<span class=\\"line\\"><span>我们可以修改为uu2fu3o.com.test.com or uu2fu3o.com/test.com，通过伪造域名来绕过</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{h as comp,o as data};
