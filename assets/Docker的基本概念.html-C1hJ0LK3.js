import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as t,o as c}from"./app-DS0ZCcmM.js";const i={};function n(a,e){return c(),r("div",null,e[0]||(e[0]=[t('<h1 id="docker基本概念" tabindex="-1"><a class="header-anchor" href="#docker基本概念"><span>Docker基本概念</span></a></h1><h2 id="docker镜像" tabindex="-1"><a class="header-anchor" href="#docker镜像"><span>Docker镜像</span></a></h2><p>操作系统分为内核和用户空间，linux内核启动后会挂在root文件系统为用户空间提供支持，docker镜像就相当于一个root文件系统。</p><p><strong>Docker 镜像</strong> 是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像 <strong>不包含</strong> 任何动态数据，构建好的doker是不会改变的。</p><ul><li><p>分层存储</p><p>在docker镜像构建时会分层进行构建，是多层文件系统联合组成。每层构建完，该层不再发生变化。例如，删除前一层文件的操作，仅仅是在我当前层操作，标记了文件已删除，但实际文件依然存在。</p></li></ul><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/2024/image-20240112161736656.png" alt="image-20240112161736656" tabindex="0" loading="lazy"><figcaption>image-20240112161736656</figcaption></figure><p>可以看出是分层构建的</p><h2 id="docker容器" tabindex="-1"><a class="header-anchor" href="#docker容器"><span>Docker容器</span></a></h2><p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。因此容器可以拥有自己的 <code>root</code> 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。</p><p>简单理解，容器用于挂载镜像，是一个独立的环境。</p><p>镜像是分层存储的，容器也不例外，在创建容易时，指定镜像为容器的基础层，在此基础上创建一个当前容器的存储层(容器存储层)</p><p>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p><p>推荐使用数据卷或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。</p><h3 id="数据卷" tabindex="-1"><a class="header-anchor" href="#数据卷"><span>数据卷</span></a></h3><p><code>数据卷</code> 是一个可供一个或多个容器使用的特殊目录，它绕过 UnionFS，可以提供很多有用的特性：</p><ul><li><code>数据卷</code> 可以在容器之间共享和重用</li><li>对 <code>数据卷</code> 的修改会立马生效</li><li>对 <code>数据卷</code> 的更新，不会影响镜像</li><li><code>数据卷</code> 默认会一直存在，即使容器被删除</li></ul><blockquote><p>注意：<code>数据卷</code> 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会复制到数据卷中（仅数据卷为空时会复制）。</p></blockquote><h2 id="docker-registry" tabindex="-1"><a class="header-anchor" href="#docker-registry"><span>Docker Registry</span></a></h2><p>一种镜像的集中存储和分发的服务，我们执行镜像拉取操作就是通过这个服务，从不同的仓库中拉取镜像，详细操作请看docker的使用</p><p>镜像分发服务分为公开和私有，公开服务即我们常见的docker hub等，私有服务则是我们本地搭建的docker registry。</p>',20)]))}const d=o(i,[["render",n],["__file","Docker的基本概念.html.vue"]]),s=JSON.parse('{"path":"/%E4%BA%91/Docker/Docker%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html","title":"Docker基本概念","lang":"zh-CN","frontmatter":{"description":"Docker基本概念 Docker镜像 操作系统分为内核和用户空间，linux内核启动后会挂在root文件系统为用户空间提供支持，docker镜像就相当于一个root文件系统。 Docker 镜像 是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像 不包...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/articles/%E4%BA%91/Docker/Docker%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html"}],["meta",{"property":"og:site_name","content":"uu2fu3o的知识库"}],["meta",{"property":"og:title","content":"Docker基本概念"}],["meta",{"property":"og:description","content":"Docker基本概念 Docker镜像 操作系统分为内核和用户空间，linux内核启动后会挂在root文件系统为用户空间提供支持，docker镜像就相当于一个root文件系统。 Docker 镜像 是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像 不包..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/2024/image-20240112161736656.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T18:41:02.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-15T18:41:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker基本概念\\",\\"image\\":[\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/main/2024/image-20240112161736656.png\\"],\\"dateModified\\":\\"2025-01-15T18:41:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"uu2fu3o\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Docker镜像","slug":"docker镜像","link":"#docker镜像","children":[]},{"level":2,"title":"Docker容器","slug":"docker容器","link":"#docker容器","children":[{"level":3,"title":"数据卷","slug":"数据卷","link":"#数据卷","children":[]}]},{"level":2,"title":"Docker Registry","slug":"docker-registry","link":"#docker-registry","children":[]}],"git":{"createdTime":1736966462000,"updatedTime":1736966462000,"contributors":[{"name":"uu2fu3o","username":"uu2fu3o","email":"1027578439@qq.com","commits":1,"url":"https://github.com/uu2fu3o"}]},"readingTime":{"minutes":2.54,"words":761},"filePathRelative":"云/Docker/Docker的基本概念.md","localizedDate":"2025年1月16日","excerpt":"\\n<h2>Docker镜像</h2>\\n<p>操作系统分为内核和用户空间，linux内核启动后会挂在root文件系统为用户空间提供支持，docker镜像就相当于一个root文件系统。</p>\\n<p><strong>Docker 镜像</strong> 是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像 <strong>不包含</strong> 任何动态数据，构建好的doker是不会改变的。</p>\\n<ul>\\n<li>\\n<p>分层存储</p>\\n<p>在docker镜像构建时会分层进行构建，是多层文件系统联合组成。每层构建完，该层不再发生变化。例如，删除前一层文件的操作，仅仅是在我当前层操作，标记了文件已删除，但实际文件依然存在。</p>\\n</li>\\n</ul>","autoDesc":true}');export{d as comp,s as data};
